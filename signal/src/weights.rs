// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for gamedao_signal
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-02, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/subzero
// benchmark
// pallet
// --pallet=gamedao_signal
// --extrinsic=*
// --steps=20
// --repeat=10
// --output=gamedao-protocol/signal/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for gamedao_signal.
pub trait WeightInfo {
	fn proposal() -> Weight;
	fn vote(m: u32, ) -> Weight;
	fn on_initialize(p: u32, ) -> Weight;
}

/// Weights for gamedao_signal using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Control OrgState (r:1 w:0)
	// Storage: Control OrgMemberState (r:1 w:0)
	// Storage: Flow CampaignOwner (r:1 w:0)
	// Storage: Flow CampaignState (r:1 w:0)
	// Storage: Signal CampaignBalanceUsed (r:1 w:0)
	// Storage: Flow CampaignBalance (r:1 w:0)
	// Storage: Signal ProposalCount (r:1 w:1)
	// Storage: Signal ProposalOf (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: Control OrgTreasury (r:1 w:0)
	// Storage: Signal ProposalsByBlock (r:2 w:2)
	// Storage: Control OrgMemberCount (r:1 w:0)
	// Storage: Signal ProposalVoting (r:0 w:1)
	// Storage: Signal ProposalStates (r:0 w:1)
	fn proposal() -> Weight {
		(76_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(14 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	// Storage: Signal ProposalVoting (r:1 w:1)
	// Storage: Signal ProposalOf (r:1 w:0)
	// Storage: Control OrgMemberState (r:1 w:0)
	// Storage: Signal ProposalStates (r:1 w:1)
	// Storage: Control OrgTreasury (r:1 w:0)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: System Account (r:2 w:2)
	fn vote(m: u32, ) -> Weight {
		(83_015_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((152_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	// Storage: Signal ProposalsByBlock (r:1 w:0)
	// Storage: Signal ProposalStates (r:5 w:5)
	fn on_initialize(p: u32, ) -> Weight {
		(10_472_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((5_249_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(p as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(p as Weight)))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Control OrgState (r:1 w:0)
	// Storage: Control OrgMemberState (r:1 w:0)
	// Storage: Flow CampaignOwner (r:1 w:0)
	// Storage: Flow CampaignState (r:1 w:0)
	// Storage: Signal CampaignBalanceUsed (r:1 w:0)
	// Storage: Flow CampaignBalance (r:1 w:0)
	// Storage: Signal ProposalCount (r:1 w:1)
	// Storage: Signal ProposalOf (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: Control OrgTreasury (r:1 w:0)
	// Storage: Signal ProposalsByBlock (r:2 w:2)
	// Storage: Control OrgMemberCount (r:1 w:0)
	// Storage: Signal ProposalVoting (r:0 w:1)
	// Storage: Signal ProposalStates (r:0 w:1)
	fn proposal() -> Weight {
		(76_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(14 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	// Storage: Signal ProposalVoting (r:1 w:1)
	// Storage: Signal ProposalOf (r:1 w:0)
	// Storage: Control OrgMemberState (r:1 w:0)
	// Storage: Signal ProposalStates (r:1 w:1)
	// Storage: Control OrgTreasury (r:1 w:0)
	// Storage: Tokens Accounts (r:4 w:4)
	// Storage: System Account (r:2 w:2)
	fn vote(m: u32, ) -> Weight {
		(83_015_000 as Weight)
			// Standard Error: 4_000
			.saturating_add((152_000 as Weight).saturating_mul(m as Weight))
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	// Storage: Signal ProposalsByBlock (r:1 w:0)
	// Storage: Signal ProposalStates (r:5 w:5)
	fn on_initialize(p: u32, ) -> Weight {
		(10_472_000 as Weight)
			// Standard Error: 18_000
			.saturating_add((5_249_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(p as Weight)))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(p as Weight)))
	}
}
