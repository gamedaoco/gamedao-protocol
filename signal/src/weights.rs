
//! Autogenerated weights for gamedao_signal
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-19, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/subzero
// benchmark
// pallet
// --execution=wasm
// --pallet=gamedao_signal
// --extrinsic=*
// --steps=20
// --repeat=10
// --output=modules/gamedao-protocol/signal/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for gamedao_signal.
pub trait WeightInfo {
	fn proposal() -> Weight;
	fn vote(m: u32, ) -> Weight;
	fn on_initialize(p: u32, ) -> Weight;
}

/// Weights for gamedao_signal using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control MemberStates (r:1 w:0)
	/// Proof: Control MemberStates (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: Signal ProposalCount (r:1 w:1)
	/// Proof: Signal ProposalCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Signal ProposalOf (r:1 w:1)
	/// Proof: Signal ProposalOf (max_values: None, max_size: Some(363), added: 2838, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: Control OrgTreasury (r:1 w:0)
	/// Proof: Control OrgTreasury (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Signal ProposalsByBlock (r:2 w:2)
	/// Proof: Signal ProposalsByBlock (max_values: None, max_size: Some(3239), added: 5714, mode: MaxEncodedLen)
	/// Storage: Control OrgMemberCount (r:1 w:0)
	/// Proof: Control OrgMemberCount (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Signal ProposalVoting (r:0 w:1)
	/// Proof: Signal ProposalVoting (max_values: None, max_size: Some(130112), added: 132587, mode: MaxEncodedLen)
	/// Storage: Signal ProposalStates (r:0 w:1)
	/// Proof: Signal ProposalStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1328`
		//  Estimated: `38031`
		// Minimum execution time: 98_000 nanoseconds.
		Weight::from_parts(100_000_000, 38031)
			.saturating_add(T::DbWeight::get().reads(10_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: Signal ProposalVoting (r:1 w:1)
	/// Proof: Signal ProposalVoting (max_values: None, max_size: Some(130112), added: 132587, mode: MaxEncodedLen)
	/// Storage: Signal ProposalOf (r:1 w:0)
	/// Proof: Signal ProposalOf (max_values: None, max_size: Some(363), added: 2838, mode: MaxEncodedLen)
	/// Storage: Control MemberStates (r:1 w:0)
	/// Proof: Control MemberStates (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: Signal ProposalStates (r:1 w:1)
	/// Proof: Signal ProposalStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgTreasury (r:1 w:0)
	/// Proof: Control OrgTreasury (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:3 w:3)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `m` is `[0, 1000]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3816 + m * (51 ±0)`
		//  Estimated: `160361`
		// Minimum execution time: 111_000 nanoseconds.
		Weight::from_parts(108_350_723, 160361)
			// Standard Error: 1_962
			.saturating_add(Weight::from_ref_time(108_429).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Signal ProposalsByBlock (r:1 w:0)
	/// Proof: Signal ProposalsByBlock (max_values: None, max_size: Some(3239), added: 5714, mode: MaxEncodedLen)
	/// Storage: Signal ProposalStates (r:100 w:0)
	/// Proof: Signal ProposalStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// The range of component `p` is `[0, 100]`.
	fn on_initialize(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `362 + p * (86 ±0)`
		//  Estimated: `7694 + p * (2524 ±0)`
		// Minimum execution time: 4_000 nanoseconds.
		Weight::from_parts(9_238_222, 7694)
			// Standard Error: 7_826
			.saturating_add(Weight::from_ref_time(3_204_576).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_proof_size(2524).saturating_mul(p.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control MemberStates (r:1 w:0)
	/// Proof: Control MemberStates (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: Signal ProposalCount (r:1 w:1)
	/// Proof: Signal ProposalCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Signal ProposalOf (r:1 w:1)
	/// Proof: Signal ProposalOf (max_values: None, max_size: Some(363), added: 2838, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: Control OrgTreasury (r:1 w:0)
	/// Proof: Control OrgTreasury (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Signal ProposalsByBlock (r:2 w:2)
	/// Proof: Signal ProposalsByBlock (max_values: None, max_size: Some(3239), added: 5714, mode: MaxEncodedLen)
	/// Storage: Control OrgMemberCount (r:1 w:0)
	/// Proof: Control OrgMemberCount (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Signal ProposalVoting (r:0 w:1)
	/// Proof: Signal ProposalVoting (max_values: None, max_size: Some(130112), added: 132587, mode: MaxEncodedLen)
	/// Storage: Signal ProposalStates (r:0 w:1)
	/// Proof: Signal ProposalStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn proposal() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1328`
		//  Estimated: `38031`
		// Minimum execution time: 98_000 nanoseconds.
		Weight::from_parts(100_000_000, 38031)
			.saturating_add(RocksDbWeight::get().reads(10_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: Signal ProposalVoting (r:1 w:1)
	/// Proof: Signal ProposalVoting (max_values: None, max_size: Some(130112), added: 132587, mode: MaxEncodedLen)
	/// Storage: Signal ProposalOf (r:1 w:0)
	/// Proof: Signal ProposalOf (max_values: None, max_size: Some(363), added: 2838, mode: MaxEncodedLen)
	/// Storage: Control MemberStates (r:1 w:0)
	/// Proof: Control MemberStates (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: Signal ProposalStates (r:1 w:1)
	/// Proof: Signal ProposalStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgTreasury (r:1 w:0)
	/// Proof: Control OrgTreasury (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:3 w:3)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// The range of component `m` is `[0, 1000]`.
	fn vote(m: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `3816 + m * (51 ±0)`
		//  Estimated: `160361`
		// Minimum execution time: 111_000 nanoseconds.
		Weight::from_parts(108_350_723, 160361)
			// Standard Error: 1_962
			.saturating_add(Weight::from_ref_time(108_429).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Signal ProposalsByBlock (r:1 w:0)
	/// Proof: Signal ProposalsByBlock (max_values: None, max_size: Some(3239), added: 5714, mode: MaxEncodedLen)
	/// Storage: Signal ProposalStates (r:100 w:0)
	/// Proof: Signal ProposalStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// The range of component `p` is `[0, 100]`.
	fn on_initialize(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `362 + p * (86 ±0)`
		//  Estimated: `7694 + p * (2524 ±0)`
		// Minimum execution time: 4_000 nanoseconds.
		Weight::from_parts(9_238_222, 7694)
			// Standard Error: 7_826
			.saturating_add(Weight::from_ref_time(3_204_576).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_proof_size(2524).saturating_mul(p.into()))
	}
}