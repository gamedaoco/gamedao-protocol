
//! Autogenerated weights for gamedao_signal
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-10, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/subzero-dev
// benchmark
// pallet
// --execution=wasm
// --pallet=gamedao_signal
// --extrinsic=*
// --steps=20
// --repeat=10
// --output=modules/gamedao-protocol/signal/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for gamedao_signal.
pub trait WeightInfo {
	fn proposal() -> Weight;
	fn vote(m: u32, ) -> Weight;
	fn on_initialize(p: u32, ) -> Weight;
}

/// Weights for gamedao_signal using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	// Storage: Signal ProposalCount (r:1 w:1)
	// Storage: Signal ProposalOf (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: Control OrgTreasury (r:1 w:0)
	// Storage: Signal ProposalsByBlock (r:2 w:2)
	// Storage: Control OrgMemberCount (r:1 w:0)
	// Storage: Signal ProposalVoting (r:0 w:1)
	// Storage: Signal ProposalStates (r:0 w:1)
	fn proposal() -> Weight {
		// Minimum execution time: 90_000 nanoseconds.
		Weight::from_ref_time(94_000_000)
			.saturating_add(T::DbWeight::get().reads(10))
			.saturating_add(T::DbWeight::get().writes(8))
	}
	// Storage: Signal ProposalVoting (r:1 w:1)
	// Storage: Signal ProposalOf (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	// Storage: Signal ProposalStates (r:1 w:1)
	// Storage: Control OrgTreasury (r:1 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: System Account (r:1 w:1)
	/// The range of component `m` is `[0, 1000]`.
	fn vote(m: u32, ) -> Weight {
		// Minimum execution time: 107_000 nanoseconds.
		Weight::from_ref_time(113_880_549)
			// Standard Error: 3_532
			.saturating_add(Weight::from_ref_time(148_088).saturating_mul(m.into()))
			.saturating_add(T::DbWeight::get().reads(9))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Signal ProposalsByBlock (r:1 w:0)
	// Storage: Signal ProposalStates (r:5 w:0)
	/// The range of component `p` is `[0, 100]`.
	fn on_initialize(p: u32, ) -> Weight {
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(9_260_770)
			// Standard Error: 7_634
			.saturating_add(Weight::from_ref_time(2_838_161).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	// Storage: Signal ProposalCount (r:1 w:1)
	// Storage: Signal ProposalOf (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: Control OrgTreasury (r:1 w:0)
	// Storage: Signal ProposalsByBlock (r:2 w:2)
	// Storage: Control OrgMemberCount (r:1 w:0)
	// Storage: Signal ProposalVoting (r:0 w:1)
	// Storage: Signal ProposalStates (r:0 w:1)
	fn proposal() -> Weight {
		// Minimum execution time: 90_000 nanoseconds.
		Weight::from_ref_time(94_000_000)
			.saturating_add(RocksDbWeight::get().reads(10))
			.saturating_add(RocksDbWeight::get().writes(8))
	}
	// Storage: Signal ProposalVoting (r:1 w:1)
	// Storage: Signal ProposalOf (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	// Storage: Signal ProposalStates (r:1 w:1)
	// Storage: Control OrgTreasury (r:1 w:0)
	// Storage: Tokens Accounts (r:3 w:3)
	// Storage: System Account (r:1 w:1)
	/// The range of component `m` is `[0, 1000]`.
	fn vote(m: u32, ) -> Weight {
		// Minimum execution time: 107_000 nanoseconds.
		Weight::from_ref_time(113_880_549)
			// Standard Error: 3_532
			.saturating_add(Weight::from_ref_time(148_088).saturating_mul(m.into()))
			.saturating_add(RocksDbWeight::get().reads(9))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Signal ProposalsByBlock (r:1 w:0)
	// Storage: Signal ProposalStates (r:5 w:0)
	/// The range of component `p` is `[0, 100]`.
	fn on_initialize(p: u32, ) -> Weight {
		// Minimum execution time: 5_000 nanoseconds.
		Weight::from_ref_time(9_260_770)
			// Standard Error: 7_634
			.saturating_add(Weight::from_ref_time(2_838_161).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(p.into())))
	}
}