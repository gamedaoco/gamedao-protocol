
//! Autogenerated weights for gamedao_sense
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-04, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/subzero-dev
// benchmark
// pallet
// --execution=wasm
// --pallet=gamedao_sense
// --extrinsic=*
// --steps=20
// --repeat=10
// --output=modules/gamedao-protocol/sense/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for gamedao_sense.
pub trait WeightInfo {
	fn create_entity() -> Weight;
	fn update_property() -> Weight;
}

/// Weights for gamedao_sense using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Sense Entities (r:1 w:1)
	/// Proof: Sense Entities (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
	/// Storage: Sense EntityCount (r:1 w:1)
	/// Proof: Sense EntityCount (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Sense Properties (r:0 w:3)
	/// Proof: Sense Properties (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	fn create_entity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `3156`
		// Minimum execution time: 21_000 nanoseconds.
		Weight::from_parts(22_000_000, 3156)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(5_u64))
	}
	/// Storage: Sense Entities (r:1 w:0)
	/// Proof: Sense Entities (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
	/// Storage: Sense Properties (r:1 w:1)
	/// Proof: Sense Properties (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	fn update_property() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `452`
		//  Estimated: `5197`
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_parts(21_000_000, 5197)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Sense Entities (r:1 w:1)
	/// Proof: Sense Entities (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
	/// Storage: Sense EntityCount (r:1 w:1)
	/// Proof: Sense EntityCount (max_values: Some(1), max_size: Some(16), added: 511, mode: MaxEncodedLen)
	/// Storage: Sense Properties (r:0 w:3)
	/// Proof: Sense Properties (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	fn create_entity() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `142`
		//  Estimated: `3156`
		// Minimum execution time: 21_000 nanoseconds.
		Weight::from_parts(22_000_000, 3156)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
	}
	/// Storage: Sense Entities (r:1 w:0)
	/// Proof: Sense Entities (max_values: None, max_size: Some(170), added: 2645, mode: MaxEncodedLen)
	/// Storage: Sense Properties (r:1 w:1)
	/// Proof: Sense Properties (max_values: None, max_size: Some(77), added: 2552, mode: MaxEncodedLen)
	fn update_property() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `452`
		//  Estimated: `5197`
		// Minimum execution time: 20_000 nanoseconds.
		Weight::from_parts(21_000_000, 5197)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}