// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for gamedao_battlepass
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-06, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/subzero-dev
// benchmark
// pallet
// --pallet=gamedao_battlepass
// --extrinsic=*
// --steps=20
// --repeat=10
// --output=modules/gamedao-protocol/battlepass/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for gamedao_battlepass.
pub trait WeightInfo {
	fn create_battlepass() -> Weight;
	fn claim_battlepass() -> Weight;
	fn activate_battlepass() -> Weight;
	fn conclude_battlepass() -> Weight;
	fn set_points() -> Weight;
	fn create_reward() -> Weight;
	fn disable_reward() -> Weight;
	fn claim_reward() -> Weight;
	fn add_level() -> Weight;
	fn remove_level() -> Weight;
	fn add_bot() -> Weight;
}

/// Weights for gamedao_battlepass using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	// Storage: RmrkCore CollectionIndex (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Collections (r:0 w:1)
	// Storage: Uniques ClassAccount (r:0 w:1)
	// Storage: Uniques NextCollectionId (r:0 w:1)
	// Storage: Battlepass BattlepassStates (r:0 w:1)
	// Storage: Battlepass Battlepasses (r:0 w:1)
	fn create_battlepass() -> Weight {
		(44_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(8 as Weight))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	// Storage: Battlepass ClaimedBattlepasses (r:2 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: Uniques Account (r:0 w:1)
	fn claim_battlepass() -> Weight {
		(63_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(11 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:1)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	fn activate_battlepass() -> Weight {
		(28_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:1)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	fn conclude_battlepass() -> Weight {
		(27_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(2 as Weight))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	// Storage: Battlepass Points (r:0 w:1)
	fn set_points() -> Weight {
		(27_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: RmrkCore CollectionIndex (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Collections (r:0 w:1)
	// Storage: Uniques ClassAccount (r:0 w:1)
	// Storage: Uniques NextCollectionId (r:0 w:1)
	// Storage: Battlepass Rewards (r:0 w:1)
	// Storage: Battlepass RewardStates (r:0 w:1)
	fn create_reward() -> Weight {
		(48_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(7 as Weight))
	}
	// Storage: Battlepass Rewards (r:1 w:0)
	// Storage: Battlepass RewardStates (r:1 w:1)
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	fn disable_reward() -> Weight {
		(25_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Battlepass Rewards (r:1 w:0)
	// Storage: Battlepass RewardStates (r:1 w:0)
	// Storage: Battlepass ClaimedRewards (r:2 w:1)
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	// Storage: Battlepass ClaimedBattlepasses (r:1 w:0)
	// Storage: RmrkCore Nfts (r:2 w:1)
	// Storage: Battlepass Points (r:1 w:0)
	// Storage: Battlepass Levels (r:2 w:0)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: Uniques Account (r:0 w:1)
	fn claim_reward() -> Weight {
		(95_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(18 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass Levels (r:0 w:1)
	fn add_level() -> Weight {
		(24_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(4 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass Levels (r:1 w:1)
	fn remove_level() -> Weight {
		(27_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	fn add_bot() -> Weight {
		(26_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	// Storage: RmrkCore CollectionIndex (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Collections (r:0 w:1)
	// Storage: Uniques ClassAccount (r:0 w:1)
	// Storage: Uniques NextCollectionId (r:0 w:1)
	// Storage: Battlepass BattlepassStates (r:0 w:1)
	// Storage: Battlepass Battlepasses (r:0 w:1)
	fn create_battlepass() -> Weight {
		(44_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(8 as Weight))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	// Storage: Battlepass ClaimedBattlepasses (r:2 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: Uniques Account (r:0 w:1)
	fn claim_battlepass() -> Weight {
		(63_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(11 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:1)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	fn activate_battlepass() -> Weight {
		(28_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:1)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	fn conclude_battlepass() -> Weight {
		(27_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(2 as Weight))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	// Storage: Battlepass Points (r:0 w:1)
	fn set_points() -> Weight {
		(27_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: RmrkCore CollectionIndex (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Collections (r:0 w:1)
	// Storage: Uniques ClassAccount (r:0 w:1)
	// Storage: Uniques NextCollectionId (r:0 w:1)
	// Storage: Battlepass Rewards (r:0 w:1)
	// Storage: Battlepass RewardStates (r:0 w:1)
	fn create_reward() -> Weight {
		(48_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(7 as Weight))
	}
	// Storage: Battlepass Rewards (r:1 w:0)
	// Storage: Battlepass RewardStates (r:1 w:1)
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	fn disable_reward() -> Weight {
		(25_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Battlepass Rewards (r:1 w:0)
	// Storage: Battlepass RewardStates (r:1 w:0)
	// Storage: Battlepass ClaimedRewards (r:2 w:1)
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	// Storage: Battlepass ClaimedBattlepasses (r:1 w:0)
	// Storage: RmrkCore Nfts (r:2 w:1)
	// Storage: Battlepass Points (r:1 w:0)
	// Storage: Battlepass Levels (r:2 w:0)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: Uniques Account (r:0 w:1)
	fn claim_reward() -> Weight {
		(95_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(18 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass Levels (r:0 w:1)
	fn add_level() -> Weight {
		(24_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(4 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass Levels (r:1 w:1)
	fn remove_level() -> Weight {
		(27_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	fn add_bot() -> Weight {
		(26_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}
