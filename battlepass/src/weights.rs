
//! Autogenerated weights for gamedao_battlepass
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-23, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/subzero-dev
// benchmark
// pallet
// --execution=wasm
// --pallet=gamedao_battlepass
// --extrinsic=*
// --steps=20
// --repeat=10
// --output=modules/gamedao-protocol/battlepass/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for gamedao_battlepass.
pub trait WeightInfo {
	fn create_battlepass() -> Weight;
	fn update_battlepass() -> Weight;
	fn claim_battlepass() -> Weight;
	fn activate_battlepass() -> Weight;
	fn conclude_battlepass() -> Weight;
	fn set_points() -> Weight;
	fn create_reward() -> Weight;
	fn update_reward() -> Weight;
	fn disable_reward() -> Weight;
	fn claim_reward() -> Weight;
	fn add_level() -> Weight;
	fn remove_level() -> Weight;
	fn add_bot() -> Weight;
}

/// Weights for gamedao_battlepass using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	// Storage: Battlepass CollectionIndex (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Collections (r:0 w:1)
	// Storage: Uniques ClassAccount (r:0 w:1)
	// Storage: Battlepass BattlepassStates (r:0 w:1)
	// Storage: Battlepass Battlepasses (r:0 w:1)
	fn create_battlepass() -> Weight {
		// Minimum execution time: 68_000 nanoseconds.
		Weight::from_ref_time(69_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Battlepass Battlepasses (r:1 w:1)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	fn update_battlepass() -> Weight {
		// Minimum execution time: 35_000 nanoseconds.
		Weight::from_ref_time(36_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	// Storage: Battlepass ClaimedBattlepasses (r:1 w:1)
	// Storage: Battlepass NftIndex (r:1 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: Uniques Account (r:0 w:1)
	fn claim_battlepass() -> Weight {
		// Minimum execution time: 97_000 nanoseconds.
		Weight::from_ref_time(100_000_000)
			.saturating_add(T::DbWeight::get().reads(13))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:1)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	fn activate_battlepass() -> Weight {
		// Minimum execution time: 40_000 nanoseconds.
		Weight::from_ref_time(41_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:1)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	fn conclude_battlepass() -> Weight {
		// Minimum execution time: 38_000 nanoseconds.
		Weight::from_ref_time(41_000_000)
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	// Storage: Battlepass Points (r:0 w:1)
	fn set_points() -> Weight {
		// Minimum execution time: 40_000 nanoseconds.
		Weight::from_ref_time(42_000_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	// Storage: Battlepass CollectionIndex (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Collections (r:0 w:1)
	// Storage: Uniques ClassAccount (r:0 w:1)
	// Storage: Battlepass Rewards (r:0 w:1)
	// Storage: Battlepass RewardStates (r:0 w:1)
	fn create_reward() -> Weight {
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_ref_time(79_000_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Battlepass Rewards (r:1 w:1)
	// Storage: Battlepass RewardStates (r:1 w:0)
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	fn update_reward() -> Weight {
		// Minimum execution time: 47_000 nanoseconds.
		Weight::from_ref_time(50_000_000)
			.saturating_add(T::DbWeight::get().reads(7))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Battlepass Rewards (r:1 w:0)
	// Storage: Battlepass RewardStates (r:1 w:1)
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	fn disable_reward() -> Weight {
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_ref_time(39_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Battlepass Rewards (r:1 w:0)
	// Storage: Battlepass RewardStates (r:1 w:0)
	// Storage: Battlepass ClaimedRewards (r:1 w:1)
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	// Storage: Battlepass ClaimedBattlepasses (r:1 w:0)
	// Storage: RmrkCore Nfts (r:2 w:1)
	// Storage: Battlepass Points (r:1 w:0)
	// Storage: Battlepass Levels (r:2 w:0)
	// Storage: Battlepass NftIndex (r:1 w:1)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: Uniques Account (r:0 w:1)
	fn claim_reward() -> Weight {
		// Minimum execution time: 130_000 nanoseconds.
		Weight::from_ref_time(132_000_000)
			.saturating_add(T::DbWeight::get().reads(20))
			.saturating_add(T::DbWeight::get().writes(7))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	// Storage: Battlepass Levels (r:0 w:1)
	fn add_level() -> Weight {
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_ref_time(39_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	// Storage: Battlepass Levels (r:1 w:1)
	fn remove_level() -> Weight {
		// Minimum execution time: 41_000 nanoseconds.
		Weight::from_ref_time(44_000_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	fn add_bot() -> Weight {
		// Minimum execution time: 36_000 nanoseconds.
		Weight::from_ref_time(38_000_000)
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(1))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	// Storage: Battlepass CollectionIndex (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Collections (r:0 w:1)
	// Storage: Uniques ClassAccount (r:0 w:1)
	// Storage: Battlepass BattlepassStates (r:0 w:1)
	// Storage: Battlepass Battlepasses (r:0 w:1)
	fn create_battlepass() -> Weight {
		// Minimum execution time: 68_000 nanoseconds.
		Weight::from_ref_time(69_000_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: Battlepass Battlepasses (r:1 w:1)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	fn update_battlepass() -> Weight {
		// Minimum execution time: 35_000 nanoseconds.
		Weight::from_ref_time(36_000_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	// Storage: Battlepass ClaimedBattlepasses (r:1 w:1)
	// Storage: Battlepass NftIndex (r:1 w:1)
	// Storage: RmrkCore Nfts (r:1 w:1)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: Uniques Account (r:0 w:1)
	fn claim_battlepass() -> Weight {
		// Minimum execution time: 97_000 nanoseconds.
		Weight::from_ref_time(100_000_000)
			.saturating_add(RocksDbWeight::get().reads(13))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:1)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	fn activate_battlepass() -> Weight {
		// Minimum execution time: 40_000 nanoseconds.
		Weight::from_ref_time(41_000_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:1)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	fn conclude_battlepass() -> Weight {
		// Minimum execution time: 38_000 nanoseconds.
		Weight::from_ref_time(41_000_000)
			.saturating_add(RocksDbWeight::get().reads(4))
			.saturating_add(RocksDbWeight::get().writes(2))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	// Storage: Battlepass Points (r:0 w:1)
	fn set_points() -> Weight {
		// Minimum execution time: 40_000 nanoseconds.
		Weight::from_ref_time(42_000_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	// Storage: Battlepass CollectionIndex (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: RmrkCore Collections (r:0 w:1)
	// Storage: Uniques ClassAccount (r:0 w:1)
	// Storage: Battlepass Rewards (r:0 w:1)
	// Storage: Battlepass RewardStates (r:0 w:1)
	fn create_reward() -> Weight {
		// Minimum execution time: 77_000 nanoseconds.
		Weight::from_ref_time(79_000_000)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Battlepass Rewards (r:1 w:1)
	// Storage: Battlepass RewardStates (r:1 w:0)
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	fn update_reward() -> Weight {
		// Minimum execution time: 47_000 nanoseconds.
		Weight::from_ref_time(50_000_000)
			.saturating_add(RocksDbWeight::get().reads(7))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Battlepass Rewards (r:1 w:0)
	// Storage: Battlepass RewardStates (r:1 w:1)
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	fn disable_reward() -> Weight {
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_ref_time(39_000_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Battlepass Rewards (r:1 w:0)
	// Storage: Battlepass RewardStates (r:1 w:0)
	// Storage: Battlepass ClaimedRewards (r:1 w:1)
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	// Storage: Battlepass ClaimedBattlepasses (r:1 w:0)
	// Storage: RmrkCore Nfts (r:2 w:1)
	// Storage: Battlepass Points (r:1 w:0)
	// Storage: Battlepass Levels (r:2 w:0)
	// Storage: Battlepass NftIndex (r:1 w:1)
	// Storage: RmrkCore Collections (r:1 w:1)
	// Storage: Uniques Asset (r:1 w:1)
	// Storage: Uniques Class (r:1 w:1)
	// Storage: Uniques CollectionMaxSupply (r:1 w:0)
	// Storage: Uniques Account (r:0 w:1)
	fn claim_reward() -> Weight {
		// Minimum execution time: 130_000 nanoseconds.
		Weight::from_ref_time(132_000_000)
			.saturating_add(RocksDbWeight::get().reads(20))
			.saturating_add(RocksDbWeight::get().writes(7))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	// Storage: Battlepass Levels (r:0 w:1)
	fn add_level() -> Weight {
		// Minimum execution time: 39_000 nanoseconds.
		Weight::from_ref_time(39_000_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	// Storage: Battlepass Levels (r:1 w:1)
	fn remove_level() -> Weight {
		// Minimum execution time: 41_000 nanoseconds.
		Weight::from_ref_time(44_000_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Battlepass Battlepasses (r:1 w:0)
	// Storage: Battlepass BattlepassStates (r:1 w:0)
	// Storage: Control OrgStates (r:1 w:0)
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	fn add_bot() -> Weight {
		// Minimum execution time: 36_000 nanoseconds.
		Weight::from_ref_time(38_000_000)
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
}