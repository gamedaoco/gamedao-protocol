
//! Autogenerated weights for gamedao_battlepass
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-19, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/subzero
// benchmark
// pallet
// --execution=wasm
// --pallet=gamedao_battlepass
// --extrinsic=*
// --steps=20
// --repeat=10
// --output=modules/gamedao-protocol/battlepass/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for gamedao_battlepass.
pub trait WeightInfo {
	fn create_battlepass() -> Weight;
	fn update_battlepass() -> Weight;
	fn claim_battlepass() -> Weight;
	fn activate_battlepass() -> Weight;
	fn conclude_battlepass() -> Weight;
	fn set_points() -> Weight;
	fn create_reward() -> Weight;
	fn update_reward() -> Weight;
	fn disable_reward() -> Weight;
	fn claim_reward() -> Weight;
	fn add_level() -> Weight;
	fn remove_level() -> Weight;
	fn add_bot() -> Weight;
}

/// Weights for gamedao_battlepass using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Nfts NextCollectionId (r:1 w:1)
	/// Proof: Nfts NextCollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionMetadataOf (r:1 w:1)
	/// Proof: Nfts CollectionMetadataOf (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:0 w:1)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Battlepass Battlepasses (r:0 w:1)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:0 w:1)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:0 w:1)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionAccount (r:0 w:1)
	/// Proof: Nfts CollectionAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	fn create_battlepass() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `566`
		//  Estimated: `19457`
		// Minimum execution time: 102_000 nanoseconds.
		Weight::from_parts(106_000_000, 19457)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(9_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:1)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionMetadataOf (r:1 w:1)
	/// Proof: Nfts CollectionMetadataOf (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	fn update_battlepass() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1286`
		//  Estimated: `32273`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(80_000_000, 32273)
			.saturating_add(T::DbWeight::get().reads(9_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:1 w:1)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: Battlepass NftIndex (r:1 w:1)
	/// Proof: Battlepass NftIndex (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts Item (r:1 w:1)
	/// Proof: Nfts Item (max_values: None, max_size: Some(861), added: 3336, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Nfts ItemMetadataOf (r:1 w:1)
	/// Proof: Nfts ItemMetadataOf (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	fn claim_battlepass() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1349`
		//  Estimated: `45207`
		// Minimum execution time: 135_000 nanoseconds.
		Weight::from_parts(141_000_000, 45207)
			.saturating_add(T::DbWeight::get().reads(13_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:1)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	fn activate_battlepass() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `794`
		//  Estimated: `18085`
		// Minimum execution time: 41_000 nanoseconds.
		Weight::from_parts(41_000_000, 18085)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:1)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	fn conclude_battlepass() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `790`
		//  Estimated: `14571`
		// Minimum execution time: 35_000 nanoseconds.
		Weight::from_parts(38_000_000, 14571)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:2 w:0)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: Battlepass Points (r:0 w:1)
	/// Proof: Battlepass Points (max_values: None, max_size: Some(100), added: 2575, mode: MaxEncodedLen)
	fn set_points() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1423`
		//  Estimated: `24201`
		// Minimum execution time: 44_000 nanoseconds.
		Weight::from_parts(45_000_000, 24201)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Nfts NextCollectionId (r:1 w:1)
	/// Proof: Nfts NextCollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionMetadataOf (r:1 w:1)
	/// Proof: Nfts CollectionMetadataOf (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	/// Storage: Battlepass Rewards (r:0 w:1)
	/// Proof: Battlepass Rewards (max_values: None, max_size: Some(218), added: 2693, mode: MaxEncodedLen)
	/// Storage: Battlepass RewardStates (r:0 w:1)
	/// Proof: Battlepass RewardStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:0 w:1)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:0 w:1)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionAccount (r:0 w:1)
	/// Proof: Nfts CollectionAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	fn create_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1197`
		//  Estimated: `26690`
		// Minimum execution time: 112_000 nanoseconds.
		Weight::from_parts(113_000_000, 26690)
			.saturating_add(T::DbWeight::get().reads(8_u64))
			.saturating_add(T::DbWeight::get().writes(8_u64))
	}
	/// Storage: Battlepass Rewards (r:1 w:1)
	/// Proof: Battlepass Rewards (max_values: None, max_size: Some(218), added: 2693, mode: MaxEncodedLen)
	/// Storage: Battlepass RewardStates (r:1 w:0)
	/// Proof: Battlepass RewardStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionMetadataOf (r:1 w:1)
	/// Proof: Nfts CollectionMetadataOf (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	fn update_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1632`
		//  Estimated: `39470`
		// Minimum execution time: 90_000 nanoseconds.
		Weight::from_parts(93_000_000, 39470)
			.saturating_add(T::DbWeight::get().reads(11_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Battlepass Rewards (r:1 w:0)
	/// Proof: Battlepass Rewards (max_values: None, max_size: Some(218), added: 2693, mode: MaxEncodedLen)
	/// Storage: Battlepass RewardStates (r:1 w:1)
	/// Proof: Battlepass RewardStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	fn disable_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `946`
		//  Estimated: `18254`
		// Minimum execution time: 37_000 nanoseconds.
		Weight::from_parts(38_000_000, 18254)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Battlepass Rewards (r:1 w:0)
	/// Proof: Battlepass Rewards (max_values: None, max_size: Some(218), added: 2693, mode: MaxEncodedLen)
	/// Storage: Battlepass RewardStates (r:1 w:0)
	/// Proof: Battlepass RewardStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Battlepass ClaimedRewards (r:1 w:1)
	/// Proof: Battlepass ClaimedRewards (max_values: None, max_size: Some(100), added: 2575, mode: MaxEncodedLen)
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:2 w:1)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: Battlepass Points (r:1 w:0)
	/// Proof: Battlepass Points (max_values: None, max_size: Some(100), added: 2575, mode: MaxEncodedLen)
	/// Storage: Battlepass Levels (r:2 w:0)
	/// Proof: Battlepass Levels (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Battlepass NftIndex (r:1 w:1)
	/// Proof: Battlepass NftIndex (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts Item (r:1 w:1)
	/// Proof: Nfts Item (max_values: None, max_size: Some(861), added: 3336, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Nfts ItemMetadataOf (r:1 w:1)
	/// Proof: Nfts ItemMetadataOf (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	fn claim_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2281`
		//  Estimated: `68175`
		// Minimum execution time: 163_000 nanoseconds.
		Weight::from_parts(166_000_000, 68175)
			.saturating_add(T::DbWeight::get().reads(20_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Battlepass Levels (r:0 w:1)
	/// Proof: Battlepass Levels (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	fn add_level() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `828`
		//  Estimated: `18085`
		// Minimum execution time: 35_000 nanoseconds.
		Weight::from_parts(36_000_000, 18085)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Battlepass Levels (r:1 w:1)
	/// Proof: Battlepass Levels (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	fn remove_level() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `922`
		//  Estimated: `21619`
		// Minimum execution time: 40_000 nanoseconds.
		Weight::from_parts(41_000_000, 21619)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	fn add_bot() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `794`
		//  Estimated: `18085`
		// Minimum execution time: 32_000 nanoseconds.
		Weight::from_parts(33_000_000, 18085)
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Nfts NextCollectionId (r:1 w:1)
	/// Proof: Nfts NextCollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionMetadataOf (r:1 w:1)
	/// Proof: Nfts CollectionMetadataOf (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:0 w:1)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Battlepass Battlepasses (r:0 w:1)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:0 w:1)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:0 w:1)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionAccount (r:0 w:1)
	/// Proof: Nfts CollectionAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	fn create_battlepass() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `566`
		//  Estimated: `19457`
		// Minimum execution time: 102_000 nanoseconds.
		Weight::from_parts(106_000_000, 19457)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(9_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:1)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionMetadataOf (r:1 w:1)
	/// Proof: Nfts CollectionMetadataOf (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	fn update_battlepass() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1286`
		//  Estimated: `32273`
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_parts(80_000_000, 32273)
			.saturating_add(RocksDbWeight::get().reads(9_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:1 w:1)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: Battlepass NftIndex (r:1 w:1)
	/// Proof: Battlepass NftIndex (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts Item (r:1 w:1)
	/// Proof: Nfts Item (max_values: None, max_size: Some(861), added: 3336, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Nfts ItemMetadataOf (r:1 w:1)
	/// Proof: Nfts ItemMetadataOf (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	fn claim_battlepass() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1349`
		//  Estimated: `45207`
		// Minimum execution time: 135_000 nanoseconds.
		Weight::from_parts(141_000_000, 45207)
			.saturating_add(RocksDbWeight::get().reads(13_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:1)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	fn activate_battlepass() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `794`
		//  Estimated: `18085`
		// Minimum execution time: 41_000 nanoseconds.
		Weight::from_parts(41_000_000, 18085)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:1)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	fn conclude_battlepass() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `790`
		//  Estimated: `14571`
		// Minimum execution time: 35_000 nanoseconds.
		Weight::from_parts(38_000_000, 14571)
			.saturating_add(RocksDbWeight::get().reads(4_u64))
			.saturating_add(RocksDbWeight::get().writes(2_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:2 w:0)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: Battlepass Points (r:0 w:1)
	/// Proof: Battlepass Points (max_values: None, max_size: Some(100), added: 2575, mode: MaxEncodedLen)
	fn set_points() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1423`
		//  Estimated: `24201`
		// Minimum execution time: 44_000 nanoseconds.
		Weight::from_parts(45_000_000, 24201)
			.saturating_add(RocksDbWeight::get().reads(7_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Nfts NextCollectionId (r:1 w:1)
	/// Proof: Nfts NextCollectionId (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionMetadataOf (r:1 w:1)
	/// Proof: Nfts CollectionMetadataOf (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	/// Storage: Battlepass Rewards (r:0 w:1)
	/// Proof: Battlepass Rewards (max_values: None, max_size: Some(218), added: 2693, mode: MaxEncodedLen)
	/// Storage: Battlepass RewardStates (r:0 w:1)
	/// Proof: Battlepass RewardStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:0 w:1)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:0 w:1)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionAccount (r:0 w:1)
	/// Proof: Nfts CollectionAccount (max_values: None, max_size: Some(68), added: 2543, mode: MaxEncodedLen)
	fn create_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1197`
		//  Estimated: `26690`
		// Minimum execution time: 112_000 nanoseconds.
		Weight::from_parts(113_000_000, 26690)
			.saturating_add(RocksDbWeight::get().reads(8_u64))
			.saturating_add(RocksDbWeight::get().writes(8_u64))
	}
	/// Storage: Battlepass Rewards (r:1 w:1)
	/// Proof: Battlepass Rewards (max_values: None, max_size: Some(218), added: 2693, mode: MaxEncodedLen)
	/// Storage: Battlepass RewardStates (r:1 w:0)
	/// Proof: Battlepass RewardStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionMetadataOf (r:1 w:1)
	/// Proof: Nfts CollectionMetadataOf (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	fn update_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1632`
		//  Estimated: `39470`
		// Minimum execution time: 90_000 nanoseconds.
		Weight::from_parts(93_000_000, 39470)
			.saturating_add(RocksDbWeight::get().reads(11_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Battlepass Rewards (r:1 w:0)
	/// Proof: Battlepass Rewards (max_values: None, max_size: Some(218), added: 2693, mode: MaxEncodedLen)
	/// Storage: Battlepass RewardStates (r:1 w:1)
	/// Proof: Battlepass RewardStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	fn disable_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `946`
		//  Estimated: `18254`
		// Minimum execution time: 37_000 nanoseconds.
		Weight::from_parts(38_000_000, 18254)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Battlepass Rewards (r:1 w:0)
	/// Proof: Battlepass Rewards (max_values: None, max_size: Some(218), added: 2693, mode: MaxEncodedLen)
	/// Storage: Battlepass RewardStates (r:1 w:0)
	/// Proof: Battlepass RewardStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Battlepass ClaimedRewards (r:1 w:1)
	/// Proof: Battlepass ClaimedRewards (max_values: None, max_size: Some(100), added: 2575, mode: MaxEncodedLen)
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Nfts Account (r:2 w:1)
	/// Proof: Nfts Account (max_values: None, max_size: Some(88), added: 2563, mode: MaxEncodedLen)
	/// Storage: Battlepass Points (r:1 w:0)
	/// Proof: Battlepass Points (max_values: None, max_size: Some(100), added: 2575, mode: MaxEncodedLen)
	/// Storage: Battlepass Levels (r:2 w:0)
	/// Proof: Battlepass Levels (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Battlepass NftIndex (r:1 w:1)
	/// Proof: Battlepass NftIndex (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionConfigOf (r:1 w:0)
	/// Proof: Nfts CollectionConfigOf (max_values: None, max_size: Some(73), added: 2548, mode: MaxEncodedLen)
	/// Storage: Nfts Item (r:1 w:1)
	/// Proof: Nfts Item (max_values: None, max_size: Some(861), added: 3336, mode: MaxEncodedLen)
	/// Storage: Nfts Collection (r:1 w:1)
	/// Proof: Nfts Collection (max_values: None, max_size: Some(84), added: 2559, mode: MaxEncodedLen)
	/// Storage: Nfts CollectionRoleOf (r:1 w:0)
	/// Proof: Nfts CollectionRoleOf (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	/// Storage: Nfts ItemConfigOf (r:1 w:1)
	/// Proof: Nfts ItemConfigOf (max_values: None, max_size: Some(48), added: 2523, mode: MaxEncodedLen)
	/// Storage: Nfts ItemMetadataOf (r:1 w:1)
	/// Proof: Nfts ItemMetadataOf (max_values: None, max_size: Some(155), added: 2630, mode: MaxEncodedLen)
	fn claim_reward() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `2281`
		//  Estimated: `68175`
		// Minimum execution time: 163_000 nanoseconds.
		Weight::from_parts(166_000_000, 68175)
			.saturating_add(RocksDbWeight::get().reads(20_u64))
			.saturating_add(RocksDbWeight::get().writes(7_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Battlepass Levels (r:0 w:1)
	/// Proof: Battlepass Levels (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	fn add_level() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `828`
		//  Estimated: `18085`
		// Minimum execution time: 35_000 nanoseconds.
		Weight::from_parts(36_000_000, 18085)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:0)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	/// Storage: Battlepass Levels (r:1 w:1)
	/// Proof: Battlepass Levels (max_values: None, max_size: Some(69), added: 2544, mode: MaxEncodedLen)
	fn remove_level() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `922`
		//  Estimated: `21619`
		// Minimum execution time: 40_000 nanoseconds.
		Weight::from_parts(41_000_000, 21619)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Battlepass Battlepasses (r:1 w:0)
	/// Proof: Battlepass Battlepasses (max_values: None, max_size: Some(254), added: 2729, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassStates (r:1 w:0)
	/// Proof: Battlepass BattlepassStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:1 w:0)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Battlepass BattlepassInfoByOrg (r:1 w:1)
	/// Proof: Battlepass BattlepassInfoByOrg (max_values: None, max_size: Some(118), added: 2593, mode: MaxEncodedLen)
	fn add_bot() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `794`
		//  Estimated: `18085`
		// Minimum execution time: 32_000 nanoseconds.
		Weight::from_parts(33_000_000, 18085)
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
}