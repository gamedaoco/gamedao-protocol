// Auto-generated contract addresses from deployment
// Do not edit this file manually

// Contract addresses for different networks
export interface NetworkAddresses {
  REGISTRY: string;
  CONTROL: string;
  MEMBERSHIP: string;
  FLOW: string;
  SIGNAL: string;
  SENSE: string;
  IDENTITY: string;
  STAKING: string;
  TREASURY: string;
  GAME_TOKEN: string;
  USDC_TOKEN: string;
}

// Local/development addresses (hardhat network)
export const LOCAL_ADDRESSES: NetworkAddresses = {
  "REGISTRY": "",
  "CONTROL": "",
  "MEMBERSHIP": "",
  "FLOW": "",
  "SIGNAL": "",
  "SENSE": "",
  "IDENTITY": "",
  "STAKING": "",
  "TREASURY": "",
  "GAME_TOKEN": "",
  "USDC_TOKEN": ""
};

// Testnet addresses (Sepolia)
export const TESTNET_ADDRESSES: NetworkAddresses = {
  "REGISTRY": "",
  "CONTROL": "",
  "MEMBERSHIP": "",
  "FLOW": "",
  "SIGNAL": "",
  "SENSE": "",
  "IDENTITY": "",
  "STAKING": "",
  "TREASURY": "",
  "GAME_TOKEN": "",
  "USDC_TOKEN": ""
};

// Mainnet addresses
export const MAINNET_ADDRESSES: NetworkAddresses = {
  "REGISTRY": "",
  "CONTROL": "",
  "MEMBERSHIP": "",
  "FLOW": "",
  "SIGNAL": "",
  "SENSE": "",
  "IDENTITY": "",
  "STAKING": "",
  "TREASURY": "",
  "GAME_TOKEN": "",
  "USDC_TOKEN": ""
};

// Network configuration
export const NETWORK_CONFIG = {
  1: { name: 'mainnet', addresses: MAINNET_ADDRESSES },
  11155111: { name: 'sepolia', addresses: TESTNET_ADDRESSES },
  31337: { name: 'localhost', addresses: LOCAL_ADDRESSES },
} as const;

// Helper function to get addresses for a specific network
export function getAddressesForNetwork(chainId: number): NetworkAddresses {
  const config = NETWORK_CONFIG[chainId as keyof typeof NETWORK_CONFIG];
  if (!config) {
    throw new Error(`Unsupported network: ${chainId}`);
  }
  return config.addresses;
}

// Helper function to get contract address
export function getContractAddress(
  contractName: keyof NetworkAddresses,
  chainId: number
): string {
  const addresses = getAddressesForNetwork(chainId);
  return addresses[contractName];
}
