// Auto-generated contract addresses from deployment
// Do not edit this file manually

// Contract addresses for different networks
export interface NetworkAddresses {
  REGISTRY: string;
  CONTROL: string;
  MEMBERSHIP: string;
  FLOW: string;
  SIGNAL: string;
  SENSE: string;
  IDENTITY: string;
  STAKING: string;
  TREASURY: string;
  GAME_TOKEN: string;
  USDC_TOKEN: string;
}

// Local/development addresses (hardhat network)
export const LOCAL_ADDRESSES: NetworkAddresses = {
  "REGISTRY": "0x5322471a7E37Ac2B8902cFcba84d266b37D811A0",
  "CONTROL": "0x103A3b128991781EE2c8db0454cA99d67b257923",
  "MEMBERSHIP": "0x3D63c50AD04DD5aE394CAB562b7691DD5de7CF6f",
  "FLOW": "0xB9d9e972100a1dD01cd441774b45b5821e136043",
  "SIGNAL": "0x707531c9999AaeF9232C8FEfBA31FBa4cB78d84a",
  "SENSE": "0x2538a10b7fFb1B78c890c870FC152b10be121f04",
  "IDENTITY": "0x90c84237fDdf091b1E63f369AF122EB46000bc70",
  "STAKING": "0xc0Bb1650A8eA5dDF81998f17B5319afD656f4c11",
  "TREASURY": "0xBbc18b580256A82dC0F9A86152b8B22E7C1C8005",
  "GAME_TOKEN": "0xA3307BF348ACC4bEDdd67CCA2f7F0c4349d347Db",
  "USDC_TOKEN": "0x313F922BE1649cEc058EC0f076664500c78bdc0b"
};

// Testnet addresses (Sepolia)
export const TESTNET_ADDRESSES: NetworkAddresses = {
  "REGISTRY": "",
  "CONTROL": "",
  "MEMBERSHIP": "",
  "FLOW": "",
  "SIGNAL": "",
  "SENSE": "",
  "IDENTITY": "",
  "STAKING": "",
  "TREASURY": "",
  "GAME_TOKEN": "",
  "USDC_TOKEN": ""
};

// Mainnet addresses
export const MAINNET_ADDRESSES: NetworkAddresses = {
  "REGISTRY": "",
  "CONTROL": "",
  "MEMBERSHIP": "",
  "FLOW": "",
  "SIGNAL": "",
  "SENSE": "",
  "IDENTITY": "",
  "STAKING": "",
  "TREASURY": "",
  "GAME_TOKEN": "",
  "USDC_TOKEN": ""
};

// Network configuration
export const NETWORK_CONFIG = {
  1: { name: 'mainnet', addresses: MAINNET_ADDRESSES },
  11155111: { name: 'sepolia', addresses: TESTNET_ADDRESSES },
  31337: { name: 'localhost', addresses: LOCAL_ADDRESSES },
} as const;

// Helper function to get addresses for a specific network
export function getAddressesForNetwork(chainId: number): NetworkAddresses {
  const config = NETWORK_CONFIG[chainId as keyof typeof NETWORK_CONFIG];
  if (!config) {
    throw new Error(`Unsupported network: ${chainId}`);
  }
  return config.addresses;
}

// Helper function to get contract address
export function getContractAddress(
  contractName: keyof NetworkAddresses,
  chainId: number
): string {
  const addresses = getAddressesForNetwork(chainId);
  return addresses[contractName];
}
