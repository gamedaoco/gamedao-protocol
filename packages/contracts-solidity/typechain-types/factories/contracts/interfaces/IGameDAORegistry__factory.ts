/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IGameDAORegistry,
  IGameDAORegistryInterface,
} from "../../../contracts/interfaces/IGameDAORegistry";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "moduleId",
        type: "bytes32",
      },
    ],
    name: "ModuleDisabled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "moduleId",
        type: "bytes32",
      },
    ],
    name: "ModuleEnabled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "moduleId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "moduleAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "version",
        type: "string",
      },
    ],
    name: "ModuleRegistered",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "moduleId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "oldAddress",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newAddress",
        type: "address",
      },
      {
        indexed: false,
        internalType: "string",
        name: "newVersion",
        type: "string",
      },
    ],
    name: "ModuleUpgraded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moduleId",
        type: "bytes32",
      },
    ],
    name: "disableModule",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moduleId",
        type: "bytes32",
      },
    ],
    name: "enableModule",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getAllModules",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getEnabledModules",
    outputs: [
      {
        internalType: "bytes32[]",
        name: "",
        type: "bytes32[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moduleId",
        type: "bytes32",
      },
    ],
    name: "getModule",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moduleId",
        type: "bytes32",
      },
    ],
    name: "getModuleVersion",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moduleId",
        type: "bytes32",
      },
    ],
    name: "isModuleEnabled",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "moduleAddress",
        type: "address",
      },
    ],
    name: "registerModule",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "moduleId",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "newModuleAddress",
        type: "address",
      },
    ],
    name: "upgradeModule",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class IGameDAORegistry__factory {
  static readonly abi = _abi;
  static createInterface(): IGameDAORegistryInterface {
    return new Interface(_abi) as IGameDAORegistryInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): IGameDAORegistry {
    return new Contract(address, _abi, runner) as unknown as IGameDAORegistry;
  }
}
