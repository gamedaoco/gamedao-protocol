/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export interface IGameTokenInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addSlasher"
      | "allowance"
      | "approve"
      | "balanceOf"
      | "canUnstake"
      | "getAvailableBalance"
      | "getStakedAmount"
      | "getTotalStaked"
      | "getTotalStakedForPurpose"
      | "getUnstakingDelay"
      | "isSlasher"
      | "removeSlasher"
      | "setUnstakingDelay"
      | "slash"
      | "stake"
      | "stakeFor"
      | "totalSupply"
      | "transfer"
      | "transferFrom"
      | "unstake"
      | "unstakeAll"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Approval"
      | "StakeSlashed"
      | "Staked"
      | "Transfer"
      | "Unstaked"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addSlasher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "canUnstake",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAvailableBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getStakedAmount",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStaked",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTotalStakedForPurpose",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getUnstakingDelay",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isSlasher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeSlasher",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setUnstakingDelay",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "slash",
    values: [AddressLike, BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "stake",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeFor",
    values: [AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unstakeAll",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addSlasher", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canUnstake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAvailableBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStakedAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTotalStakedForPurpose",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUnstakingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isSlasher", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeSlasher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnstakingDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "slash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "stakeFor", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unstakeAll", data: BytesLike): Result;
}

export namespace ApprovalEvent {
  export type InputTuple = [
    owner: AddressLike,
    spender: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, spender: string, value: bigint];
  export interface OutputObject {
    owner: string;
    spender: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeSlashedEvent {
  export type InputTuple = [
    user: AddressLike,
    purpose: BytesLike,
    amount: BigNumberish,
    slasher: AddressLike,
    reason: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    purpose: string,
    amount: bigint,
    slasher: string,
    reason: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    purpose: string;
    amount: bigint;
    slasher: string;
    reason: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakedEvent {
  export type InputTuple = [
    user: AddressLike,
    purpose: BytesLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    purpose: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    purpose: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TransferEvent {
  export type InputTuple = [
    from: AddressLike,
    to: AddressLike,
    value: BigNumberish
  ];
  export type OutputTuple = [from: string, to: string, value: bigint];
  export interface OutputObject {
    from: string;
    to: string;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnstakedEvent {
  export type InputTuple = [
    user: AddressLike,
    purpose: BytesLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    user: string,
    purpose: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    user: string;
    purpose: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IGameToken extends BaseContract {
  contractName: "IGameToken";

  connect(runner?: ContractRunner | null): IGameToken;
  waitForDeployment(): Promise<this>;

  interface: IGameTokenInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addSlasher: TypedContractMethod<[slasher: AddressLike], [void], "nonpayable">;

  allowance: TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;

  approve: TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  balanceOf: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  canUnstake: TypedContractMethod<
    [user: AddressLike, purpose: BytesLike, amount: BigNumberish],
    [boolean],
    "view"
  >;

  getAvailableBalance: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  getStakedAmount: TypedContractMethod<
    [user: AddressLike, purpose: BytesLike],
    [bigint],
    "view"
  >;

  getTotalStaked: TypedContractMethod<[user: AddressLike], [bigint], "view">;

  getTotalStakedForPurpose: TypedContractMethod<
    [purpose: BytesLike],
    [bigint],
    "view"
  >;

  getUnstakingDelay: TypedContractMethod<
    [purpose: BytesLike],
    [bigint],
    "view"
  >;

  isSlasher: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  removeSlasher: TypedContractMethod<
    [slasher: AddressLike],
    [void],
    "nonpayable"
  >;

  setUnstakingDelay: TypedContractMethod<
    [purpose: BytesLike, delay: BigNumberish],
    [void],
    "nonpayable"
  >;

  slash: TypedContractMethod<
    [
      user: AddressLike,
      purpose: BytesLike,
      amount: BigNumberish,
      reason: string
    ],
    [void],
    "nonpayable"
  >;

  stake: TypedContractMethod<
    [purpose: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  stakeFor: TypedContractMethod<
    [user: AddressLike, purpose: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  totalSupply: TypedContractMethod<[], [bigint], "view">;

  transfer: TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  transferFrom: TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  unstake: TypedContractMethod<
    [purpose: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  unstakeAll: TypedContractMethod<[purpose: BytesLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addSlasher"
  ): TypedContractMethod<[slasher: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "allowance"
  ): TypedContractMethod<
    [owner: AddressLike, spender: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "approve"
  ): TypedContractMethod<
    [spender: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "balanceOf"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "canUnstake"
  ): TypedContractMethod<
    [user: AddressLike, purpose: BytesLike, amount: BigNumberish],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAvailableBalance"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStakedAmount"
  ): TypedContractMethod<
    [user: AddressLike, purpose: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTotalStaked"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTotalStakedForPurpose"
  ): TypedContractMethod<[purpose: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getUnstakingDelay"
  ): TypedContractMethod<[purpose: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isSlasher"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeSlasher"
  ): TypedContractMethod<[slasher: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setUnstakingDelay"
  ): TypedContractMethod<
    [purpose: BytesLike, delay: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "slash"
  ): TypedContractMethod<
    [
      user: AddressLike,
      purpose: BytesLike,
      amount: BigNumberish,
      reason: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stake"
  ): TypedContractMethod<
    [purpose: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "stakeFor"
  ): TypedContractMethod<
    [user: AddressLike, purpose: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "totalSupply"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "transfer"
  ): TypedContractMethod<
    [to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferFrom"
  ): TypedContractMethod<
    [from: AddressLike, to: AddressLike, amount: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unstake"
  ): TypedContractMethod<
    [purpose: BytesLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "unstakeAll"
  ): TypedContractMethod<[purpose: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "Approval"
  ): TypedContractEvent<
    ApprovalEvent.InputTuple,
    ApprovalEvent.OutputTuple,
    ApprovalEvent.OutputObject
  >;
  getEvent(
    key: "StakeSlashed"
  ): TypedContractEvent<
    StakeSlashedEvent.InputTuple,
    StakeSlashedEvent.OutputTuple,
    StakeSlashedEvent.OutputObject
  >;
  getEvent(
    key: "Staked"
  ): TypedContractEvent<
    StakedEvent.InputTuple,
    StakedEvent.OutputTuple,
    StakedEvent.OutputObject
  >;
  getEvent(
    key: "Transfer"
  ): TypedContractEvent<
    TransferEvent.InputTuple,
    TransferEvent.OutputTuple,
    TransferEvent.OutputObject
  >;
  getEvent(
    key: "Unstaked"
  ): TypedContractEvent<
    UnstakedEvent.InputTuple,
    UnstakedEvent.OutputTuple,
    UnstakedEvent.OutputObject
  >;

  filters: {
    "Approval(address,address,uint256)": TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;
    Approval: TypedContractEvent<
      ApprovalEvent.InputTuple,
      ApprovalEvent.OutputTuple,
      ApprovalEvent.OutputObject
    >;

    "StakeSlashed(address,bytes32,uint256,address,string,uint256)": TypedContractEvent<
      StakeSlashedEvent.InputTuple,
      StakeSlashedEvent.OutputTuple,
      StakeSlashedEvent.OutputObject
    >;
    StakeSlashed: TypedContractEvent<
      StakeSlashedEvent.InputTuple,
      StakeSlashedEvent.OutputTuple,
      StakeSlashedEvent.OutputObject
    >;

    "Staked(address,bytes32,uint256,uint256)": TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;
    Staked: TypedContractEvent<
      StakedEvent.InputTuple,
      StakedEvent.OutputTuple,
      StakedEvent.OutputObject
    >;

    "Transfer(address,address,uint256)": TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;
    Transfer: TypedContractEvent<
      TransferEvent.InputTuple,
      TransferEvent.OutputTuple,
      TransferEvent.OutputObject
    >;

    "Unstaked(address,bytes32,uint256,uint256)": TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
    Unstaked: TypedContractEvent<
      UnstakedEvent.InputTuple,
      UnstakedEvent.OutputTuple,
      UnstakedEvent.OutputObject
    >;
  };
}
