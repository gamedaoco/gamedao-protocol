/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IControl {
  export type OrganizationStruct = {
    id: BytesLike;
    name: string;
    metadataURI: string;
    creator: AddressLike;
    treasury: AddressLike;
    orgType: BigNumberish;
    accessModel: BigNumberish;
    feeModel: BigNumberish;
    memberLimit: BigNumberish;
    memberCount: BigNumberish;
    totalCampaigns: BigNumberish;
    totalProposals: BigNumberish;
    membershipFee: BigNumberish;
    gameStakeRequired: BigNumberish;
    state: BigNumberish;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
  };

  export type OrganizationStructOutput = [
    id: string,
    name: string,
    metadataURI: string,
    creator: string,
    treasury: string,
    orgType: bigint,
    accessModel: bigint,
    feeModel: bigint,
    memberLimit: bigint,
    memberCount: bigint,
    totalCampaigns: bigint,
    totalProposals: bigint,
    membershipFee: bigint,
    gameStakeRequired: bigint,
    state: bigint,
    createdAt: bigint,
    updatedAt: bigint
  ] & {
    id: string;
    name: string;
    metadataURI: string;
    creator: string;
    treasury: string;
    orgType: bigint;
    accessModel: bigint;
    feeModel: bigint;
    memberLimit: bigint;
    memberCount: bigint;
    totalCampaigns: bigint;
    totalProposals: bigint;
    membershipFee: bigint;
    gameStakeRequired: bigint;
    state: bigint;
    createdAt: bigint;
    updatedAt: bigint;
  };

  export type MemberStruct = {
    account: AddressLike;
    state: BigNumberish;
    joinedAt: BigNumberish;
    reputation: BigNumberish;
    stake: BigNumberish;
  };

  export type MemberStructOutput = [
    account: string,
    state: bigint,
    joinedAt: bigint,
    reputation: bigint,
    stake: bigint
  ] & {
    account: string;
    state: bigint;
    joinedAt: bigint;
    reputation: bigint;
    stake: bigint;
  };
}

export interface IControlInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addMember"
      | "createOrganization"
      | "getAllOrganizations"
      | "getMember"
      | "getMemberCount"
      | "getMembers"
      | "getOrganization"
      | "getOrganizationCount"
      | "getOrganizationsByState"
      | "isMember"
      | "isMemberActive"
      | "isOrganizationActive"
      | "removeMember"
      | "updateMemberState"
      | "updateOrganizationState"
      | "withdrawStake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "MemberAdded"
      | "MemberRemoved"
      | "MemberStateChanged"
      | "OrganizationCreated"
      | "OrganizationStateChanged"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addMember",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrganization",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllOrganizations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMember",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMemberCount",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getMembers",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganization",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizationsByState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isMember",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isMemberActive",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOrganizationActive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeMember",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMemberState",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrganizationState",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "addMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllOrganizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getMembers", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizationsByState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMember", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isMemberActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOrganizationActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMemberState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOrganizationState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
}

export namespace MemberAddedEvent {
  export type InputTuple = [
    organizationId: BytesLike,
    member: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    organizationId: string,
    member: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    organizationId: string;
    member: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberRemovedEvent {
  export type InputTuple = [
    organizationId: BytesLike,
    member: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    organizationId: string,
    member: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    organizationId: string;
    member: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MemberStateChangedEvent {
  export type InputTuple = [
    organizationId: BytesLike,
    member: AddressLike,
    oldState: BigNumberish,
    newState: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    organizationId: string,
    member: string,
    oldState: bigint,
    newState: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    organizationId: string;
    member: string;
    oldState: bigint;
    newState: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizationCreatedEvent {
  export type InputTuple = [
    id: BytesLike,
    name: string,
    creator: AddressLike,
    treasury: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    name: string,
    creator: string,
    treasury: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    id: string;
    name: string;
    creator: string;
    treasury: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizationStateChangedEvent {
  export type InputTuple = [
    id: BytesLike,
    oldState: BigNumberish,
    newState: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    oldState: bigint,
    newState: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    id: string;
    oldState: bigint;
    newState: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IControl extends BaseContract {
  contractName: "IControl";

  connect(runner?: ContractRunner | null): IControl;
  waitForDeployment(): Promise<this>;

  interface: IControlInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addMember: TypedContractMethod<
    [organizationId: BytesLike, member: AddressLike],
    [void],
    "nonpayable"
  >;

  createOrganization: TypedContractMethod<
    [
      name: string,
      metadataURI: string,
      orgType: BigNumberish,
      accessModel: BigNumberish,
      feeModel: BigNumberish,
      memberLimit: BigNumberish,
      membershipFee: BigNumberish,
      gameStakeRequired: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  getAllOrganizations: TypedContractMethod<
    [],
    [IControl.OrganizationStructOutput[]],
    "view"
  >;

  getMember: TypedContractMethod<
    [organizationId: BytesLike, member: AddressLike],
    [IControl.MemberStructOutput],
    "view"
  >;

  getMemberCount: TypedContractMethod<
    [organizationId: BytesLike],
    [bigint],
    "view"
  >;

  getMembers: TypedContractMethod<
    [organizationId: BytesLike],
    [string[]],
    "view"
  >;

  getOrganization: TypedContractMethod<
    [id: BytesLike],
    [IControl.OrganizationStructOutput],
    "view"
  >;

  getOrganizationCount: TypedContractMethod<[], [bigint], "view">;

  getOrganizationsByState: TypedContractMethod<
    [state: BigNumberish],
    [IControl.OrganizationStructOutput[]],
    "view"
  >;

  isMember: TypedContractMethod<
    [organizationId: BytesLike, member: AddressLike],
    [boolean],
    "view"
  >;

  isMemberActive: TypedContractMethod<
    [organizationId: BytesLike, member: AddressLike],
    [boolean],
    "view"
  >;

  isOrganizationActive: TypedContractMethod<
    [organizationId: BytesLike],
    [boolean],
    "view"
  >;

  removeMember: TypedContractMethod<
    [organizationId: BytesLike, member: AddressLike],
    [void],
    "nonpayable"
  >;

  updateMemberState: TypedContractMethod<
    [organizationId: BytesLike, member: AddressLike, state: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateOrganizationState: TypedContractMethod<
    [organizationId: BytesLike, state: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawStake: TypedContractMethod<
    [organizationId: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addMember"
  ): TypedContractMethod<
    [organizationId: BytesLike, member: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createOrganization"
  ): TypedContractMethod<
    [
      name: string,
      metadataURI: string,
      orgType: BigNumberish,
      accessModel: BigNumberish,
      feeModel: BigNumberish,
      memberLimit: BigNumberish,
      membershipFee: BigNumberish,
      gameStakeRequired: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllOrganizations"
  ): TypedContractMethod<[], [IControl.OrganizationStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getMember"
  ): TypedContractMethod<
    [organizationId: BytesLike, member: AddressLike],
    [IControl.MemberStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getMemberCount"
  ): TypedContractMethod<[organizationId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMembers"
  ): TypedContractMethod<[organizationId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getOrganization"
  ): TypedContractMethod<
    [id: BytesLike],
    [IControl.OrganizationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrganizationCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOrganizationsByState"
  ): TypedContractMethod<
    [state: BigNumberish],
    [IControl.OrganizationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isMember"
  ): TypedContractMethod<
    [organizationId: BytesLike, member: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isMemberActive"
  ): TypedContractMethod<
    [organizationId: BytesLike, member: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isOrganizationActive"
  ): TypedContractMethod<[organizationId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "removeMember"
  ): TypedContractMethod<
    [organizationId: BytesLike, member: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateMemberState"
  ): TypedContractMethod<
    [organizationId: BytesLike, member: AddressLike, state: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateOrganizationState"
  ): TypedContractMethod<
    [organizationId: BytesLike, state: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawStake"
  ): TypedContractMethod<[organizationId: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "MemberAdded"
  ): TypedContractEvent<
    MemberAddedEvent.InputTuple,
    MemberAddedEvent.OutputTuple,
    MemberAddedEvent.OutputObject
  >;
  getEvent(
    key: "MemberRemoved"
  ): TypedContractEvent<
    MemberRemovedEvent.InputTuple,
    MemberRemovedEvent.OutputTuple,
    MemberRemovedEvent.OutputObject
  >;
  getEvent(
    key: "MemberStateChanged"
  ): TypedContractEvent<
    MemberStateChangedEvent.InputTuple,
    MemberStateChangedEvent.OutputTuple,
    MemberStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "OrganizationCreated"
  ): TypedContractEvent<
    OrganizationCreatedEvent.InputTuple,
    OrganizationCreatedEvent.OutputTuple,
    OrganizationCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OrganizationStateChanged"
  ): TypedContractEvent<
    OrganizationStateChangedEvent.InputTuple,
    OrganizationStateChangedEvent.OutputTuple,
    OrganizationStateChangedEvent.OutputObject
  >;

  filters: {
    "MemberAdded(bytes8,address,uint256)": TypedContractEvent<
      MemberAddedEvent.InputTuple,
      MemberAddedEvent.OutputTuple,
      MemberAddedEvent.OutputObject
    >;
    MemberAdded: TypedContractEvent<
      MemberAddedEvent.InputTuple,
      MemberAddedEvent.OutputTuple,
      MemberAddedEvent.OutputObject
    >;

    "MemberRemoved(bytes8,address,uint256)": TypedContractEvent<
      MemberRemovedEvent.InputTuple,
      MemberRemovedEvent.OutputTuple,
      MemberRemovedEvent.OutputObject
    >;
    MemberRemoved: TypedContractEvent<
      MemberRemovedEvent.InputTuple,
      MemberRemovedEvent.OutputTuple,
      MemberRemovedEvent.OutputObject
    >;

    "MemberStateChanged(bytes8,address,uint8,uint8,uint256)": TypedContractEvent<
      MemberStateChangedEvent.InputTuple,
      MemberStateChangedEvent.OutputTuple,
      MemberStateChangedEvent.OutputObject
    >;
    MemberStateChanged: TypedContractEvent<
      MemberStateChangedEvent.InputTuple,
      MemberStateChangedEvent.OutputTuple,
      MemberStateChangedEvent.OutputObject
    >;

    "OrganizationCreated(bytes8,string,address,address,uint256)": TypedContractEvent<
      OrganizationCreatedEvent.InputTuple,
      OrganizationCreatedEvent.OutputTuple,
      OrganizationCreatedEvent.OutputObject
    >;
    OrganizationCreated: TypedContractEvent<
      OrganizationCreatedEvent.InputTuple,
      OrganizationCreatedEvent.OutputTuple,
      OrganizationCreatedEvent.OutputObject
    >;

    "OrganizationStateChanged(bytes8,uint8,uint8,uint256)": TypedContractEvent<
      OrganizationStateChangedEvent.InputTuple,
      OrganizationStateChangedEvent.OutputTuple,
      OrganizationStateChangedEvent.OutputObject
    >;
    OrganizationStateChanged: TypedContractEvent<
      OrganizationStateChangedEvent.InputTuple,
      OrganizationStateChangedEvent.OutputTuple,
      OrganizationStateChangedEvent.OutputObject
    >;
  };
}
