/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IFlow {
  export type CampaignParamsStruct = {
    title: string;
    description: string;
    metadataURI: string;
    flowType: BigNumberish;
    paymentToken: AddressLike;
    target: BigNumberish;
    min: BigNumberish;
    max: BigNumberish;
    duration: BigNumberish;
    autoFinalize: boolean;
  };

  export type CampaignParamsStructOutput = [
    title: string,
    description: string,
    metadataURI: string,
    flowType: bigint,
    paymentToken: string,
    target: bigint,
    min: bigint,
    max: bigint,
    duration: bigint,
    autoFinalize: boolean
  ] & {
    title: string;
    description: string;
    metadataURI: string;
    flowType: bigint;
    paymentToken: string;
    target: bigint;
    min: bigint;
    max: bigint;
    duration: bigint;
    autoFinalize: boolean;
  };

  export type CampaignStruct = {
    index: BigNumberish;
    organizationId: BytesLike;
    creator: AddressLike;
    admin: AddressLike;
    title: string;
    description: string;
    metadataURI: string;
    flowType: BigNumberish;
    state: BigNumberish;
    paymentToken: AddressLike;
    target: BigNumberish;
    min: BigNumberish;
    max: BigNumberish;
    raised: BigNumberish;
    contributorCount: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
    autoFinalize: boolean;
    protocolFee: BigNumberish;
  };

  export type CampaignStructOutput = [
    index: bigint,
    organizationId: string,
    creator: string,
    admin: string,
    title: string,
    description: string,
    metadataURI: string,
    flowType: bigint,
    state: bigint,
    paymentToken: string,
    target: bigint,
    min: bigint,
    max: bigint,
    raised: bigint,
    contributorCount: bigint,
    startTime: bigint,
    endTime: bigint,
    createdAt: bigint,
    updatedAt: bigint,
    autoFinalize: boolean,
    protocolFee: bigint
  ] & {
    index: bigint;
    organizationId: string;
    creator: string;
    admin: string;
    title: string;
    description: string;
    metadataURI: string;
    flowType: bigint;
    state: bigint;
    paymentToken: string;
    target: bigint;
    min: bigint;
    max: bigint;
    raised: bigint;
    contributorCount: bigint;
    startTime: bigint;
    endTime: bigint;
    createdAt: bigint;
    updatedAt: bigint;
    autoFinalize: boolean;
    protocolFee: bigint;
  };

  export type ContributionStruct = {
    contributor: AddressLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
    state: BigNumberish;
    metadata: string;
  };

  export type ContributionStructOutput = [
    contributor: string,
    amount: bigint,
    timestamp: bigint,
    state: bigint,
    metadata: string
  ] & {
    contributor: string;
    amount: bigint;
    timestamp: bigint;
    state: bigint;
    metadata: string;
  };
}

export interface IFlowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "calculateProtocolFee"
      | "canContribute"
      | "claimRewards"
      | "contribute"
      | "createCampaign"
      | "createCampaignWithParams"
      | "distributeRewards"
      | "finalizeCampaign"
      | "getCampaign"
      | "getCampaignContributors"
      | "getCampaignCount"
      | "getCampaignProgress"
      | "getCampaignsByOrganization"
      | "getCampaignsByState"
      | "getContribution"
      | "getProtocolFeeRate"
      | "getRewardDistribution"
      | "getTimeRemaining"
      | "isCampaignActive"
      | "refundContribution"
      | "setCampaignState"
      | "updateCampaign"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignCreated"
      | "CampaignFinalized"
      | "CampaignStateChanged"
      | "CampaignUpdated"
      | "ContributionMade"
      | "ContributionRefunded"
      | "ProtocolFeeCollected"
      | "RewardsDistributed"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "calculateProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canContribute",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [
      BytesLike,
      string,
      string,
      string,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaignWithParams",
    values: [AddressLike, BytesLike, IFlow.CampaignParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeCampaign",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaign",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignContributors",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignProgress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignsByOrganization",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignsByState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContribution",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardDistribution",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeRemaining",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCampaignActive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "refundContribution",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCampaignState",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateCampaign",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "calculateProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canContribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCampaignWithParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignsByOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignsByState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isCampaignActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "refundContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setCampaignState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    campaignId: BytesLike,
    organizationId: BytesLike,
    creator: AddressLike,
    title: string,
    flowType: BigNumberish,
    target: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: string,
    organizationId: string,
    creator: string,
    title: string,
    flowType: bigint,
    target: bigint,
    startTime: bigint,
    endTime: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    campaignId: string;
    organizationId: string;
    creator: string;
    title: string;
    flowType: bigint;
    target: bigint;
    startTime: bigint;
    endTime: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignFinalizedEvent {
  export type InputTuple = [
    campaignId: BytesLike,
    finalState: BigNumberish,
    totalRaised: BigNumberish,
    contributorCount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: string,
    finalState: bigint,
    totalRaised: bigint,
    contributorCount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    campaignId: string;
    finalState: bigint;
    totalRaised: bigint;
    contributorCount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignStateChangedEvent {
  export type InputTuple = [
    campaignId: BytesLike,
    oldState: BigNumberish,
    newState: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: string,
    oldState: bigint,
    newState: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    campaignId: string;
    oldState: bigint;
    newState: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignUpdatedEvent {
  export type InputTuple = [
    campaignId: BytesLike,
    title: string,
    description: string,
    target: BigNumberish,
    min: BigNumberish,
    max: BigNumberish,
    endTime: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: string,
    title: string,
    description: string,
    target: bigint,
    min: bigint,
    max: bigint,
    endTime: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    campaignId: string;
    title: string;
    description: string;
    target: bigint;
    min: bigint;
    max: bigint;
    endTime: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContributionMadeEvent {
  export type InputTuple = [
    campaignId: BytesLike,
    contributor: AddressLike,
    amount: BigNumberish,
    totalRaised: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: string,
    contributor: string,
    amount: bigint,
    totalRaised: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    campaignId: string;
    contributor: string;
    amount: bigint;
    totalRaised: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContributionRefundedEvent {
  export type InputTuple = [
    campaignId: BytesLike,
    contributor: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: string,
    contributor: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    campaignId: string;
    contributor: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolFeeCollectedEvent {
  export type InputTuple = [
    campaignId: BytesLike,
    token: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: string,
    token: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    campaignId: string;
    token: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDistributedEvent {
  export type InputTuple = [
    campaignId: BytesLike,
    token: AddressLike,
    totalAmount: BigNumberish,
    contributorCount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: string,
    token: string,
    totalAmount: bigint,
    contributorCount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    campaignId: string;
    token: string;
    totalAmount: bigint;
    contributorCount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IFlow extends BaseContract {
  contractName: "IFlow";

  connect(runner?: ContractRunner | null): IFlow;
  waitForDeployment(): Promise<this>;

  interface: IFlowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  calculateProtocolFee: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "view"
  >;

  canContribute: TypedContractMethod<
    [campaignId: BytesLike, contributor: AddressLike],
    [boolean],
    "view"
  >;

  claimRewards: TypedContractMethod<
    [campaignId: BytesLike, rewardToken: AddressLike],
    [void],
    "nonpayable"
  >;

  contribute: TypedContractMethod<
    [campaignId: BytesLike, amount: BigNumberish, metadata: string],
    [void],
    "payable"
  >;

  createCampaign: TypedContractMethod<
    [
      organizationId: BytesLike,
      title: string,
      description: string,
      metadataURI: string,
      flowType: BigNumberish,
      paymentToken: AddressLike,
      target: BigNumberish,
      min: BigNumberish,
      max: BigNumberish,
      duration: BigNumberish,
      autoFinalize: boolean
    ],
    [string],
    "nonpayable"
  >;

  createCampaignWithParams: TypedContractMethod<
    [
      creator: AddressLike,
      organizationId: BytesLike,
      params: IFlow.CampaignParamsStruct
    ],
    [string],
    "nonpayable"
  >;

  distributeRewards: TypedContractMethod<
    [
      campaignId: BytesLike,
      rewardToken: AddressLike,
      totalRewardAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  finalizeCampaign: TypedContractMethod<
    [campaignId: BytesLike],
    [void],
    "nonpayable"
  >;

  getCampaign: TypedContractMethod<
    [campaignId: BytesLike],
    [IFlow.CampaignStructOutput],
    "view"
  >;

  getCampaignContributors: TypedContractMethod<
    [campaignId: BytesLike],
    [string[]],
    "view"
  >;

  getCampaignCount: TypedContractMethod<[], [bigint], "view">;

  getCampaignProgress: TypedContractMethod<
    [campaignId: BytesLike],
    [
      [bigint, bigint, bigint] & {
        raised: bigint;
        target: bigint;
        percentage: bigint;
      }
    ],
    "view"
  >;

  getCampaignsByOrganization: TypedContractMethod<
    [organizationId: BytesLike],
    [string[]],
    "view"
  >;

  getCampaignsByState: TypedContractMethod<
    [state: BigNumberish],
    [string[]],
    "view"
  >;

  getContribution: TypedContractMethod<
    [campaignId: BytesLike, contributor: AddressLike],
    [IFlow.ContributionStructOutput],
    "view"
  >;

  getProtocolFeeRate: TypedContractMethod<[], [bigint], "view">;

  getRewardDistribution: TypedContractMethod<
    [campaignId: BytesLike, rewardToken: AddressLike, contributor: AddressLike],
    [
      [bigint, bigint, bigint] & {
        totalReward: bigint;
        claimedAmount: bigint;
        claimableAmount: bigint;
      }
    ],
    "view"
  >;

  getTimeRemaining: TypedContractMethod<
    [campaignId: BytesLike],
    [bigint],
    "view"
  >;

  isCampaignActive: TypedContractMethod<
    [campaignId: BytesLike],
    [boolean],
    "view"
  >;

  refundContribution: TypedContractMethod<
    [campaignId: BytesLike, contributor: AddressLike],
    [void],
    "nonpayable"
  >;

  setCampaignState: TypedContractMethod<
    [campaignId: BytesLike, newState: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateCampaign: TypedContractMethod<
    [
      campaignId: BytesLike,
      title: string,
      description: string,
      target: BigNumberish,
      min: BigNumberish,
      max: BigNumberish,
      endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  withdrawFunds: TypedContractMethod<
    [campaignId: BytesLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "calculateProtocolFee"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "canContribute"
  ): TypedContractMethod<
    [campaignId: BytesLike, contributor: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<
    [campaignId: BytesLike, rewardToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "contribute"
  ): TypedContractMethod<
    [campaignId: BytesLike, amount: BigNumberish, metadata: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      organizationId: BytesLike,
      title: string,
      description: string,
      metadataURI: string,
      flowType: BigNumberish,
      paymentToken: AddressLike,
      target: BigNumberish,
      min: BigNumberish,
      max: BigNumberish,
      duration: BigNumberish,
      autoFinalize: boolean
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createCampaignWithParams"
  ): TypedContractMethod<
    [
      creator: AddressLike,
      organizationId: BytesLike,
      params: IFlow.CampaignParamsStruct
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributeRewards"
  ): TypedContractMethod<
    [
      campaignId: BytesLike,
      rewardToken: AddressLike,
      totalRewardAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalizeCampaign"
  ): TypedContractMethod<[campaignId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCampaign"
  ): TypedContractMethod<
    [campaignId: BytesLike],
    [IFlow.CampaignStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCampaignContributors"
  ): TypedContractMethod<[campaignId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCampaignCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCampaignProgress"
  ): TypedContractMethod<
    [campaignId: BytesLike],
    [
      [bigint, bigint, bigint] & {
        raised: bigint;
        target: bigint;
        percentage: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCampaignsByOrganization"
  ): TypedContractMethod<[organizationId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCampaignsByState"
  ): TypedContractMethod<[state: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getContribution"
  ): TypedContractMethod<
    [campaignId: BytesLike, contributor: AddressLike],
    [IFlow.ContributionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProtocolFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardDistribution"
  ): TypedContractMethod<
    [campaignId: BytesLike, rewardToken: AddressLike, contributor: AddressLike],
    [
      [bigint, bigint, bigint] & {
        totalReward: bigint;
        claimedAmount: bigint;
        claimableAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTimeRemaining"
  ): TypedContractMethod<[campaignId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isCampaignActive"
  ): TypedContractMethod<[campaignId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "refundContribution"
  ): TypedContractMethod<
    [campaignId: BytesLike, contributor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCampaignState"
  ): TypedContractMethod<
    [campaignId: BytesLike, newState: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateCampaign"
  ): TypedContractMethod<
    [
      campaignId: BytesLike,
      title: string,
      description: string,
      target: BigNumberish,
      min: BigNumberish,
      max: BigNumberish,
      endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<
    [campaignId: BytesLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignFinalized"
  ): TypedContractEvent<
    CampaignFinalizedEvent.InputTuple,
    CampaignFinalizedEvent.OutputTuple,
    CampaignFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignStateChanged"
  ): TypedContractEvent<
    CampaignStateChangedEvent.InputTuple,
    CampaignStateChangedEvent.OutputTuple,
    CampaignStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignUpdated"
  ): TypedContractEvent<
    CampaignUpdatedEvent.InputTuple,
    CampaignUpdatedEvent.OutputTuple,
    CampaignUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ContributionMade"
  ): TypedContractEvent<
    ContributionMadeEvent.InputTuple,
    ContributionMadeEvent.OutputTuple,
    ContributionMadeEvent.OutputObject
  >;
  getEvent(
    key: "ContributionRefunded"
  ): TypedContractEvent<
    ContributionRefundedEvent.InputTuple,
    ContributionRefundedEvent.OutputTuple,
    ContributionRefundedEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolFeeCollected"
  ): TypedContractEvent<
    ProtocolFeeCollectedEvent.InputTuple,
    ProtocolFeeCollectedEvent.OutputTuple,
    ProtocolFeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDistributed"
  ): TypedContractEvent<
    RewardsDistributedEvent.InputTuple,
    RewardsDistributedEvent.OutputTuple,
    RewardsDistributedEvent.OutputObject
  >;

  filters: {
    "CampaignCreated(bytes32,bytes32,address,string,uint8,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "CampaignFinalized(bytes32,uint8,uint256,uint256,uint256)": TypedContractEvent<
      CampaignFinalizedEvent.InputTuple,
      CampaignFinalizedEvent.OutputTuple,
      CampaignFinalizedEvent.OutputObject
    >;
    CampaignFinalized: TypedContractEvent<
      CampaignFinalizedEvent.InputTuple,
      CampaignFinalizedEvent.OutputTuple,
      CampaignFinalizedEvent.OutputObject
    >;

    "CampaignStateChanged(bytes32,uint8,uint8,uint256)": TypedContractEvent<
      CampaignStateChangedEvent.InputTuple,
      CampaignStateChangedEvent.OutputTuple,
      CampaignStateChangedEvent.OutputObject
    >;
    CampaignStateChanged: TypedContractEvent<
      CampaignStateChangedEvent.InputTuple,
      CampaignStateChangedEvent.OutputTuple,
      CampaignStateChangedEvent.OutputObject
    >;

    "CampaignUpdated(bytes32,string,string,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CampaignUpdatedEvent.InputTuple,
      CampaignUpdatedEvent.OutputTuple,
      CampaignUpdatedEvent.OutputObject
    >;
    CampaignUpdated: TypedContractEvent<
      CampaignUpdatedEvent.InputTuple,
      CampaignUpdatedEvent.OutputTuple,
      CampaignUpdatedEvent.OutputObject
    >;

    "ContributionMade(bytes32,address,uint256,uint256,uint256)": TypedContractEvent<
      ContributionMadeEvent.InputTuple,
      ContributionMadeEvent.OutputTuple,
      ContributionMadeEvent.OutputObject
    >;
    ContributionMade: TypedContractEvent<
      ContributionMadeEvent.InputTuple,
      ContributionMadeEvent.OutputTuple,
      ContributionMadeEvent.OutputObject
    >;

    "ContributionRefunded(bytes32,address,uint256,uint256)": TypedContractEvent<
      ContributionRefundedEvent.InputTuple,
      ContributionRefundedEvent.OutputTuple,
      ContributionRefundedEvent.OutputObject
    >;
    ContributionRefunded: TypedContractEvent<
      ContributionRefundedEvent.InputTuple,
      ContributionRefundedEvent.OutputTuple,
      ContributionRefundedEvent.OutputObject
    >;

    "ProtocolFeeCollected(bytes32,address,uint256,uint256)": TypedContractEvent<
      ProtocolFeeCollectedEvent.InputTuple,
      ProtocolFeeCollectedEvent.OutputTuple,
      ProtocolFeeCollectedEvent.OutputObject
    >;
    ProtocolFeeCollected: TypedContractEvent<
      ProtocolFeeCollectedEvent.InputTuple,
      ProtocolFeeCollectedEvent.OutputTuple,
      ProtocolFeeCollectedEvent.OutputObject
    >;

    "RewardsDistributed(bytes32,address,uint256,uint256,uint256)": TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
    RewardsDistributed: TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
  };
}
