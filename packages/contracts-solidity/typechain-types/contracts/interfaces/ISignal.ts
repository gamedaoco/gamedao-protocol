/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ISignal {
  export type VotingParametersStruct = {
    votingDelay: BigNumberish;
    votingPeriod: BigNumberish;
    executionDelay: BigNumberish;
    quorumThreshold: BigNumberish;
    proposalThreshold: BigNumberish;
    requireMembership: boolean;
  };

  export type VotingParametersStructOutput = [
    votingDelay: bigint,
    votingPeriod: bigint,
    executionDelay: bigint,
    quorumThreshold: bigint,
    proposalThreshold: bigint,
    requireMembership: boolean
  ] & {
    votingDelay: bigint;
    votingPeriod: bigint;
    executionDelay: bigint;
    quorumThreshold: bigint;
    proposalThreshold: bigint;
    requireMembership: boolean;
  };

  export type DelegationStruct = {
    delegatee: AddressLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
    active: boolean;
  };

  export type DelegationStructOutput = [
    delegatee: string,
    amount: bigint,
    timestamp: bigint,
    active: boolean
  ] & { delegatee: string; amount: bigint; timestamp: bigint; active: boolean };

  export type ProposalStruct = {
    hierarchicalId: string;
    organizationId: BytesLike;
    creator: AddressLike;
    title: string;
    description: string;
    metadataURI: string;
    proposalType: BigNumberish;
    votingType: BigNumberish;
    votingPower: BigNumberish;
    state: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    executionTime: BigNumberish;
    forVotes: BigNumberish;
    againstVotes: BigNumberish;
    abstainVotes: BigNumberish;
    executionData: BytesLike;
    targetContract: AddressLike;
    executor: AddressLike;
    createdAt: BigNumberish;
    executedAt: BigNumberish;
  };

  export type ProposalStructOutput = [
    hierarchicalId: string,
    organizationId: string,
    creator: string,
    title: string,
    description: string,
    metadataURI: string,
    proposalType: bigint,
    votingType: bigint,
    votingPower: bigint,
    state: bigint,
    startTime: bigint,
    endTime: bigint,
    executionTime: bigint,
    forVotes: bigint,
    againstVotes: bigint,
    abstainVotes: bigint,
    executionData: string,
    targetContract: string,
    executor: string,
    createdAt: bigint,
    executedAt: bigint
  ] & {
    hierarchicalId: string;
    organizationId: string;
    creator: string;
    title: string;
    description: string;
    metadataURI: string;
    proposalType: bigint;
    votingType: bigint;
    votingPower: bigint;
    state: bigint;
    startTime: bigint;
    endTime: bigint;
    executionTime: bigint;
    forVotes: bigint;
    againstVotes: bigint;
    abstainVotes: bigint;
    executionData: string;
    targetContract: string;
    executor: string;
    createdAt: bigint;
    executedAt: bigint;
  };

  export type VoteStruct = {
    voter: AddressLike;
    choice: BigNumberish;
    votingPower: BigNumberish;
    timestamp: BigNumberish;
    reason: string;
    hasVoted: boolean;
    convictionTime: BigNumberish;
    convictionMultiplier: BigNumberish;
  };

  export type VoteStructOutput = [
    voter: string,
    choice: bigint,
    votingPower: bigint,
    timestamp: bigint,
    reason: string,
    hasVoted: boolean,
    convictionTime: bigint,
    convictionMultiplier: bigint
  ] & {
    voter: string;
    choice: bigint;
    votingPower: bigint;
    timestamp: bigint;
    reason: string;
    hasVoted: boolean;
    convictionTime: bigint;
    convictionMultiplier: bigint;
  };
}

export interface ISignalInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "applyConvictionDecay"
      | "calculateConvictionMultiplier"
      | "calculateVotingPower"
      | "canExecute"
      | "canVote"
      | "cancelProposal"
      | "castVote"
      | "castVoteWithConviction"
      | "createProposal"
      | "delegateVotingPower"
      | "executeProposal"
      | "getDelegatedVotingPower"
      | "getDelegations"
      | "getOrganizationProposals"
      | "getProposal"
      | "getProposalsByState"
      | "getVote"
      | "getVotingParameters"
      | "getVotingPowerWithDelegation"
      | "setVotingParameters"
      | "undelegateVotingPower"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ConvictionDecayApplied"
      | "ConvictionVoteCast"
      | "ProposalCanceled"
      | "ProposalCreated"
      | "ProposalExecuted"
      | "VoteCast"
      | "VotingParametersUpdated"
      | "VotingPowerDelegated"
      | "VotingPowerUndelegated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "applyConvictionDecay",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateConvictionMultiplier",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateVotingPower",
    values: [string, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "canExecute", values: [string]): string;
  encodeFunctionData(
    functionFragment: "canVote",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "castVoteWithConviction",
    values: [string, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createProposal",
    values: [
      BytesLike,
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      AddressLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "delegateVotingPower",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegatedVotingPower",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDelegations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizationProposals",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "getProposal", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getProposalsByState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVote",
    values: [string, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingParameters",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVotingPowerWithDelegation",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setVotingParameters",
    values: [BytesLike, ISignal.VotingParametersStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "undelegateVotingPower",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "applyConvictionDecay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateConvictionMultiplier",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "canExecute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "canVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "castVoteWithConviction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "delegateVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegatedVotingPower",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDelegations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizationProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProposalsByState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getVotingParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVotingPowerWithDelegation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setVotingParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "undelegateVotingPower",
    data: BytesLike
  ): Result;
}

export namespace ConvictionDecayAppliedEvent {
  export type InputTuple = [
    hierarchicalId: string,
    voter: AddressLike,
    oldPower: BigNumberish,
    newPower: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    hierarchicalId: string,
    voter: string,
    oldPower: bigint,
    newPower: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    hierarchicalId: string;
    voter: string;
    oldPower: bigint;
    newPower: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ConvictionVoteCastEvent {
  export type InputTuple = [
    hierarchicalId: string,
    voter: AddressLike,
    choice: BigNumberish,
    votingPower: BigNumberish,
    convictionMultiplier: BigNumberish,
    convictionTime: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    hierarchicalId: string,
    voter: string,
    choice: bigint,
    votingPower: bigint,
    convictionMultiplier: bigint,
    convictionTime: bigint,
    reason: string
  ];
  export interface OutputObject {
    hierarchicalId: string;
    voter: string;
    choice: bigint;
    votingPower: bigint;
    convictionMultiplier: bigint;
    convictionTime: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCanceledEvent {
  export type InputTuple = [
    hierarchicalId: string,
    canceler: AddressLike,
    reason: string
  ];
  export type OutputTuple = [
    hierarchicalId: string,
    canceler: string,
    reason: string
  ];
  export interface OutputObject {
    hierarchicalId: string;
    canceler: string;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalCreatedEvent {
  export type InputTuple = [
    hierarchicalId: string,
    organizationId: BytesLike,
    creator: AddressLike,
    title: string,
    proposalType: BigNumberish,
    votingType: BigNumberish,
    votingPeriod: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish
  ];
  export type OutputTuple = [
    hierarchicalId: string,
    organizationId: string,
    creator: string,
    title: string,
    proposalType: bigint,
    votingType: bigint,
    votingPeriod: bigint,
    startTime: bigint,
    endTime: bigint
  ];
  export interface OutputObject {
    hierarchicalId: string;
    organizationId: string;
    creator: string;
    title: string;
    proposalType: bigint;
    votingType: bigint;
    votingPeriod: bigint;
    startTime: bigint;
    endTime: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProposalExecutedEvent {
  export type InputTuple = [
    hierarchicalId: string,
    executor: AddressLike,
    success: boolean,
    returnData: BytesLike
  ];
  export type OutputTuple = [
    hierarchicalId: string,
    executor: string,
    success: boolean,
    returnData: string
  ];
  export interface OutputObject {
    hierarchicalId: string;
    executor: string;
    success: boolean;
    returnData: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [
    hierarchicalId: string,
    voter: AddressLike,
    choice: BigNumberish,
    votingPower: BigNumberish,
    reason: string
  ];
  export type OutputTuple = [
    hierarchicalId: string,
    voter: string,
    choice: bigint,
    votingPower: bigint,
    reason: string
  ];
  export interface OutputObject {
    hierarchicalId: string;
    voter: string;
    choice: bigint;
    votingPower: bigint;
    reason: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingParametersUpdatedEvent {
  export type InputTuple = [
    organizationId: BytesLike,
    parameters: ISignal.VotingParametersStruct
  ];
  export type OutputTuple = [
    organizationId: string,
    parameters: ISignal.VotingParametersStructOutput
  ];
  export interface OutputObject {
    organizationId: string;
    parameters: ISignal.VotingParametersStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingPowerDelegatedEvent {
  export type InputTuple = [
    delegator: AddressLike,
    delegatee: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    delegator: string,
    delegatee: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    delegator: string;
    delegatee: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VotingPowerUndelegatedEvent {
  export type InputTuple = [
    delegator: AddressLike,
    delegatee: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    delegator: string,
    delegatee: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    delegator: string;
    delegatee: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISignal extends BaseContract {
  contractName: "ISignal";

  connect(runner?: ContractRunner | null): ISignal;
  waitForDeployment(): Promise<this>;

  interface: ISignalInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  applyConvictionDecay: TypedContractMethod<
    [hierarchicalId: string, voter: AddressLike],
    [void],
    "nonpayable"
  >;

  calculateConvictionMultiplier: TypedContractMethod<
    [convictionTime: BigNumberish],
    [bigint],
    "view"
  >;

  calculateVotingPower: TypedContractMethod<
    [hierarchicalId: string, voter: AddressLike, powerType: BigNumberish],
    [bigint],
    "view"
  >;

  canExecute: TypedContractMethod<[hierarchicalId: string], [boolean], "view">;

  canVote: TypedContractMethod<
    [hierarchicalId: string, voter: AddressLike],
    [boolean],
    "view"
  >;

  cancelProposal: TypedContractMethod<
    [hierarchicalId: string, reason: string],
    [void],
    "nonpayable"
  >;

  castVote: TypedContractMethod<
    [hierarchicalId: string, choice: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;

  castVoteWithConviction: TypedContractMethod<
    [
      hierarchicalId: string,
      choice: BigNumberish,
      convictionTime: BigNumberish,
      reason: string
    ],
    [void],
    "nonpayable"
  >;

  createProposal: TypedContractMethod<
    [
      organizationId: BytesLike,
      title: string,
      description: string,
      metadataURI: string,
      proposalType: BigNumberish,
      votingType: BigNumberish,
      votingPower: BigNumberish,
      votingPeriod: BigNumberish,
      executionData: BytesLike,
      targetContract: AddressLike
    ],
    [string],
    "nonpayable"
  >;

  delegateVotingPower: TypedContractMethod<
    [delegatee: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeProposal: TypedContractMethod<
    [hierarchicalId: string],
    [[boolean, string] & { success: boolean; returnData: string }],
    "nonpayable"
  >;

  getDelegatedVotingPower: TypedContractMethod<
    [delegator: AddressLike],
    [bigint],
    "view"
  >;

  getDelegations: TypedContractMethod<
    [delegator: AddressLike],
    [ISignal.DelegationStructOutput[]],
    "view"
  >;

  getOrganizationProposals: TypedContractMethod<
    [organizationId: BytesLike],
    [string[]],
    "view"
  >;

  getProposal: TypedContractMethod<
    [hierarchicalId: string],
    [ISignal.ProposalStructOutput],
    "view"
  >;

  getProposalsByState: TypedContractMethod<
    [state: BigNumberish],
    [string[]],
    "view"
  >;

  getVote: TypedContractMethod<
    [hierarchicalId: string, voter: AddressLike],
    [ISignal.VoteStructOutput],
    "view"
  >;

  getVotingParameters: TypedContractMethod<
    [organizationId: BytesLike],
    [ISignal.VotingParametersStructOutput],
    "view"
  >;

  getVotingPowerWithDelegation: TypedContractMethod<
    [
      organizationId: BytesLike,
      account: AddressLike,
      votingPowerType: BigNumberish
    ],
    [bigint],
    "view"
  >;

  setVotingParameters: TypedContractMethod<
    [organizationId: BytesLike, params: ISignal.VotingParametersStruct],
    [void],
    "nonpayable"
  >;

  undelegateVotingPower: TypedContractMethod<
    [delegatee: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "applyConvictionDecay"
  ): TypedContractMethod<
    [hierarchicalId: string, voter: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateConvictionMultiplier"
  ): TypedContractMethod<[convictionTime: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateVotingPower"
  ): TypedContractMethod<
    [hierarchicalId: string, voter: AddressLike, powerType: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "canExecute"
  ): TypedContractMethod<[hierarchicalId: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "canVote"
  ): TypedContractMethod<
    [hierarchicalId: string, voter: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "cancelProposal"
  ): TypedContractMethod<
    [hierarchicalId: string, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [hierarchicalId: string, choice: BigNumberish, reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "castVoteWithConviction"
  ): TypedContractMethod<
    [
      hierarchicalId: string,
      choice: BigNumberish,
      convictionTime: BigNumberish,
      reason: string
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "createProposal"
  ): TypedContractMethod<
    [
      organizationId: BytesLike,
      title: string,
      description: string,
      metadataURI: string,
      proposalType: BigNumberish,
      votingType: BigNumberish,
      votingPower: BigNumberish,
      votingPeriod: BigNumberish,
      executionData: BytesLike,
      targetContract: AddressLike
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "delegateVotingPower"
  ): TypedContractMethod<
    [delegatee: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeProposal"
  ): TypedContractMethod<
    [hierarchicalId: string],
    [[boolean, string] & { success: boolean; returnData: string }],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getDelegatedVotingPower"
  ): TypedContractMethod<[delegator: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getDelegations"
  ): TypedContractMethod<
    [delegator: AddressLike],
    [ISignal.DelegationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrganizationProposals"
  ): TypedContractMethod<[organizationId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getProposal"
  ): TypedContractMethod<
    [hierarchicalId: string],
    [ISignal.ProposalStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProposalsByState"
  ): TypedContractMethod<[state: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVote"
  ): TypedContractMethod<
    [hierarchicalId: string, voter: AddressLike],
    [ISignal.VoteStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingParameters"
  ): TypedContractMethod<
    [organizationId: BytesLike],
    [ISignal.VotingParametersStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVotingPowerWithDelegation"
  ): TypedContractMethod<
    [
      organizationId: BytesLike,
      account: AddressLike,
      votingPowerType: BigNumberish
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "setVotingParameters"
  ): TypedContractMethod<
    [organizationId: BytesLike, params: ISignal.VotingParametersStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "undelegateVotingPower"
  ): TypedContractMethod<
    [delegatee: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ConvictionDecayApplied"
  ): TypedContractEvent<
    ConvictionDecayAppliedEvent.InputTuple,
    ConvictionDecayAppliedEvent.OutputTuple,
    ConvictionDecayAppliedEvent.OutputObject
  >;
  getEvent(
    key: "ConvictionVoteCast"
  ): TypedContractEvent<
    ConvictionVoteCastEvent.InputTuple,
    ConvictionVoteCastEvent.OutputTuple,
    ConvictionVoteCastEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCanceled"
  ): TypedContractEvent<
    ProposalCanceledEvent.InputTuple,
    ProposalCanceledEvent.OutputTuple,
    ProposalCanceledEvent.OutputObject
  >;
  getEvent(
    key: "ProposalCreated"
  ): TypedContractEvent<
    ProposalCreatedEvent.InputTuple,
    ProposalCreatedEvent.OutputTuple,
    ProposalCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProposalExecuted"
  ): TypedContractEvent<
    ProposalExecutedEvent.InputTuple,
    ProposalExecutedEvent.OutputTuple,
    ProposalExecutedEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VotingParametersUpdated"
  ): TypedContractEvent<
    VotingParametersUpdatedEvent.InputTuple,
    VotingParametersUpdatedEvent.OutputTuple,
    VotingParametersUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "VotingPowerDelegated"
  ): TypedContractEvent<
    VotingPowerDelegatedEvent.InputTuple,
    VotingPowerDelegatedEvent.OutputTuple,
    VotingPowerDelegatedEvent.OutputObject
  >;
  getEvent(
    key: "VotingPowerUndelegated"
  ): TypedContractEvent<
    VotingPowerUndelegatedEvent.InputTuple,
    VotingPowerUndelegatedEvent.OutputTuple,
    VotingPowerUndelegatedEvent.OutputObject
  >;

  filters: {
    "ConvictionDecayApplied(string,address,uint256,uint256,uint256)": TypedContractEvent<
      ConvictionDecayAppliedEvent.InputTuple,
      ConvictionDecayAppliedEvent.OutputTuple,
      ConvictionDecayAppliedEvent.OutputObject
    >;
    ConvictionDecayApplied: TypedContractEvent<
      ConvictionDecayAppliedEvent.InputTuple,
      ConvictionDecayAppliedEvent.OutputTuple,
      ConvictionDecayAppliedEvent.OutputObject
    >;

    "ConvictionVoteCast(string,address,uint8,uint256,uint256,uint256,string)": TypedContractEvent<
      ConvictionVoteCastEvent.InputTuple,
      ConvictionVoteCastEvent.OutputTuple,
      ConvictionVoteCastEvent.OutputObject
    >;
    ConvictionVoteCast: TypedContractEvent<
      ConvictionVoteCastEvent.InputTuple,
      ConvictionVoteCastEvent.OutputTuple,
      ConvictionVoteCastEvent.OutputObject
    >;

    "ProposalCanceled(string,address,string)": TypedContractEvent<
      ProposalCanceledEvent.InputTuple,
      ProposalCanceledEvent.OutputTuple,
      ProposalCanceledEvent.OutputObject
    >;
    ProposalCanceled: TypedContractEvent<
      ProposalCanceledEvent.InputTuple,
      ProposalCanceledEvent.OutputTuple,
      ProposalCanceledEvent.OutputObject
    >;

    "ProposalCreated(string,bytes8,address,string,uint8,uint8,uint256,uint256,uint256)": TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;
    ProposalCreated: TypedContractEvent<
      ProposalCreatedEvent.InputTuple,
      ProposalCreatedEvent.OutputTuple,
      ProposalCreatedEvent.OutputObject
    >;

    "ProposalExecuted(string,address,bool,bytes)": TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;
    ProposalExecuted: TypedContractEvent<
      ProposalExecutedEvent.InputTuple,
      ProposalExecutedEvent.OutputTuple,
      ProposalExecutedEvent.OutputObject
    >;

    "VoteCast(string,address,uint8,uint256,string)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VotingParametersUpdated(bytes8,tuple)": TypedContractEvent<
      VotingParametersUpdatedEvent.InputTuple,
      VotingParametersUpdatedEvent.OutputTuple,
      VotingParametersUpdatedEvent.OutputObject
    >;
    VotingParametersUpdated: TypedContractEvent<
      VotingParametersUpdatedEvent.InputTuple,
      VotingParametersUpdatedEvent.OutputTuple,
      VotingParametersUpdatedEvent.OutputObject
    >;

    "VotingPowerDelegated(address,address,uint256,uint256)": TypedContractEvent<
      VotingPowerDelegatedEvent.InputTuple,
      VotingPowerDelegatedEvent.OutputTuple,
      VotingPowerDelegatedEvent.OutputObject
    >;
    VotingPowerDelegated: TypedContractEvent<
      VotingPowerDelegatedEvent.InputTuple,
      VotingPowerDelegatedEvent.OutputTuple,
      VotingPowerDelegatedEvent.OutputObject
    >;

    "VotingPowerUndelegated(address,address,uint256,uint256)": TypedContractEvent<
      VotingPowerUndelegatedEvent.InputTuple,
      VotingPowerUndelegatedEvent.OutputTuple,
      VotingPowerUndelegatedEvent.OutputObject
    >;
    VotingPowerUndelegated: TypedContractEvent<
      VotingPowerUndelegatedEvent.InputTuple,
      VotingPowerUndelegatedEvent.OutputTuple,
      VotingPowerUndelegatedEvent.OutputObject
    >;
  };
}
