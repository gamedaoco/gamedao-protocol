/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ISense {
  export type ReputationDataStruct = {
    experience: BigNumberish;
    reputation: BigNumberish;
    trust: BigNumberish;
    lastUpdated: BigNumberish;
    totalInteractions: BigNumberish;
    positiveInteractions: BigNumberish;
  };

  export type ReputationDataStructOutput = [
    experience: bigint,
    reputation: bigint,
    trust: bigint,
    lastUpdated: bigint,
    totalInteractions: bigint,
    positiveInteractions: bigint
  ] & {
    experience: bigint;
    reputation: bigint;
    trust: bigint;
    lastUpdated: bigint;
    totalInteractions: bigint;
    positiveInteractions: bigint;
  };

  export type ReputationEventStruct = {
    profileId: BytesLike;
    repType: BigNumberish;
    delta: BigNumberish;
    reason: BytesLike;
    updatedBy: AddressLike;
    timestamp: BigNumberish;
  };

  export type ReputationEventStructOutput = [
    profileId: string,
    repType: bigint,
    delta: bigint,
    reason: string,
    updatedBy: string,
    timestamp: bigint
  ] & {
    profileId: string;
    repType: bigint;
    delta: bigint;
    reason: string;
    updatedBy: string;
    timestamp: bigint;
  };
}

export interface ISenseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "awardExperience"
      | "calculateTrustScore"
      | "calculateVotingWeight"
      | "getExperience"
      | "getReputation"
      | "getReputationBatch"
      | "getReputationHistory"
      | "getTrustScore"
      | "recordInteraction"
      | "updateReputation"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExperienceAwarded"
      | "InteractionRecorded"
      | "ReputationUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "awardExperience",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTrustScore",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateVotingWeight",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getExperience",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationBatch",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationHistory",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustScore",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "recordInteraction",
    values: [BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReputation",
    values: [BytesLike, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "awardExperience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTrustScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateVotingWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExperience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordInteraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReputation",
    data: BytesLike
  ): Result;
}

export namespace ExperienceAwardedEvent {
  export type InputTuple = [
    profileId: BytesLike,
    amount: BigNumberish,
    reason: BytesLike,
    awardedBy: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    profileId: string,
    amount: bigint,
    reason: string,
    awardedBy: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    profileId: string;
    amount: bigint;
    reason: string;
    awardedBy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InteractionRecordedEvent {
  export type InputTuple = [
    profileId: BytesLike,
    positive: boolean,
    reason: BytesLike,
    recordedBy: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    profileId: string,
    positive: boolean,
    reason: string,
    recordedBy: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    profileId: string;
    positive: boolean;
    reason: string;
    recordedBy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationUpdatedEvent {
  export type InputTuple = [
    profileId: BytesLike,
    repType: BigNumberish,
    delta: BigNumberish,
    reason: BytesLike,
    updatedBy: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    profileId: string,
    repType: bigint,
    delta: bigint,
    reason: string,
    updatedBy: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    profileId: string;
    repType: bigint;
    delta: bigint;
    reason: string;
    updatedBy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISense extends BaseContract {
  contractName: "ISense";

  connect(runner?: ContractRunner | null): ISense;
  waitForDeployment(): Promise<this>;

  interface: ISenseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  awardExperience: TypedContractMethod<
    [profileId: BytesLike, amount: BigNumberish, reason: BytesLike],
    [void],
    "nonpayable"
  >;

  calculateTrustScore: TypedContractMethod<
    [profileId: BytesLike],
    [bigint],
    "view"
  >;

  calculateVotingWeight: TypedContractMethod<
    [profileId: BytesLike, baseWeight: BigNumberish],
    [bigint],
    "view"
  >;

  getExperience: TypedContractMethod<[profileId: BytesLike], [bigint], "view">;

  getReputation: TypedContractMethod<
    [profileId: BytesLike],
    [ISense.ReputationDataStructOutput],
    "view"
  >;

  getReputationBatch: TypedContractMethod<
    [profileIds: BytesLike[]],
    [ISense.ReputationDataStructOutput[]],
    "view"
  >;

  getReputationHistory: TypedContractMethod<
    [profileId: BytesLike],
    [ISense.ReputationEventStructOutput[]],
    "view"
  >;

  getTrustScore: TypedContractMethod<[profileId: BytesLike], [bigint], "view">;

  recordInteraction: TypedContractMethod<
    [profileId: BytesLike, positive: boolean, reason: BytesLike],
    [void],
    "nonpayable"
  >;

  updateReputation: TypedContractMethod<
    [
      profileId: BytesLike,
      repType: BigNumberish,
      delta: BigNumberish,
      reason: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "awardExperience"
  ): TypedContractMethod<
    [profileId: BytesLike, amount: BigNumberish, reason: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateTrustScore"
  ): TypedContractMethod<[profileId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateVotingWeight"
  ): TypedContractMethod<
    [profileId: BytesLike, baseWeight: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getExperience"
  ): TypedContractMethod<[profileId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReputation"
  ): TypedContractMethod<
    [profileId: BytesLike],
    [ISense.ReputationDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReputationBatch"
  ): TypedContractMethod<
    [profileIds: BytesLike[]],
    [ISense.ReputationDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReputationHistory"
  ): TypedContractMethod<
    [profileId: BytesLike],
    [ISense.ReputationEventStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getTrustScore"
  ): TypedContractMethod<[profileId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "recordInteraction"
  ): TypedContractMethod<
    [profileId: BytesLike, positive: boolean, reason: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateReputation"
  ): TypedContractMethod<
    [
      profileId: BytesLike,
      repType: BigNumberish,
      delta: BigNumberish,
      reason: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ExperienceAwarded"
  ): TypedContractEvent<
    ExperienceAwardedEvent.InputTuple,
    ExperienceAwardedEvent.OutputTuple,
    ExperienceAwardedEvent.OutputObject
  >;
  getEvent(
    key: "InteractionRecorded"
  ): TypedContractEvent<
    InteractionRecordedEvent.InputTuple,
    InteractionRecordedEvent.OutputTuple,
    InteractionRecordedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationUpdated"
  ): TypedContractEvent<
    ReputationUpdatedEvent.InputTuple,
    ReputationUpdatedEvent.OutputTuple,
    ReputationUpdatedEvent.OutputObject
  >;

  filters: {
    "ExperienceAwarded(bytes8,uint256,bytes32,address,uint256)": TypedContractEvent<
      ExperienceAwardedEvent.InputTuple,
      ExperienceAwardedEvent.OutputTuple,
      ExperienceAwardedEvent.OutputObject
    >;
    ExperienceAwarded: TypedContractEvent<
      ExperienceAwardedEvent.InputTuple,
      ExperienceAwardedEvent.OutputTuple,
      ExperienceAwardedEvent.OutputObject
    >;

    "InteractionRecorded(bytes8,bool,bytes32,address,uint256)": TypedContractEvent<
      InteractionRecordedEvent.InputTuple,
      InteractionRecordedEvent.OutputTuple,
      InteractionRecordedEvent.OutputObject
    >;
    InteractionRecorded: TypedContractEvent<
      InteractionRecordedEvent.InputTuple,
      InteractionRecordedEvent.OutputTuple,
      InteractionRecordedEvent.OutputObject
    >;

    "ReputationUpdated(bytes8,uint8,int256,bytes32,address,uint256)": TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
    ReputationUpdated: TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
  };
}
