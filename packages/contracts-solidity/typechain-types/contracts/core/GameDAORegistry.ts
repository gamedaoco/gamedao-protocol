/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace GameDAORegistry {
  export type ModuleInfoStruct = {
    moduleAddress: AddressLike;
    version: string;
    isEnabled: boolean;
    registeredAt: BigNumberish;
    enabledAt: BigNumberish;
  };

  export type ModuleInfoStructOutput = [
    moduleAddress: string,
    version: string,
    isEnabled: boolean,
    registeredAt: bigint,
    enabledAt: bigint
  ] & {
    moduleAddress: string;
    version: string;
    isEnabled: boolean;
    registeredAt: bigint;
    enabledAt: bigint;
  };
}

export interface GameDAORegistryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MODULE_MANAGER_ROLE"
      | "disableModule"
      | "emergencyDisableAllModules"
      | "enableModule"
      | "getAllModules"
      | "getEnabledModuleCount"
      | "getEnabledModules"
      | "getModule"
      | "getModuleCount"
      | "getModuleInfo"
      | "getModuleVersion"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "isModuleEnabled"
      | "pause"
      | "paused"
      | "registerModule"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "unpause"
      | "upgradeModule"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ModuleDisabled"
      | "ModuleEnabled"
      | "ModuleRegistered"
      | "ModuleUpgraded"
      | "Paused"
      | "RegistryInitialized"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MODULE_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "disableModule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyDisableAllModules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "enableModule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllModules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnabledModuleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEnabledModules",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getModule",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getModuleCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getModuleInfo",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getModuleVersion",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isModuleEnabled",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerModule",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "upgradeModule",
    values: [BytesLike, AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MODULE_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyDisableAllModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnabledModuleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEnabledModules",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getModule", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getModuleCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModuleInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getModuleVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isModuleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeModule",
    data: BytesLike
  ): Result;
}

export namespace ModuleDisabledEvent {
  export type InputTuple = [moduleId: BytesLike];
  export type OutputTuple = [moduleId: string];
  export interface OutputObject {
    moduleId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleEnabledEvent {
  export type InputTuple = [moduleId: BytesLike];
  export type OutputTuple = [moduleId: string];
  export interface OutputObject {
    moduleId: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleRegisteredEvent {
  export type InputTuple = [
    moduleId: BytesLike,
    moduleAddress: AddressLike,
    version: string
  ];
  export type OutputTuple = [
    moduleId: string,
    moduleAddress: string,
    version: string
  ];
  export interface OutputObject {
    moduleId: string;
    moduleAddress: string;
    version: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleUpgradedEvent {
  export type InputTuple = [
    moduleId: BytesLike,
    oldAddress: AddressLike,
    newAddress: AddressLike,
    newVersion: string
  ];
  export type OutputTuple = [
    moduleId: string,
    oldAddress: string,
    newAddress: string,
    newVersion: string
  ];
  export interface OutputObject {
    moduleId: string;
    oldAddress: string;
    newAddress: string;
    newVersion: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RegistryInitializedEvent {
  export type InputTuple = [admin: AddressLike];
  export type OutputTuple = [admin: string];
  export interface OutputObject {
    admin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GameDAORegistry extends BaseContract {
  contractName: "GameDAORegistry";

  connect(runner?: ContractRunner | null): GameDAORegistry;
  waitForDeployment(): Promise<this>;

  interface: GameDAORegistryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MODULE_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  disableModule: TypedContractMethod<
    [moduleId: BytesLike],
    [void],
    "nonpayable"
  >;

  emergencyDisableAllModules: TypedContractMethod<[], [void], "nonpayable">;

  enableModule: TypedContractMethod<
    [moduleId: BytesLike],
    [void],
    "nonpayable"
  >;

  getAllModules: TypedContractMethod<[], [string[]], "view">;

  getEnabledModuleCount: TypedContractMethod<[], [bigint], "view">;

  getEnabledModules: TypedContractMethod<[], [string[]], "view">;

  getModule: TypedContractMethod<[moduleId: BytesLike], [string], "view">;

  getModuleCount: TypedContractMethod<[], [bigint], "view">;

  getModuleInfo: TypedContractMethod<
    [moduleId: BytesLike],
    [GameDAORegistry.ModuleInfoStructOutput],
    "view"
  >;

  getModuleVersion: TypedContractMethod<
    [moduleId: BytesLike],
    [string],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  isModuleEnabled: TypedContractMethod<
    [moduleId: BytesLike],
    [boolean],
    "view"
  >;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registerModule: TypedContractMethod<
    [moduleAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  upgradeModule: TypedContractMethod<
    [moduleId: BytesLike, newModuleAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MODULE_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "disableModule"
  ): TypedContractMethod<[moduleId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyDisableAllModules"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "enableModule"
  ): TypedContractMethod<[moduleId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAllModules"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getEnabledModuleCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEnabledModules"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getModule"
  ): TypedContractMethod<[moduleId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getModuleCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getModuleInfo"
  ): TypedContractMethod<
    [moduleId: BytesLike],
    [GameDAORegistry.ModuleInfoStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getModuleVersion"
  ): TypedContractMethod<[moduleId: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isModuleEnabled"
  ): TypedContractMethod<[moduleId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerModule"
  ): TypedContractMethod<[moduleAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeModule"
  ): TypedContractMethod<
    [moduleId: BytesLike, newModuleAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ModuleDisabled"
  ): TypedContractEvent<
    ModuleDisabledEvent.InputTuple,
    ModuleDisabledEvent.OutputTuple,
    ModuleDisabledEvent.OutputObject
  >;
  getEvent(
    key: "ModuleEnabled"
  ): TypedContractEvent<
    ModuleEnabledEvent.InputTuple,
    ModuleEnabledEvent.OutputTuple,
    ModuleEnabledEvent.OutputObject
  >;
  getEvent(
    key: "ModuleRegistered"
  ): TypedContractEvent<
    ModuleRegisteredEvent.InputTuple,
    ModuleRegisteredEvent.OutputTuple,
    ModuleRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "ModuleUpgraded"
  ): TypedContractEvent<
    ModuleUpgradedEvent.InputTuple,
    ModuleUpgradedEvent.OutputTuple,
    ModuleUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RegistryInitialized"
  ): TypedContractEvent<
    RegistryInitializedEvent.InputTuple,
    RegistryInitializedEvent.OutputTuple,
    RegistryInitializedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ModuleDisabled(bytes32)": TypedContractEvent<
      ModuleDisabledEvent.InputTuple,
      ModuleDisabledEvent.OutputTuple,
      ModuleDisabledEvent.OutputObject
    >;
    ModuleDisabled: TypedContractEvent<
      ModuleDisabledEvent.InputTuple,
      ModuleDisabledEvent.OutputTuple,
      ModuleDisabledEvent.OutputObject
    >;

    "ModuleEnabled(bytes32)": TypedContractEvent<
      ModuleEnabledEvent.InputTuple,
      ModuleEnabledEvent.OutputTuple,
      ModuleEnabledEvent.OutputObject
    >;
    ModuleEnabled: TypedContractEvent<
      ModuleEnabledEvent.InputTuple,
      ModuleEnabledEvent.OutputTuple,
      ModuleEnabledEvent.OutputObject
    >;

    "ModuleRegistered(bytes32,address,string)": TypedContractEvent<
      ModuleRegisteredEvent.InputTuple,
      ModuleRegisteredEvent.OutputTuple,
      ModuleRegisteredEvent.OutputObject
    >;
    ModuleRegistered: TypedContractEvent<
      ModuleRegisteredEvent.InputTuple,
      ModuleRegisteredEvent.OutputTuple,
      ModuleRegisteredEvent.OutputObject
    >;

    "ModuleUpgraded(bytes32,address,address,string)": TypedContractEvent<
      ModuleUpgradedEvent.InputTuple,
      ModuleUpgradedEvent.OutputTuple,
      ModuleUpgradedEvent.OutputObject
    >;
    ModuleUpgraded: TypedContractEvent<
      ModuleUpgradedEvent.InputTuple,
      ModuleUpgradedEvent.OutputTuple,
      ModuleUpgradedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RegistryInitialized(address)": TypedContractEvent<
      RegistryInitializedEvent.InputTuple,
      RegistryInitializedEvent.OutputTuple,
      RegistryInitializedEvent.OutputObject
    >;
    RegistryInitialized: TypedContractEvent<
      RegistryInitializedEvent.InputTuple,
      RegistryInitializedEvent.OutputTuple,
      RegistryInitializedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
