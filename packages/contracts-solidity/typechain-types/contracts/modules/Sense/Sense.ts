/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ISense {
  export type ReputationDataStruct = {
    experience: BigNumberish;
    reputation: BigNumberish;
    trust: BigNumberish;
    lastUpdated: BigNumberish;
    totalInteractions: BigNumberish;
    positiveInteractions: BigNumberish;
  };

  export type ReputationDataStructOutput = [
    experience: bigint,
    reputation: bigint,
    trust: bigint,
    lastUpdated: bigint,
    totalInteractions: bigint,
    positiveInteractions: bigint
  ] & {
    experience: bigint;
    reputation: bigint;
    trust: bigint;
    lastUpdated: bigint;
    totalInteractions: bigint;
    positiveInteractions: bigint;
  };

  export type ReputationEventStruct = {
    profileId: BytesLike;
    repType: BigNumberish;
    delta: BigNumberish;
    reason: BytesLike;
    updatedBy: AddressLike;
    timestamp: BigNumberish;
  };

  export type ReputationEventStructOutput = [
    profileId: string,
    repType: bigint,
    delta: bigint,
    reason: string,
    updatedBy: string,
    timestamp: bigint
  ] & {
    profileId: string;
    repType: bigint;
    delta: bigint;
    reason: string;
    updatedBy: string;
    timestamp: bigint;
  };
}

export interface SenseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_REPUTATION_DELTA"
      | "OPERATOR_ROLE"
      | "REPUTATION_MANAGER_ROLE"
      | "REPUTATION_SCALE"
      | "SENSE_ADMIN_ROLE"
      | "TRUST_SCORE_SCALE"
      | "awardExperience"
      | "calculateTrustScore"
      | "calculateVotingWeight"
      | "emergencyPause"
      | "emergencyUnpause"
      | "getExperience"
      | "getReputation"
      | "getReputationBatch"
      | "getReputationHistory"
      | "getRoleAdmin"
      | "getTrustScore"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isInitialized"
      | "moduleId"
      | "onModuleDisabled"
      | "onModuleEnabled"
      | "pause"
      | "paused"
      | "recordInteraction"
      | "registry"
      | "renounceRole"
      | "revokeRole"
      | "supportsInterface"
      | "unpause"
      | "updateReputation"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ExperienceAwarded"
      | "InteractionRecorded"
      | "ModuleDisabled"
      | "ModuleEnabled"
      | "ModuleInitialized"
      | "Paused"
      | "ReputationUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REPUTATION_DELTA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REPUTATION_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REPUTATION_SCALE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SENSE_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRUST_SCORE_SCALE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "awardExperience",
    values: [BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTrustScore",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateVotingWeight",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getExperience",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationBatch",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationHistory",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTrustScore",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "moduleId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onModuleDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onModuleEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "recordInteraction",
    values: [BytesLike, boolean, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateReputation",
    values: [BytesLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REPUTATION_DELTA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REPUTATION_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REPUTATION_SCALE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SENSE_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRUST_SCORE_SCALE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "awardExperience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTrustScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateVotingWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getExperience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTrustScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moduleId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onModuleDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onModuleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recordInteraction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace ExperienceAwardedEvent {
  export type InputTuple = [
    profileId: BytesLike,
    amount: BigNumberish,
    reason: BytesLike,
    awardedBy: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    profileId: string,
    amount: bigint,
    reason: string,
    awardedBy: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    profileId: string;
    amount: bigint;
    reason: string;
    awardedBy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InteractionRecordedEvent {
  export type InputTuple = [
    profileId: BytesLike,
    positive: boolean,
    reason: BytesLike,
    recordedBy: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    profileId: string,
    positive: boolean,
    reason: string,
    recordedBy: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    profileId: string;
    positive: boolean;
    reason: string;
    recordedBy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleDisabledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleEnabledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleInitializedEvent {
  export type InputTuple = [registry: AddressLike];
  export type OutputTuple = [registry: string];
  export interface OutputObject {
    registry: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationUpdatedEvent {
  export type InputTuple = [
    profileId: BytesLike,
    repType: BigNumberish,
    delta: BigNumberish,
    reason: BytesLike,
    updatedBy: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    profileId: string,
    repType: bigint,
    delta: bigint,
    reason: string,
    updatedBy: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    profileId: string;
    repType: bigint;
    delta: bigint;
    reason: string;
    updatedBy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Sense extends BaseContract {
  contractName: "Sense";

  connect(runner?: ContractRunner | null): Sense;
  waitForDeployment(): Promise<this>;

  interface: SenseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_REPUTATION_DELTA: TypedContractMethod<[], [bigint], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  REPUTATION_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  REPUTATION_SCALE: TypedContractMethod<[], [bigint], "view">;

  SENSE_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  TRUST_SCORE_SCALE: TypedContractMethod<[], [bigint], "view">;

  awardExperience: TypedContractMethod<
    [profileId: BytesLike, amount: BigNumberish, reason: BytesLike],
    [void],
    "nonpayable"
  >;

  calculateTrustScore: TypedContractMethod<
    [profileId: BytesLike],
    [bigint],
    "view"
  >;

  calculateVotingWeight: TypedContractMethod<
    [profileId: BytesLike, baseWeight: BigNumberish],
    [bigint],
    "view"
  >;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyUnpause: TypedContractMethod<[], [void], "nonpayable">;

  getExperience: TypedContractMethod<[profileId: BytesLike], [bigint], "view">;

  getReputation: TypedContractMethod<
    [profileId: BytesLike],
    [ISense.ReputationDataStructOutput],
    "view"
  >;

  getReputationBatch: TypedContractMethod<
    [profileIds: BytesLike[]],
    [ISense.ReputationDataStructOutput[]],
    "view"
  >;

  getReputationHistory: TypedContractMethod<
    [profileId: BytesLike],
    [ISense.ReputationEventStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTrustScore: TypedContractMethod<[profileId: BytesLike], [bigint], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [registryAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  isInitialized: TypedContractMethod<[], [boolean], "view">;

  moduleId: TypedContractMethod<[], [string], "view">;

  onModuleDisabled: TypedContractMethod<[], [void], "nonpayable">;

  onModuleEnabled: TypedContractMethod<[], [void], "nonpayable">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  recordInteraction: TypedContractMethod<
    [profileId: BytesLike, positive: boolean, reason: BytesLike],
    [void],
    "nonpayable"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateReputation: TypedContractMethod<
    [
      profileId: BytesLike,
      repType: BigNumberish,
      delta: BigNumberish,
      reason: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_REPUTATION_DELTA"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REPUTATION_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REPUTATION_SCALE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SENSE_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TRUST_SCORE_SCALE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "awardExperience"
  ): TypedContractMethod<
    [profileId: BytesLike, amount: BigNumberish, reason: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "calculateTrustScore"
  ): TypedContractMethod<[profileId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateVotingWeight"
  ): TypedContractMethod<
    [profileId: BytesLike, baseWeight: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getExperience"
  ): TypedContractMethod<[profileId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getReputation"
  ): TypedContractMethod<
    [profileId: BytesLike],
    [ISense.ReputationDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReputationBatch"
  ): TypedContractMethod<
    [profileIds: BytesLike[]],
    [ISense.ReputationDataStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReputationHistory"
  ): TypedContractMethod<
    [profileId: BytesLike],
    [ISense.ReputationEventStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTrustScore"
  ): TypedContractMethod<[profileId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[registryAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "moduleId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onModuleDisabled"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onModuleEnabled"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "recordInteraction"
  ): TypedContractMethod<
    [profileId: BytesLike, positive: boolean, reason: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateReputation"
  ): TypedContractMethod<
    [
      profileId: BytesLike,
      repType: BigNumberish,
      delta: BigNumberish,
      reason: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "ExperienceAwarded"
  ): TypedContractEvent<
    ExperienceAwardedEvent.InputTuple,
    ExperienceAwardedEvent.OutputTuple,
    ExperienceAwardedEvent.OutputObject
  >;
  getEvent(
    key: "InteractionRecorded"
  ): TypedContractEvent<
    InteractionRecordedEvent.InputTuple,
    InteractionRecordedEvent.OutputTuple,
    InteractionRecordedEvent.OutputObject
  >;
  getEvent(
    key: "ModuleDisabled"
  ): TypedContractEvent<
    ModuleDisabledEvent.InputTuple,
    ModuleDisabledEvent.OutputTuple,
    ModuleDisabledEvent.OutputObject
  >;
  getEvent(
    key: "ModuleEnabled"
  ): TypedContractEvent<
    ModuleEnabledEvent.InputTuple,
    ModuleEnabledEvent.OutputTuple,
    ModuleEnabledEvent.OutputObject
  >;
  getEvent(
    key: "ModuleInitialized"
  ): TypedContractEvent<
    ModuleInitializedEvent.InputTuple,
    ModuleInitializedEvent.OutputTuple,
    ModuleInitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationUpdated"
  ): TypedContractEvent<
    ReputationUpdatedEvent.InputTuple,
    ReputationUpdatedEvent.OutputTuple,
    ReputationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ExperienceAwarded(bytes8,uint256,bytes32,address,uint256)": TypedContractEvent<
      ExperienceAwardedEvent.InputTuple,
      ExperienceAwardedEvent.OutputTuple,
      ExperienceAwardedEvent.OutputObject
    >;
    ExperienceAwarded: TypedContractEvent<
      ExperienceAwardedEvent.InputTuple,
      ExperienceAwardedEvent.OutputTuple,
      ExperienceAwardedEvent.OutputObject
    >;

    "InteractionRecorded(bytes8,bool,bytes32,address,uint256)": TypedContractEvent<
      InteractionRecordedEvent.InputTuple,
      InteractionRecordedEvent.OutputTuple,
      InteractionRecordedEvent.OutputObject
    >;
    InteractionRecorded: TypedContractEvent<
      InteractionRecordedEvent.InputTuple,
      InteractionRecordedEvent.OutputTuple,
      InteractionRecordedEvent.OutputObject
    >;

    "ModuleDisabled()": TypedContractEvent<
      ModuleDisabledEvent.InputTuple,
      ModuleDisabledEvent.OutputTuple,
      ModuleDisabledEvent.OutputObject
    >;
    ModuleDisabled: TypedContractEvent<
      ModuleDisabledEvent.InputTuple,
      ModuleDisabledEvent.OutputTuple,
      ModuleDisabledEvent.OutputObject
    >;

    "ModuleEnabled()": TypedContractEvent<
      ModuleEnabledEvent.InputTuple,
      ModuleEnabledEvent.OutputTuple,
      ModuleEnabledEvent.OutputObject
    >;
    ModuleEnabled: TypedContractEvent<
      ModuleEnabledEvent.InputTuple,
      ModuleEnabledEvent.OutputTuple,
      ModuleEnabledEvent.OutputObject
    >;

    "ModuleInitialized(address)": TypedContractEvent<
      ModuleInitializedEvent.InputTuple,
      ModuleInitializedEvent.OutputTuple,
      ModuleInitializedEvent.OutputObject
    >;
    ModuleInitialized: TypedContractEvent<
      ModuleInitializedEvent.InputTuple,
      ModuleInitializedEvent.OutputTuple,
      ModuleInitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ReputationUpdated(bytes8,uint8,int256,bytes32,address,uint256)": TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
    ReputationUpdated: TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
