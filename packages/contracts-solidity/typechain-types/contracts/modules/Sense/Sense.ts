/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ISense {
  export type ReputationDataStruct = {
    experience: BigNumberish;
    reputation: BigNumberish;
    trust: BigNumberish;
    lastUpdated: BigNumberish;
    totalFeedbacks: BigNumberish;
    positiveFeedbacks: BigNumberish;
  };

  export type ReputationDataStructOutput = [
    experience: bigint,
    reputation: bigint,
    trust: bigint,
    lastUpdated: bigint,
    totalFeedbacks: bigint,
    positiveFeedbacks: bigint
  ] & {
    experience: bigint;
    reputation: bigint;
    trust: bigint;
    lastUpdated: bigint;
    totalFeedbacks: bigint;
    positiveFeedbacks: bigint;
  };

  export type AchievementStruct = {
    achievementId: BytesLike;
    profileId: BytesLike;
    name: string;
    description: string;
    category: string;
    data: BytesLike;
    earnedAt: BigNumberish;
    grantedBy: AddressLike;
    points: BigNumberish;
  };

  export type AchievementStructOutput = [
    achievementId: string,
    profileId: string,
    name: string,
    description: string,
    category: string,
    data: string,
    earnedAt: bigint,
    grantedBy: string,
    points: bigint
  ] & {
    achievementId: string;
    profileId: string;
    name: string;
    description: string;
    category: string;
    data: string;
    earnedAt: bigint;
    grantedBy: string;
    points: bigint;
  };

  export type FeedbackSummaryStruct = {
    totalFeedbacks: BigNumberish;
    positiveFeedbacks: BigNumberish;
    negativeFeedbacks: BigNumberish;
    neutralFeedbacks: BigNumberish;
    averageRating: BigNumberish;
    trustScore: BigNumberish;
  };

  export type FeedbackSummaryStructOutput = [
    totalFeedbacks: bigint,
    positiveFeedbacks: bigint,
    negativeFeedbacks: bigint,
    neutralFeedbacks: bigint,
    averageRating: bigint,
    trustScore: bigint
  ] & {
    totalFeedbacks: bigint;
    positiveFeedbacks: bigint;
    negativeFeedbacks: bigint;
    neutralFeedbacks: bigint;
    averageRating: bigint;
    trustScore: bigint;
  };

  export type ReputationExportStruct = {
    sourceProfileId: BytesLike;
    owner: AddressLike;
    sourceOrganizationId: BytesLike;
    reputation: ISense.ReputationDataStruct;
    achievements: ISense.AchievementStruct[];
    feedbackSummary: ISense.FeedbackSummaryStruct;
    exportedAt: BigNumberish;
    merkleRoot: BytesLike;
  };

  export type ReputationExportStructOutput = [
    sourceProfileId: string,
    owner: string,
    sourceOrganizationId: string,
    reputation: ISense.ReputationDataStructOutput,
    achievements: ISense.AchievementStructOutput[],
    feedbackSummary: ISense.FeedbackSummaryStructOutput,
    exportedAt: bigint,
    merkleRoot: string
  ] & {
    sourceProfileId: string;
    owner: string;
    sourceOrganizationId: string;
    reputation: ISense.ReputationDataStructOutput;
    achievements: ISense.AchievementStructOutput[];
    feedbackSummary: ISense.FeedbackSummaryStructOutput;
    exportedAt: bigint;
    merkleRoot: string;
  };

  export type FeedbackStruct = {
    feedbackId: BytesLike;
    targetProfileId: BytesLike;
    giver: AddressLike;
    feedbackType: BigNumberish;
    rating: BigNumberish;
    comment: string;
    timestamp: BigNumberish;
    verified: boolean;
  };

  export type FeedbackStructOutput = [
    feedbackId: string,
    targetProfileId: string,
    giver: string,
    feedbackType: bigint,
    rating: bigint,
    comment: string,
    timestamp: bigint,
    verified: boolean
  ] & {
    feedbackId: string;
    targetProfileId: string;
    giver: string;
    feedbackType: bigint;
    rating: bigint;
    comment: string;
    timestamp: bigint;
    verified: boolean;
  };

  export type ProfileStruct = {
    profileId: BytesLike;
    owner: AddressLike;
    organizationId: BytesLike;
    metadata: string;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
    active: boolean;
    verified: boolean;
  };

  export type ProfileStructOutput = [
    profileId: string,
    owner: string,
    organizationId: string,
    metadata: string,
    createdAt: bigint,
    updatedAt: bigint,
    active: boolean,
    verified: boolean
  ] & {
    profileId: string;
    owner: string;
    organizationId: string;
    metadata: string;
    createdAt: bigint;
    updatedAt: bigint;
    active: boolean;
    verified: boolean;
  };

  export type ReputationEventStruct = {
    profileId: BytesLike;
    repType: BigNumberish;
    delta: BigNumberish;
    reason: BytesLike;
    updatedBy: AddressLike;
    timestamp: BigNumberish;
    blockNumber: BigNumberish;
  };

  export type ReputationEventStructOutput = [
    profileId: string,
    repType: bigint,
    delta: bigint,
    reason: string,
    updatedBy: string,
    timestamp: bigint,
    blockNumber: bigint
  ] & {
    profileId: string;
    repType: bigint;
    delta: bigint;
    reason: string;
    updatedBy: string;
    timestamp: bigint;
    blockNumber: bigint;
  };

  export type AchievementParamsStruct = {
    achievementId: BytesLike;
    name: string;
    description: string;
    category: string;
    points: BigNumberish;
    data: BytesLike;
  };

  export type AchievementParamsStructOutput = [
    achievementId: string,
    name: string,
    description: string,
    category: string,
    points: bigint,
    data: string
  ] & {
    achievementId: string;
    name: string;
    description: string;
    category: string;
    points: bigint;
    data: string;
  };
}

export interface SenseInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ACHIEVEMENT_GRANTER_ROLE"
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MAX_FEEDBACKS_PER_QUERY"
      | "MAX_FEEDBACK_RATING"
      | "MAX_REPUTATION_DELTA"
      | "MIN_FEEDBACK_RATING"
      | "OPERATOR_ROLE"
      | "REPUTATION_MANAGER_ROLE"
      | "REPUTATION_SCALE"
      | "SENSE_ADMIN_ROLE"
      | "TRUST_SCORE_SCALE"
      | "VERIFIER_ROLE"
      | "calculateTrustScore"
      | "calculateVotingWeight"
      | "createProfile"
      | "emergencyPause"
      | "emergencyUnpause"
      | "exportReputation"
      | "getAchievements"
      | "getAchievementsByCategory"
      | "getCategoryReputation"
      | "getFeedbackSummary"
      | "getFeedbacks"
      | "getProfile"
      | "getProfileByOwner"
      | "getProfileCount"
      | "getProfilesByOrganization"
      | "getReputation"
      | "getReputationHistory"
      | "getRoleAdmin"
      | "getTopProfiles"
      | "grantAchievement"
      | "grantAchievementWithParams"
      | "grantRole"
      | "hasAchievement"
      | "hasRole"
      | "importReputation"
      | "initialize"
      | "isInitialized"
      | "moduleId"
      | "onModuleDisabled"
      | "onModuleEnabled"
      | "pause"
      | "paused"
      | "profileExists"
      | "registry"
      | "renounceRole"
      | "revokeRole"
      | "submitFeedback"
      | "supportsInterface"
      | "unpause"
      | "updateCategoryReputation"
      | "updateProfile"
      | "updateReputation"
      | "verifyProfile"
      | "version"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AchievementGranted"
      | "FeedbackSubmitted"
      | "ModuleDisabled"
      | "ModuleEnabled"
      | "ModuleInitialized"
      | "Paused"
      | "ProfileCreated"
      | "ProfileUpdated"
      | "ProfileVerified"
      | "ReputationExported"
      | "ReputationImported"
      | "ReputationUpdated"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ACHIEVEMENT_GRANTER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FEEDBACKS_PER_QUERY",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_FEEDBACK_RATING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REPUTATION_DELTA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MIN_FEEDBACK_RATING",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REPUTATION_MANAGER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REPUTATION_SCALE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SENSE_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TRUST_SCORE_SCALE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "VERIFIER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTrustScore",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateVotingWeight",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createProfile",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "exportReputation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAchievements",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAchievementsByCategory",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryReputation",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedbackSummary",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeedbacks",
    values: [BytesLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfile",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileByOwner",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProfileCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProfilesByOrganization",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputation",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getReputationHistory",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTopProfiles",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAchievement",
    values: [
      BytesLike,
      BytesLike,
      string,
      string,
      string,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "grantAchievementWithParams",
    values: [AddressLike, BytesLike, ISense.AchievementParamsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasAchievement",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "importReputation",
    values: [BytesLike, ISense.ReputationExportStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "moduleId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onModuleDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onModuleEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "profileExists",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitFeedback",
    values: [BytesLike, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCategoryReputation",
    values: [BytesLike, BytesLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateProfile",
    values: [BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "updateReputation",
    values: [BytesLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyProfile",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "ACHIEVEMENT_GRANTER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FEEDBACKS_PER_QUERY",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_FEEDBACK_RATING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REPUTATION_DELTA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MIN_FEEDBACK_RATING",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REPUTATION_MANAGER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REPUTATION_SCALE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SENSE_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TRUST_SCORE_SCALE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "VERIFIER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTrustScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateVotingWeight",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exportReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAchievements",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAchievementsByCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeedbackSummary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFeedbacks",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getProfile", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getProfileByOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfileCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProfilesByOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReputationHistory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTopProfiles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAchievement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantAchievementWithParams",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasAchievement",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "importReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moduleId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onModuleDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onModuleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "profileExists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitFeedback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCategoryReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateReputation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyProfile",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export namespace AchievementGrantedEvent {
  export type InputTuple = [
    profileId: BytesLike,
    achievementId: BytesLike,
    name: string,
    points: BigNumberish,
    grantedBy: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    profileId: string,
    achievementId: string,
    name: string,
    points: bigint,
    grantedBy: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    profileId: string;
    achievementId: string;
    name: string;
    points: bigint;
    grantedBy: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeedbackSubmittedEvent {
  export type InputTuple = [
    feedbackId: BytesLike,
    targetProfileId: BytesLike,
    giver: AddressLike,
    feedbackType: BigNumberish,
    rating: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    feedbackId: string,
    targetProfileId: string,
    giver: string,
    feedbackType: bigint,
    rating: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    feedbackId: string;
    targetProfileId: string;
    giver: string;
    feedbackType: bigint;
    rating: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleDisabledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleEnabledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleInitializedEvent {
  export type InputTuple = [registry: AddressLike];
  export type OutputTuple = [registry: string];
  export interface OutputObject {
    registry: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileCreatedEvent {
  export type InputTuple = [
    profileId: BytesLike,
    owner: AddressLike,
    organizationId: BytesLike,
    metadata: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    profileId: string,
    owner: string,
    organizationId: string,
    metadata: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    profileId: string;
    owner: string;
    organizationId: string;
    metadata: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileUpdatedEvent {
  export type InputTuple = [
    profileId: BytesLike,
    metadata: string,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    profileId: string,
    metadata: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    profileId: string;
    metadata: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProfileVerifiedEvent {
  export type InputTuple = [
    profileId: BytesLike,
    level: BigNumberish,
    verifier: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    profileId: string,
    level: bigint,
    verifier: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    profileId: string;
    level: bigint;
    verifier: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationExportedEvent {
  export type InputTuple = [
    profileId: BytesLike,
    targetOrganizationId: BytesLike,
    merkleRoot: BytesLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    profileId: string,
    targetOrganizationId: string,
    merkleRoot: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    profileId: string;
    targetOrganizationId: string;
    merkleRoot: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationImportedEvent {
  export type InputTuple = [
    profileId: BytesLike,
    sourceOrganizationId: BytesLike,
    importedReputation: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    profileId: string,
    sourceOrganizationId: string,
    importedReputation: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    profileId: string;
    sourceOrganizationId: string;
    importedReputation: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ReputationUpdatedEvent {
  export type InputTuple = [
    profileId: BytesLike,
    repType: BigNumberish,
    delta: BigNumberish,
    reason: BytesLike,
    updatedBy: AddressLike,
    newValue: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    profileId: string,
    repType: bigint,
    delta: bigint,
    reason: string,
    updatedBy: string,
    newValue: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    profileId: string;
    repType: bigint;
    delta: bigint;
    reason: string;
    updatedBy: string;
    newValue: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Sense extends BaseContract {
  contractName: "Sense";

  connect(runner?: ContractRunner | null): Sense;
  waitForDeployment(): Promise<this>;

  interface: SenseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ACHIEVEMENT_GRANTER_ROLE: TypedContractMethod<[], [string], "view">;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_FEEDBACKS_PER_QUERY: TypedContractMethod<[], [bigint], "view">;

  MAX_FEEDBACK_RATING: TypedContractMethod<[], [bigint], "view">;

  MAX_REPUTATION_DELTA: TypedContractMethod<[], [bigint], "view">;

  MIN_FEEDBACK_RATING: TypedContractMethod<[], [bigint], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  REPUTATION_MANAGER_ROLE: TypedContractMethod<[], [string], "view">;

  REPUTATION_SCALE: TypedContractMethod<[], [bigint], "view">;

  SENSE_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  TRUST_SCORE_SCALE: TypedContractMethod<[], [bigint], "view">;

  VERIFIER_ROLE: TypedContractMethod<[], [string], "view">;

  calculateTrustScore: TypedContractMethod<
    [profileId: BytesLike],
    [bigint],
    "view"
  >;

  calculateVotingWeight: TypedContractMethod<
    [profileId: BytesLike, baseWeight: BigNumberish],
    [bigint],
    "view"
  >;

  createProfile: TypedContractMethod<
    [organizationId: BytesLike, metadata: string],
    [string],
    "nonpayable"
  >;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyUnpause: TypedContractMethod<[], [void], "nonpayable">;

  exportReputation: TypedContractMethod<
    [profileId: BytesLike],
    [ISense.ReputationExportStructOutput],
    "view"
  >;

  getAchievements: TypedContractMethod<
    [profileId: BytesLike],
    [ISense.AchievementStructOutput[]],
    "view"
  >;

  getAchievementsByCategory: TypedContractMethod<
    [profileId: BytesLike, category: string],
    [ISense.AchievementStructOutput[]],
    "view"
  >;

  getCategoryReputation: TypedContractMethod<
    [profileId: BytesLike, category: BytesLike],
    [bigint],
    "view"
  >;

  getFeedbackSummary: TypedContractMethod<
    [profileId: BytesLike],
    [ISense.FeedbackSummaryStructOutput],
    "view"
  >;

  getFeedbacks: TypedContractMethod<
    [profileId: BytesLike, offset: BigNumberish, limit: BigNumberish],
    [ISense.FeedbackStructOutput[]],
    "view"
  >;

  getProfile: TypedContractMethod<
    [profileId: BytesLike],
    [ISense.ProfileStructOutput],
    "view"
  >;

  getProfileByOwner: TypedContractMethod<
    [owner: AddressLike, organizationId: BytesLike],
    [ISense.ProfileStructOutput],
    "view"
  >;

  getProfileCount: TypedContractMethod<[], [bigint], "view">;

  getProfilesByOrganization: TypedContractMethod<
    [organizationId: BytesLike],
    [string[]],
    "view"
  >;

  getReputation: TypedContractMethod<
    [profileId: BytesLike],
    [ISense.ReputationDataStructOutput],
    "view"
  >;

  getReputationHistory: TypedContractMethod<
    [profileId: BytesLike],
    [ISense.ReputationEventStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTopProfiles: TypedContractMethod<
    [organizationId: BytesLike, limit: BigNumberish],
    [string[]],
    "view"
  >;

  grantAchievement: TypedContractMethod<
    [
      profileId: BytesLike,
      achievementId: BytesLike,
      name: string,
      description: string,
      category: string,
      points: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  grantAchievementWithParams: TypedContractMethod<
    [
      granter: AddressLike,
      profileId: BytesLike,
      params: ISense.AchievementParamsStruct
    ],
    [void],
    "nonpayable"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasAchievement: TypedContractMethod<
    [profileId: BytesLike, achievementId: BytesLike],
    [boolean],
    "view"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  importReputation: TypedContractMethod<
    [
      profileId: BytesLike,
      exportData: ISense.ReputationExportStruct,
      arg2: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  initialize: TypedContractMethod<
    [registryAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  isInitialized: TypedContractMethod<[], [boolean], "view">;

  moduleId: TypedContractMethod<[], [string], "view">;

  onModuleDisabled: TypedContractMethod<[], [void], "nonpayable">;

  onModuleEnabled: TypedContractMethod<[], [void], "nonpayable">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  profileExists: TypedContractMethod<[profileId: BytesLike], [boolean], "view">;

  registry: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  submitFeedback: TypedContractMethod<
    [
      targetProfileId: BytesLike,
      feedbackType: BigNumberish,
      rating: BigNumberish,
      comment: string
    ],
    [string],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateCategoryReputation: TypedContractMethod<
    [
      profileId: BytesLike,
      category: BytesLike,
      delta: BigNumberish,
      reason: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  updateProfile: TypedContractMethod<
    [profileId: BytesLike, metadata: string],
    [void],
    "nonpayable"
  >;

  updateReputation: TypedContractMethod<
    [
      profileId: BytesLike,
      repType: BigNumberish,
      delta: BigNumberish,
      reason: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  verifyProfile: TypedContractMethod<
    [profileId: BytesLike, level: BigNumberish],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ACHIEVEMENT_GRANTER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_FEEDBACKS_PER_QUERY"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_FEEDBACK_RATING"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MAX_REPUTATION_DELTA"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "MIN_FEEDBACK_RATING"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REPUTATION_MANAGER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "REPUTATION_SCALE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "SENSE_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TRUST_SCORE_SCALE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "VERIFIER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateTrustScore"
  ): TypedContractMethod<[profileId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "calculateVotingWeight"
  ): TypedContractMethod<
    [profileId: BytesLike, baseWeight: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "createProfile"
  ): TypedContractMethod<
    [organizationId: BytesLike, metadata: string],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exportReputation"
  ): TypedContractMethod<
    [profileId: BytesLike],
    [ISense.ReputationExportStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAchievements"
  ): TypedContractMethod<
    [profileId: BytesLike],
    [ISense.AchievementStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getAchievementsByCategory"
  ): TypedContractMethod<
    [profileId: BytesLike, category: string],
    [ISense.AchievementStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCategoryReputation"
  ): TypedContractMethod<
    [profileId: BytesLike, category: BytesLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeedbackSummary"
  ): TypedContractMethod<
    [profileId: BytesLike],
    [ISense.FeedbackSummaryStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getFeedbacks"
  ): TypedContractMethod<
    [profileId: BytesLike, offset: BigNumberish, limit: BigNumberish],
    [ISense.FeedbackStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProfile"
  ): TypedContractMethod<
    [profileId: BytesLike],
    [ISense.ProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProfileByOwner"
  ): TypedContractMethod<
    [owner: AddressLike, organizationId: BytesLike],
    [ISense.ProfileStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProfileCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getProfilesByOrganization"
  ): TypedContractMethod<[organizationId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getReputation"
  ): TypedContractMethod<
    [profileId: BytesLike],
    [ISense.ReputationDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getReputationHistory"
  ): TypedContractMethod<
    [profileId: BytesLike],
    [ISense.ReputationEventStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTopProfiles"
  ): TypedContractMethod<
    [organizationId: BytesLike, limit: BigNumberish],
    [string[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "grantAchievement"
  ): TypedContractMethod<
    [
      profileId: BytesLike,
      achievementId: BytesLike,
      name: string,
      description: string,
      category: string,
      points: BigNumberish,
      data: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantAchievementWithParams"
  ): TypedContractMethod<
    [
      granter: AddressLike,
      profileId: BytesLike,
      params: ISense.AchievementParamsStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasAchievement"
  ): TypedContractMethod<
    [profileId: BytesLike, achievementId: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "importReputation"
  ): TypedContractMethod<
    [
      profileId: BytesLike,
      exportData: ISense.ReputationExportStruct,
      arg2: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[registryAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "moduleId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onModuleDisabled"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onModuleEnabled"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "profileExists"
  ): TypedContractMethod<[profileId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "submitFeedback"
  ): TypedContractMethod<
    [
      targetProfileId: BytesLike,
      feedbackType: BigNumberish,
      rating: BigNumberish,
      comment: string
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCategoryReputation"
  ): TypedContractMethod<
    [
      profileId: BytesLike,
      category: BytesLike,
      delta: BigNumberish,
      reason: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateProfile"
  ): TypedContractMethod<
    [profileId: BytesLike, metadata: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateReputation"
  ): TypedContractMethod<
    [
      profileId: BytesLike,
      repType: BigNumberish,
      delta: BigNumberish,
      reason: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "verifyProfile"
  ): TypedContractMethod<
    [profileId: BytesLike, level: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "AchievementGranted"
  ): TypedContractEvent<
    AchievementGrantedEvent.InputTuple,
    AchievementGrantedEvent.OutputTuple,
    AchievementGrantedEvent.OutputObject
  >;
  getEvent(
    key: "FeedbackSubmitted"
  ): TypedContractEvent<
    FeedbackSubmittedEvent.InputTuple,
    FeedbackSubmittedEvent.OutputTuple,
    FeedbackSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "ModuleDisabled"
  ): TypedContractEvent<
    ModuleDisabledEvent.InputTuple,
    ModuleDisabledEvent.OutputTuple,
    ModuleDisabledEvent.OutputObject
  >;
  getEvent(
    key: "ModuleEnabled"
  ): TypedContractEvent<
    ModuleEnabledEvent.InputTuple,
    ModuleEnabledEvent.OutputTuple,
    ModuleEnabledEvent.OutputObject
  >;
  getEvent(
    key: "ModuleInitialized"
  ): TypedContractEvent<
    ModuleInitializedEvent.InputTuple,
    ModuleInitializedEvent.OutputTuple,
    ModuleInitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileCreated"
  ): TypedContractEvent<
    ProfileCreatedEvent.InputTuple,
    ProfileCreatedEvent.OutputTuple,
    ProfileCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileUpdated"
  ): TypedContractEvent<
    ProfileUpdatedEvent.InputTuple,
    ProfileUpdatedEvent.OutputTuple,
    ProfileUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ProfileVerified"
  ): TypedContractEvent<
    ProfileVerifiedEvent.InputTuple,
    ProfileVerifiedEvent.OutputTuple,
    ProfileVerifiedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationExported"
  ): TypedContractEvent<
    ReputationExportedEvent.InputTuple,
    ReputationExportedEvent.OutputTuple,
    ReputationExportedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationImported"
  ): TypedContractEvent<
    ReputationImportedEvent.InputTuple,
    ReputationImportedEvent.OutputTuple,
    ReputationImportedEvent.OutputObject
  >;
  getEvent(
    key: "ReputationUpdated"
  ): TypedContractEvent<
    ReputationUpdatedEvent.InputTuple,
    ReputationUpdatedEvent.OutputTuple,
    ReputationUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "AchievementGranted(bytes32,bytes32,string,uint256,address,uint256)": TypedContractEvent<
      AchievementGrantedEvent.InputTuple,
      AchievementGrantedEvent.OutputTuple,
      AchievementGrantedEvent.OutputObject
    >;
    AchievementGranted: TypedContractEvent<
      AchievementGrantedEvent.InputTuple,
      AchievementGrantedEvent.OutputTuple,
      AchievementGrantedEvent.OutputObject
    >;

    "FeedbackSubmitted(bytes32,bytes32,address,uint8,uint8,uint256)": TypedContractEvent<
      FeedbackSubmittedEvent.InputTuple,
      FeedbackSubmittedEvent.OutputTuple,
      FeedbackSubmittedEvent.OutputObject
    >;
    FeedbackSubmitted: TypedContractEvent<
      FeedbackSubmittedEvent.InputTuple,
      FeedbackSubmittedEvent.OutputTuple,
      FeedbackSubmittedEvent.OutputObject
    >;

    "ModuleDisabled()": TypedContractEvent<
      ModuleDisabledEvent.InputTuple,
      ModuleDisabledEvent.OutputTuple,
      ModuleDisabledEvent.OutputObject
    >;
    ModuleDisabled: TypedContractEvent<
      ModuleDisabledEvent.InputTuple,
      ModuleDisabledEvent.OutputTuple,
      ModuleDisabledEvent.OutputObject
    >;

    "ModuleEnabled()": TypedContractEvent<
      ModuleEnabledEvent.InputTuple,
      ModuleEnabledEvent.OutputTuple,
      ModuleEnabledEvent.OutputObject
    >;
    ModuleEnabled: TypedContractEvent<
      ModuleEnabledEvent.InputTuple,
      ModuleEnabledEvent.OutputTuple,
      ModuleEnabledEvent.OutputObject
    >;

    "ModuleInitialized(address)": TypedContractEvent<
      ModuleInitializedEvent.InputTuple,
      ModuleInitializedEvent.OutputTuple,
      ModuleInitializedEvent.OutputObject
    >;
    ModuleInitialized: TypedContractEvent<
      ModuleInitializedEvent.InputTuple,
      ModuleInitializedEvent.OutputTuple,
      ModuleInitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProfileCreated(bytes32,address,bytes32,string,uint256)": TypedContractEvent<
      ProfileCreatedEvent.InputTuple,
      ProfileCreatedEvent.OutputTuple,
      ProfileCreatedEvent.OutputObject
    >;
    ProfileCreated: TypedContractEvent<
      ProfileCreatedEvent.InputTuple,
      ProfileCreatedEvent.OutputTuple,
      ProfileCreatedEvent.OutputObject
    >;

    "ProfileUpdated(bytes32,string,uint256)": TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;
    ProfileUpdated: TypedContractEvent<
      ProfileUpdatedEvent.InputTuple,
      ProfileUpdatedEvent.OutputTuple,
      ProfileUpdatedEvent.OutputObject
    >;

    "ProfileVerified(bytes32,uint8,address,uint256)": TypedContractEvent<
      ProfileVerifiedEvent.InputTuple,
      ProfileVerifiedEvent.OutputTuple,
      ProfileVerifiedEvent.OutputObject
    >;
    ProfileVerified: TypedContractEvent<
      ProfileVerifiedEvent.InputTuple,
      ProfileVerifiedEvent.OutputTuple,
      ProfileVerifiedEvent.OutputObject
    >;

    "ReputationExported(bytes32,bytes32,bytes32,uint256)": TypedContractEvent<
      ReputationExportedEvent.InputTuple,
      ReputationExportedEvent.OutputTuple,
      ReputationExportedEvent.OutputObject
    >;
    ReputationExported: TypedContractEvent<
      ReputationExportedEvent.InputTuple,
      ReputationExportedEvent.OutputTuple,
      ReputationExportedEvent.OutputObject
    >;

    "ReputationImported(bytes32,bytes32,uint256,uint256)": TypedContractEvent<
      ReputationImportedEvent.InputTuple,
      ReputationImportedEvent.OutputTuple,
      ReputationImportedEvent.OutputObject
    >;
    ReputationImported: TypedContractEvent<
      ReputationImportedEvent.InputTuple,
      ReputationImportedEvent.OutputTuple,
      ReputationImportedEvent.OutputObject
    >;

    "ReputationUpdated(bytes32,uint8,int256,bytes32,address,uint256,uint256)": TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;
    ReputationUpdated: TypedContractEvent<
      ReputationUpdatedEvent.InputTuple,
      ReputationUpdatedEvent.OutputTuple,
      ReputationUpdatedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
