/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IFlow {
  export type CampaignStruct = {
    index: BigNumberish;
    organizationId: BytesLike;
    creator: AddressLike;
    admin: AddressLike;
    title: string;
    description: string;
    metadataURI: string;
    flowType: BigNumberish;
    state: BigNumberish;
    paymentToken: AddressLike;
    target: BigNumberish;
    min: BigNumberish;
    max: BigNumberish;
    raised: BigNumberish;
    contributorCount: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
    autoFinalize: boolean;
    protocolFee: BigNumberish;
  };

  export type CampaignStructOutput = [
    index: bigint,
    organizationId: string,
    creator: string,
    admin: string,
    title: string,
    description: string,
    metadataURI: string,
    flowType: bigint,
    state: bigint,
    paymentToken: string,
    target: bigint,
    min: bigint,
    max: bigint,
    raised: bigint,
    contributorCount: bigint,
    startTime: bigint,
    endTime: bigint,
    createdAt: bigint,
    updatedAt: bigint,
    autoFinalize: boolean,
    protocolFee: bigint
  ] & {
    index: bigint;
    organizationId: string;
    creator: string;
    admin: string;
    title: string;
    description: string;
    metadataURI: string;
    flowType: bigint;
    state: bigint;
    paymentToken: string;
    target: bigint;
    min: bigint;
    max: bigint;
    raised: bigint;
    contributorCount: bigint;
    startTime: bigint;
    endTime: bigint;
    createdAt: bigint;
    updatedAt: bigint;
    autoFinalize: boolean;
    protocolFee: bigint;
  };

  export type ContributionStruct = {
    contributor: AddressLike;
    amount: BigNumberish;
    timestamp: BigNumberish;
    state: BigNumberish;
    metadata: string;
  };

  export type ContributionStructOutput = [
    contributor: string,
    amount: bigint,
    timestamp: bigint,
    state: bigint,
    metadata: string
  ] & {
    contributor: string;
    amount: bigint;
    timestamp: bigint;
    state: bigint;
    metadata: string;
  };
}

export interface FlowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "BASIS_POINTS"
      | "CAMPAIGN_CREATOR_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "FLOW_ADMIN_ROLE"
      | "MAX_PROTOCOL_FEE"
      | "OPERATOR_ROLE"
      | "calculateProtocolFee"
      | "canContribute"
      | "claimRewards"
      | "contribute"
      | "createCampaign"
      | "distributeRewards"
      | "emergencyPause"
      | "emergencyUnpause"
      | "emergencyWithdraw"
      | "finalizeCampaign"
      | "getCampaign"
      | "getCampaignContributors"
      | "getCampaignCount"
      | "getCampaignProgress"
      | "getCampaignsByOrganization"
      | "getCampaignsByState"
      | "getContribution"
      | "getProtocolFeeRate"
      | "getRewardDistribution"
      | "getRoleAdmin"
      | "getTimeRemaining"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isCampaignActive"
      | "isInitialized"
      | "moduleId"
      | "onModuleDisabled"
      | "onModuleEnabled"
      | "pause"
      | "paused"
      | "refundContribution"
      | "registry"
      | "renounceRole"
      | "revokeRole"
      | "setCampaignState"
      | "setProtocolFeeRate"
      | "setProtocolFeeRecipient"
      | "supportsInterface"
      | "unpause"
      | "updateCampaign"
      | "version"
      | "withdrawFunds"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CampaignCreated"
      | "CampaignFinalized"
      | "CampaignStateChanged"
      | "CampaignUpdated"
      | "ContributionMade"
      | "ContributionRefunded"
      | "ModuleDisabled"
      | "ModuleEnabled"
      | "ModuleInitialized"
      | "Paused"
      | "ProtocolFeeCollected"
      | "RewardsDistributed"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "BASIS_POINTS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CAMPAIGN_CREATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "FLOW_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_PROTOCOL_FEE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "calculateProtocolFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "canContribute",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "claimRewards",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contribute",
    values: [BytesLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "createCampaign",
    values: [
      BytesLike,
      string,
      string,
      string,
      BigNumberish,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyWithdraw",
    values: [AddressLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "finalizeCampaign",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaign",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignContributors",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignProgress",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignsByOrganization",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCampaignsByState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getContribution",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getProtocolFeeRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRewardDistribution",
    values: [BytesLike, AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTimeRemaining",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isCampaignActive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "moduleId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onModuleDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onModuleEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "refundContribution",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setCampaignState",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeRate",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeRecipient",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateCampaign",
    values: [
      BytesLike,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "BASIS_POINTS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CAMPAIGN_CREATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "FLOW_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_PROTOCOL_FEE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateProtocolFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canContribute",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "claimRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyWithdraw",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "finalizeCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignContributors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignProgress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignsByOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCampaignsByState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProtocolFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRewardDistribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTimeRemaining",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isCampaignActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moduleId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onModuleDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onModuleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "refundContribution",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setCampaignState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateCampaign",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
}

export namespace CampaignCreatedEvent {
  export type InputTuple = [
    campaignId: BytesLike,
    organizationId: BytesLike,
    creator: AddressLike,
    title: string,
    flowType: BigNumberish,
    target: BigNumberish,
    startTime: BigNumberish,
    endTime: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: string,
    organizationId: string,
    creator: string,
    title: string,
    flowType: bigint,
    target: bigint,
    startTime: bigint,
    endTime: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    campaignId: string;
    organizationId: string;
    creator: string;
    title: string;
    flowType: bigint;
    target: bigint;
    startTime: bigint;
    endTime: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignFinalizedEvent {
  export type InputTuple = [
    campaignId: BytesLike,
    finalState: BigNumberish,
    totalRaised: BigNumberish,
    contributorCount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: string,
    finalState: bigint,
    totalRaised: bigint,
    contributorCount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    campaignId: string;
    finalState: bigint;
    totalRaised: bigint;
    contributorCount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignStateChangedEvent {
  export type InputTuple = [
    campaignId: BytesLike,
    oldState: BigNumberish,
    newState: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: string,
    oldState: bigint,
    newState: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    campaignId: string;
    oldState: bigint;
    newState: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CampaignUpdatedEvent {
  export type InputTuple = [
    campaignId: BytesLike,
    title: string,
    description: string,
    target: BigNumberish,
    min: BigNumberish,
    max: BigNumberish,
    endTime: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: string,
    title: string,
    description: string,
    target: bigint,
    min: bigint,
    max: bigint,
    endTime: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    campaignId: string;
    title: string;
    description: string;
    target: bigint;
    min: bigint;
    max: bigint;
    endTime: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContributionMadeEvent {
  export type InputTuple = [
    campaignId: BytesLike,
    contributor: AddressLike,
    amount: BigNumberish,
    totalRaised: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: string,
    contributor: string,
    amount: bigint,
    totalRaised: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    campaignId: string;
    contributor: string;
    amount: bigint;
    totalRaised: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContributionRefundedEvent {
  export type InputTuple = [
    campaignId: BytesLike,
    contributor: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: string,
    contributor: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    campaignId: string;
    contributor: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleDisabledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleEnabledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleInitializedEvent {
  export type InputTuple = [registry: AddressLike];
  export type OutputTuple = [registry: string];
  export interface OutputObject {
    registry: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolFeeCollectedEvent {
  export type InputTuple = [
    campaignId: BytesLike,
    token: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: string,
    token: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    campaignId: string;
    token: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RewardsDistributedEvent {
  export type InputTuple = [
    campaignId: BytesLike,
    token: AddressLike,
    totalAmount: BigNumberish,
    contributorCount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    campaignId: string,
    token: string,
    totalAmount: bigint,
    contributorCount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    campaignId: string;
    token: string;
    totalAmount: bigint;
    contributorCount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Flow extends BaseContract {
  contractName: "Flow";

  connect(runner?: ContractRunner | null): Flow;
  waitForDeployment(): Promise<this>;

  interface: FlowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  BASIS_POINTS: TypedContractMethod<[], [bigint], "view">;

  CAMPAIGN_CREATOR_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  FLOW_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MAX_PROTOCOL_FEE: TypedContractMethod<[], [bigint], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  calculateProtocolFee: TypedContractMethod<
    [amount: BigNumberish],
    [bigint],
    "view"
  >;

  canContribute: TypedContractMethod<
    [campaignId: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;

  claimRewards: TypedContractMethod<
    [campaignId: BytesLike, rewardToken: AddressLike],
    [void],
    "nonpayable"
  >;

  contribute: TypedContractMethod<
    [campaignId: BytesLike, amount: BigNumberish, metadata: string],
    [void],
    "payable"
  >;

  createCampaign: TypedContractMethod<
    [
      organizationId: BytesLike,
      title: string,
      description: string,
      metadataURI: string,
      flowType: BigNumberish,
      paymentToken: AddressLike,
      target: BigNumberish,
      min: BigNumberish,
      max: BigNumberish,
      duration: BigNumberish,
      autoFinalize: boolean
    ],
    [string],
    "nonpayable"
  >;

  distributeRewards: TypedContractMethod<
    [
      campaignId: BytesLike,
      rewardToken: AddressLike,
      totalRewardAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyUnpause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyWithdraw: TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  finalizeCampaign: TypedContractMethod<
    [campaignId: BytesLike],
    [void],
    "nonpayable"
  >;

  getCampaign: TypedContractMethod<
    [campaignId: BytesLike],
    [IFlow.CampaignStructOutput],
    "view"
  >;

  getCampaignContributors: TypedContractMethod<
    [campaignId: BytesLike],
    [string[]],
    "view"
  >;

  getCampaignCount: TypedContractMethod<[], [bigint], "view">;

  getCampaignProgress: TypedContractMethod<
    [campaignId: BytesLike],
    [
      [bigint, bigint, bigint] & {
        raised: bigint;
        target: bigint;
        percentage: bigint;
      }
    ],
    "view"
  >;

  getCampaignsByOrganization: TypedContractMethod<
    [organizationId: BytesLike],
    [string[]],
    "view"
  >;

  getCampaignsByState: TypedContractMethod<
    [state: BigNumberish],
    [string[]],
    "view"
  >;

  getContribution: TypedContractMethod<
    [campaignId: BytesLike, contributor: AddressLike],
    [IFlow.ContributionStructOutput],
    "view"
  >;

  getProtocolFeeRate: TypedContractMethod<[], [bigint], "view">;

  getRewardDistribution: TypedContractMethod<
    [campaignId: BytesLike, rewardToken: AddressLike, contributor: AddressLike],
    [
      [bigint, bigint, bigint] & {
        totalReward: bigint;
        claimedAmount: bigint;
        claimableAmount: bigint;
      }
    ],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getTimeRemaining: TypedContractMethod<
    [campaignId: BytesLike],
    [bigint],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [registryAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  isCampaignActive: TypedContractMethod<
    [campaignId: BytesLike],
    [boolean],
    "view"
  >;

  isInitialized: TypedContractMethod<[], [boolean], "view">;

  moduleId: TypedContractMethod<[], [string], "view">;

  onModuleDisabled: TypedContractMethod<[], [void], "nonpayable">;

  onModuleEnabled: TypedContractMethod<[], [void], "nonpayable">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  refundContribution: TypedContractMethod<
    [campaignId: BytesLike, contributor: AddressLike],
    [void],
    "nonpayable"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setCampaignState: TypedContractMethod<
    [campaignId: BytesLike, newState: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolFeeRate: TypedContractMethod<
    [newRate: BigNumberish],
    [void],
    "nonpayable"
  >;

  setProtocolFeeRecipient: TypedContractMethod<
    [newRecipient: AddressLike],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateCampaign: TypedContractMethod<
    [
      campaignId: BytesLike,
      title: string,
      description: string,
      target: BigNumberish,
      min: BigNumberish,
      max: BigNumberish,
      endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  withdrawFunds: TypedContractMethod<
    [campaignId: BytesLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "BASIS_POINTS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "CAMPAIGN_CREATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "FLOW_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MAX_PROTOCOL_FEE"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "calculateProtocolFee"
  ): TypedContractMethod<[amount: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "canContribute"
  ): TypedContractMethod<
    [campaignId: BytesLike, arg1: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "claimRewards"
  ): TypedContractMethod<
    [campaignId: BytesLike, rewardToken: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "contribute"
  ): TypedContractMethod<
    [campaignId: BytesLike, amount: BigNumberish, metadata: string],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createCampaign"
  ): TypedContractMethod<
    [
      organizationId: BytesLike,
      title: string,
      description: string,
      metadataURI: string,
      flowType: BigNumberish,
      paymentToken: AddressLike,
      target: BigNumberish,
      min: BigNumberish,
      max: BigNumberish,
      duration: BigNumberish,
      autoFinalize: boolean
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "distributeRewards"
  ): TypedContractMethod<
    [
      campaignId: BytesLike,
      rewardToken: AddressLike,
      totalRewardAmount: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyWithdraw"
  ): TypedContractMethod<
    [token: AddressLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "finalizeCampaign"
  ): TypedContractMethod<[campaignId: BytesLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCampaign"
  ): TypedContractMethod<
    [campaignId: BytesLike],
    [IFlow.CampaignStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCampaignContributors"
  ): TypedContractMethod<[campaignId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCampaignCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getCampaignProgress"
  ): TypedContractMethod<
    [campaignId: BytesLike],
    [
      [bigint, bigint, bigint] & {
        raised: bigint;
        target: bigint;
        percentage: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getCampaignsByOrganization"
  ): TypedContractMethod<[organizationId: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCampaignsByState"
  ): TypedContractMethod<[state: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getContribution"
  ): TypedContractMethod<
    [campaignId: BytesLike, contributor: AddressLike],
    [IFlow.ContributionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getProtocolFeeRate"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getRewardDistribution"
  ): TypedContractMethod<
    [campaignId: BytesLike, rewardToken: AddressLike, contributor: AddressLike],
    [
      [bigint, bigint, bigint] & {
        totalReward: bigint;
        claimedAmount: bigint;
        claimableAmount: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getTimeRemaining"
  ): TypedContractMethod<[campaignId: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[registryAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isCampaignActive"
  ): TypedContractMethod<[campaignId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "moduleId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onModuleDisabled"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onModuleEnabled"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "refundContribution"
  ): TypedContractMethod<
    [campaignId: BytesLike, contributor: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setCampaignState"
  ): TypedContractMethod<
    [campaignId: BytesLike, newState: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setProtocolFeeRate"
  ): TypedContractMethod<[newRate: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setProtocolFeeRecipient"
  ): TypedContractMethod<[newRecipient: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateCampaign"
  ): TypedContractMethod<
    [
      campaignId: BytesLike,
      title: string,
      description: string,
      target: BigNumberish,
      min: BigNumberish,
      max: BigNumberish,
      endTime: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawFunds"
  ): TypedContractMethod<
    [campaignId: BytesLike, to: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CampaignCreated"
  ): TypedContractEvent<
    CampaignCreatedEvent.InputTuple,
    CampaignCreatedEvent.OutputTuple,
    CampaignCreatedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignFinalized"
  ): TypedContractEvent<
    CampaignFinalizedEvent.InputTuple,
    CampaignFinalizedEvent.OutputTuple,
    CampaignFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignStateChanged"
  ): TypedContractEvent<
    CampaignStateChangedEvent.InputTuple,
    CampaignStateChangedEvent.OutputTuple,
    CampaignStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "CampaignUpdated"
  ): TypedContractEvent<
    CampaignUpdatedEvent.InputTuple,
    CampaignUpdatedEvent.OutputTuple,
    CampaignUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ContributionMade"
  ): TypedContractEvent<
    ContributionMadeEvent.InputTuple,
    ContributionMadeEvent.OutputTuple,
    ContributionMadeEvent.OutputObject
  >;
  getEvent(
    key: "ContributionRefunded"
  ): TypedContractEvent<
    ContributionRefundedEvent.InputTuple,
    ContributionRefundedEvent.OutputTuple,
    ContributionRefundedEvent.OutputObject
  >;
  getEvent(
    key: "ModuleDisabled"
  ): TypedContractEvent<
    ModuleDisabledEvent.InputTuple,
    ModuleDisabledEvent.OutputTuple,
    ModuleDisabledEvent.OutputObject
  >;
  getEvent(
    key: "ModuleEnabled"
  ): TypedContractEvent<
    ModuleEnabledEvent.InputTuple,
    ModuleEnabledEvent.OutputTuple,
    ModuleEnabledEvent.OutputObject
  >;
  getEvent(
    key: "ModuleInitialized"
  ): TypedContractEvent<
    ModuleInitializedEvent.InputTuple,
    ModuleInitializedEvent.OutputTuple,
    ModuleInitializedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolFeeCollected"
  ): TypedContractEvent<
    ProtocolFeeCollectedEvent.InputTuple,
    ProtocolFeeCollectedEvent.OutputTuple,
    ProtocolFeeCollectedEvent.OutputObject
  >;
  getEvent(
    key: "RewardsDistributed"
  ): TypedContractEvent<
    RewardsDistributedEvent.InputTuple,
    RewardsDistributedEvent.OutputTuple,
    RewardsDistributedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "CampaignCreated(bytes32,bytes32,address,string,uint8,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;
    CampaignCreated: TypedContractEvent<
      CampaignCreatedEvent.InputTuple,
      CampaignCreatedEvent.OutputTuple,
      CampaignCreatedEvent.OutputObject
    >;

    "CampaignFinalized(bytes32,uint8,uint256,uint256,uint256)": TypedContractEvent<
      CampaignFinalizedEvent.InputTuple,
      CampaignFinalizedEvent.OutputTuple,
      CampaignFinalizedEvent.OutputObject
    >;
    CampaignFinalized: TypedContractEvent<
      CampaignFinalizedEvent.InputTuple,
      CampaignFinalizedEvent.OutputTuple,
      CampaignFinalizedEvent.OutputObject
    >;

    "CampaignStateChanged(bytes32,uint8,uint8,uint256)": TypedContractEvent<
      CampaignStateChangedEvent.InputTuple,
      CampaignStateChangedEvent.OutputTuple,
      CampaignStateChangedEvent.OutputObject
    >;
    CampaignStateChanged: TypedContractEvent<
      CampaignStateChangedEvent.InputTuple,
      CampaignStateChangedEvent.OutputTuple,
      CampaignStateChangedEvent.OutputObject
    >;

    "CampaignUpdated(bytes32,string,string,uint256,uint256,uint256,uint256,uint256)": TypedContractEvent<
      CampaignUpdatedEvent.InputTuple,
      CampaignUpdatedEvent.OutputTuple,
      CampaignUpdatedEvent.OutputObject
    >;
    CampaignUpdated: TypedContractEvent<
      CampaignUpdatedEvent.InputTuple,
      CampaignUpdatedEvent.OutputTuple,
      CampaignUpdatedEvent.OutputObject
    >;

    "ContributionMade(bytes32,address,uint256,uint256,uint256)": TypedContractEvent<
      ContributionMadeEvent.InputTuple,
      ContributionMadeEvent.OutputTuple,
      ContributionMadeEvent.OutputObject
    >;
    ContributionMade: TypedContractEvent<
      ContributionMadeEvent.InputTuple,
      ContributionMadeEvent.OutputTuple,
      ContributionMadeEvent.OutputObject
    >;

    "ContributionRefunded(bytes32,address,uint256,uint256)": TypedContractEvent<
      ContributionRefundedEvent.InputTuple,
      ContributionRefundedEvent.OutputTuple,
      ContributionRefundedEvent.OutputObject
    >;
    ContributionRefunded: TypedContractEvent<
      ContributionRefundedEvent.InputTuple,
      ContributionRefundedEvent.OutputTuple,
      ContributionRefundedEvent.OutputObject
    >;

    "ModuleDisabled()": TypedContractEvent<
      ModuleDisabledEvent.InputTuple,
      ModuleDisabledEvent.OutputTuple,
      ModuleDisabledEvent.OutputObject
    >;
    ModuleDisabled: TypedContractEvent<
      ModuleDisabledEvent.InputTuple,
      ModuleDisabledEvent.OutputTuple,
      ModuleDisabledEvent.OutputObject
    >;

    "ModuleEnabled()": TypedContractEvent<
      ModuleEnabledEvent.InputTuple,
      ModuleEnabledEvent.OutputTuple,
      ModuleEnabledEvent.OutputObject
    >;
    ModuleEnabled: TypedContractEvent<
      ModuleEnabledEvent.InputTuple,
      ModuleEnabledEvent.OutputTuple,
      ModuleEnabledEvent.OutputObject
    >;

    "ModuleInitialized(address)": TypedContractEvent<
      ModuleInitializedEvent.InputTuple,
      ModuleInitializedEvent.OutputTuple,
      ModuleInitializedEvent.OutputObject
    >;
    ModuleInitialized: TypedContractEvent<
      ModuleInitializedEvent.InputTuple,
      ModuleInitializedEvent.OutputTuple,
      ModuleInitializedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "ProtocolFeeCollected(bytes32,address,uint256,uint256)": TypedContractEvent<
      ProtocolFeeCollectedEvent.InputTuple,
      ProtocolFeeCollectedEvent.OutputTuple,
      ProtocolFeeCollectedEvent.OutputObject
    >;
    ProtocolFeeCollected: TypedContractEvent<
      ProtocolFeeCollectedEvent.InputTuple,
      ProtocolFeeCollectedEvent.OutputTuple,
      ProtocolFeeCollectedEvent.OutputObject
    >;

    "RewardsDistributed(bytes32,address,uint256,uint256,uint256)": TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;
    RewardsDistributed: TypedContractEvent<
      RewardsDistributedEvent.InputTuple,
      RewardsDistributedEvent.OutputTuple,
      RewardsDistributedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
