/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace IControl {
  export type OrganizationStruct = {
    id: BytesLike;
    name: string;
    metadataURI: string;
    creator: AddressLike;
    prime: AddressLike;
    treasury: AddressLike;
    orgType: BigNumberish;
    accessModel: BigNumberish;
    feeModel: BigNumberish;
    memberLimit: BigNumberish;
    memberCount: BigNumberish;
    totalCampaigns: BigNumberish;
    totalProposals: BigNumberish;
    membershipFee: BigNumberish;
    gameStakeRequired: BigNumberish;
    state: BigNumberish;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
  };

  export type OrganizationStructOutput = [
    id: string,
    name: string,
    metadataURI: string,
    creator: string,
    prime: string,
    treasury: string,
    orgType: bigint,
    accessModel: bigint,
    feeModel: bigint,
    memberLimit: bigint,
    memberCount: bigint,
    totalCampaigns: bigint,
    totalProposals: bigint,
    membershipFee: bigint,
    gameStakeRequired: bigint,
    state: bigint,
    createdAt: bigint,
    updatedAt: bigint
  ] & {
    id: string;
    name: string;
    metadataURI: string;
    creator: string;
    prime: string;
    treasury: string;
    orgType: bigint;
    accessModel: bigint;
    feeModel: bigint;
    memberLimit: bigint;
    memberCount: bigint;
    totalCampaigns: bigint;
    totalProposals: bigint;
    membershipFee: bigint;
    gameStakeRequired: bigint;
    state: bigint;
    createdAt: bigint;
    updatedAt: bigint;
  };
}

export declare namespace IStaking {
  export type OrganizationStakeStruct = {
    organizationId: BytesLike;
    staker: AddressLike;
    amount: BigNumberish;
    stakedAt: BigNumberish;
    lockPeriod: BigNumberish;
    active: boolean;
  };

  export type OrganizationStakeStructOutput = [
    organizationId: string,
    staker: string,
    amount: bigint,
    stakedAt: bigint,
    lockPeriod: bigint,
    active: boolean
  ] & {
    organizationId: string;
    staker: string;
    amount: bigint;
    stakedAt: bigint;
    lockPeriod: bigint;
    active: boolean;
  };
}

export interface ControlInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "ADMIN_ROLE"
      | "DEFAULT_ADMIN_ROLE"
      | "MODULE_ADMIN_ROLE"
      | "MODULE_ID"
      | "OPERATOR_ROLE"
      | "canWithdrawStake"
      | "createOrganization"
      | "emergencyPause"
      | "emergencyUnpause"
      | "factory"
      | "gameToken"
      | "getAllOrganizations"
      | "getOrganization"
      | "getOrganizationCount"
      | "getOrganizationStake"
      | "getOrganizationsByState"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isInitialized"
      | "isOrganizationActive"
      | "moduleId"
      | "onModuleDisabled"
      | "onModuleEnabled"
      | "pause"
      | "paused"
      | "registerOrganization"
      | "registry"
      | "renounceRole"
      | "revokeRole"
      | "setFactory"
      | "stakingContract"
      | "supportsInterface"
      | "unpause"
      | "updateMemberCount"
      | "updateOrganizationPrime"
      | "updateOrganizationState"
      | "version"
      | "withdrawStake"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ModuleDisabled"
      | "ModuleEnabled"
      | "ModuleInitialized"
      | "OrganizationCreated"
      | "OrganizationPrimeUpdated"
      | "OrganizationStateChanged"
      | "Paused"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "StakeWithdrawn"
      | "Unpaused"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MODULE_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "MODULE_ID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "canWithdrawStake",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createOrganization",
    values: [
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyPause",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "emergencyUnpause",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "factory", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllOrganizations",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganization",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizationStake",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getOrganizationsByState",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isInitialized",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isOrganizationActive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "moduleId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "onModuleDisabled",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "onModuleEnabled",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerOrganization",
    values: [BytesLike, IControl.OrganizationStruct]
  ): string;
  encodeFunctionData(functionFragment: "registry", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFactory",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "stakingContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "updateMemberCount",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrganizationPrime",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOrganizationState",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawStake",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN_ROLE", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MODULE_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "MODULE_ID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "canWithdrawStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyPause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "emergencyUnpause",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "factory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllOrganizations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizationStake",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOrganizationsByState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isInitialized",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isOrganizationActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "moduleId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onModuleDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onModuleEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerOrganization",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFactory", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOrganizationPrime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOrganizationState",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawStake",
    data: BytesLike
  ): Result;
}

export namespace ModuleDisabledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleEnabledEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleInitializedEvent {
  export type InputTuple = [registry: AddressLike];
  export type OutputTuple = [registry: string];
  export interface OutputObject {
    registry: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizationCreatedEvent {
  export type InputTuple = [
    id: BytesLike,
    name: string,
    creator: AddressLike,
    treasury: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    name: string,
    creator: string,
    treasury: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    id: string;
    name: string;
    creator: string;
    treasury: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizationPrimeUpdatedEvent {
  export type InputTuple = [
    id: BytesLike,
    oldPrime: AddressLike,
    newPrime: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    oldPrime: string,
    newPrime: string,
    timestamp: bigint
  ];
  export interface OutputObject {
    id: string;
    oldPrime: string;
    newPrime: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OrganizationStateChangedEvent {
  export type InputTuple = [
    id: BytesLike,
    oldState: BigNumberish,
    newState: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    id: string,
    oldState: bigint,
    newState: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    id: string;
    oldState: bigint;
    newState: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StakeWithdrawnEvent {
  export type InputTuple = [
    organizationId: BytesLike,
    staker: AddressLike,
    amount: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    organizationId: string,
    staker: string,
    amount: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    organizationId: string;
    staker: string;
    amount: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UnpausedEvent {
  export type InputTuple = [account: AddressLike];
  export type OutputTuple = [account: string];
  export interface OutputObject {
    account: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Control extends BaseContract {
  contractName: "Control";

  connect(runner?: ContractRunner | null): Control;
  waitForDeployment(): Promise<this>;

  interface: ControlInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MODULE_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  MODULE_ID: TypedContractMethod<[], [string], "view">;

  OPERATOR_ROLE: TypedContractMethod<[], [string], "view">;

  canWithdrawStake: TypedContractMethod<
    [organizationId: BytesLike],
    [boolean],
    "view"
  >;

  createOrganization: TypedContractMethod<
    [
      name: string,
      metadataURI: string,
      orgType: BigNumberish,
      accessModel: BigNumberish,
      feeModel: BigNumberish,
      memberLimit: BigNumberish,
      membershipFee: BigNumberish,
      gameStakeRequired: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  emergencyPause: TypedContractMethod<[], [void], "nonpayable">;

  emergencyUnpause: TypedContractMethod<[], [void], "nonpayable">;

  factory: TypedContractMethod<[], [string], "view">;

  gameToken: TypedContractMethod<[], [string], "view">;

  getAllOrganizations: TypedContractMethod<
    [],
    [IControl.OrganizationStructOutput[]],
    "view"
  >;

  getOrganization: TypedContractMethod<
    [id: BytesLike],
    [IControl.OrganizationStructOutput],
    "view"
  >;

  getOrganizationCount: TypedContractMethod<[], [bigint], "view">;

  getOrganizationStake: TypedContractMethod<
    [organizationId: BytesLike],
    [IStaking.OrganizationStakeStructOutput],
    "view"
  >;

  getOrganizationsByState: TypedContractMethod<
    [state: BigNumberish],
    [IControl.OrganizationStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  initialize: TypedContractMethod<
    [registryAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  isInitialized: TypedContractMethod<[], [boolean], "view">;

  isOrganizationActive: TypedContractMethod<
    [organizationId: BytesLike],
    [boolean],
    "view"
  >;

  moduleId: TypedContractMethod<[], [string], "view">;

  onModuleDisabled: TypedContractMethod<[], [void], "nonpayable">;

  onModuleEnabled: TypedContractMethod<[], [void], "nonpayable">;

  pause: TypedContractMethod<[], [void], "nonpayable">;

  paused: TypedContractMethod<[], [boolean], "view">;

  registerOrganization: TypedContractMethod<
    [organizationId: BytesLike, org: IControl.OrganizationStruct],
    [void],
    "nonpayable"
  >;

  registry: TypedContractMethod<[], [string], "view">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  setFactory: TypedContractMethod<
    [_factory: AddressLike],
    [void],
    "nonpayable"
  >;

  stakingContract: TypedContractMethod<[], [string], "view">;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  unpause: TypedContractMethod<[], [void], "nonpayable">;

  updateMemberCount: TypedContractMethod<
    [organizationId: BytesLike, memberCount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateOrganizationPrime: TypedContractMethod<
    [organizationId: BytesLike, newPrime: AddressLike],
    [void],
    "nonpayable"
  >;

  updateOrganizationState: TypedContractMethod<
    [organizationId: BytesLike, state: BigNumberish],
    [void],
    "nonpayable"
  >;

  version: TypedContractMethod<[], [string], "view">;

  withdrawStake: TypedContractMethod<
    [organizationId: BytesLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MODULE_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "MODULE_ID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "OPERATOR_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "canWithdrawStake"
  ): TypedContractMethod<[organizationId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "createOrganization"
  ): TypedContractMethod<
    [
      name: string,
      metadataURI: string,
      orgType: BigNumberish,
      accessModel: BigNumberish,
      feeModel: BigNumberish,
      memberLimit: BigNumberish,
      membershipFee: BigNumberish,
      gameStakeRequired: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "emergencyPause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "emergencyUnpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "factory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "gameToken"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllOrganizations"
  ): TypedContractMethod<[], [IControl.OrganizationStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getOrganization"
  ): TypedContractMethod<
    [id: BytesLike],
    [IControl.OrganizationStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrganizationCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOrganizationStake"
  ): TypedContractMethod<
    [organizationId: BytesLike],
    [IStaking.OrganizationStakeStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOrganizationsByState"
  ): TypedContractMethod<
    [state: BigNumberish],
    [IControl.OrganizationStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[registryAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isInitialized"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isOrganizationActive"
  ): TypedContractMethod<[organizationId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "moduleId"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "onModuleDisabled"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "onModuleEnabled"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "pause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "paused"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "registerOrganization"
  ): TypedContractMethod<
    [organizationId: BytesLike, org: IControl.OrganizationStruct],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registry"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setFactory"
  ): TypedContractMethod<[_factory: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "stakingContract"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "unpause"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMemberCount"
  ): TypedContractMethod<
    [organizationId: BytesLike, memberCount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateOrganizationPrime"
  ): TypedContractMethod<
    [organizationId: BytesLike, newPrime: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateOrganizationState"
  ): TypedContractMethod<
    [organizationId: BytesLike, state: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "withdrawStake"
  ): TypedContractMethod<[organizationId: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "ModuleDisabled"
  ): TypedContractEvent<
    ModuleDisabledEvent.InputTuple,
    ModuleDisabledEvent.OutputTuple,
    ModuleDisabledEvent.OutputObject
  >;
  getEvent(
    key: "ModuleEnabled"
  ): TypedContractEvent<
    ModuleEnabledEvent.InputTuple,
    ModuleEnabledEvent.OutputTuple,
    ModuleEnabledEvent.OutputObject
  >;
  getEvent(
    key: "ModuleInitialized"
  ): TypedContractEvent<
    ModuleInitializedEvent.InputTuple,
    ModuleInitializedEvent.OutputTuple,
    ModuleInitializedEvent.OutputObject
  >;
  getEvent(
    key: "OrganizationCreated"
  ): TypedContractEvent<
    OrganizationCreatedEvent.InputTuple,
    OrganizationCreatedEvent.OutputTuple,
    OrganizationCreatedEvent.OutputObject
  >;
  getEvent(
    key: "OrganizationPrimeUpdated"
  ): TypedContractEvent<
    OrganizationPrimeUpdatedEvent.InputTuple,
    OrganizationPrimeUpdatedEvent.OutputTuple,
    OrganizationPrimeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OrganizationStateChanged"
  ): TypedContractEvent<
    OrganizationStateChangedEvent.InputTuple,
    OrganizationStateChangedEvent.OutputTuple,
    OrganizationStateChangedEvent.OutputObject
  >;
  getEvent(
    key: "Paused"
  ): TypedContractEvent<
    PausedEvent.InputTuple,
    PausedEvent.OutputTuple,
    PausedEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "StakeWithdrawn"
  ): TypedContractEvent<
    StakeWithdrawnEvent.InputTuple,
    StakeWithdrawnEvent.OutputTuple,
    StakeWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "Unpaused"
  ): TypedContractEvent<
    UnpausedEvent.InputTuple,
    UnpausedEvent.OutputTuple,
    UnpausedEvent.OutputObject
  >;

  filters: {
    "ModuleDisabled()": TypedContractEvent<
      ModuleDisabledEvent.InputTuple,
      ModuleDisabledEvent.OutputTuple,
      ModuleDisabledEvent.OutputObject
    >;
    ModuleDisabled: TypedContractEvent<
      ModuleDisabledEvent.InputTuple,
      ModuleDisabledEvent.OutputTuple,
      ModuleDisabledEvent.OutputObject
    >;

    "ModuleEnabled()": TypedContractEvent<
      ModuleEnabledEvent.InputTuple,
      ModuleEnabledEvent.OutputTuple,
      ModuleEnabledEvent.OutputObject
    >;
    ModuleEnabled: TypedContractEvent<
      ModuleEnabledEvent.InputTuple,
      ModuleEnabledEvent.OutputTuple,
      ModuleEnabledEvent.OutputObject
    >;

    "ModuleInitialized(address)": TypedContractEvent<
      ModuleInitializedEvent.InputTuple,
      ModuleInitializedEvent.OutputTuple,
      ModuleInitializedEvent.OutputObject
    >;
    ModuleInitialized: TypedContractEvent<
      ModuleInitializedEvent.InputTuple,
      ModuleInitializedEvent.OutputTuple,
      ModuleInitializedEvent.OutputObject
    >;

    "OrganizationCreated(bytes8,string,address,address,uint256)": TypedContractEvent<
      OrganizationCreatedEvent.InputTuple,
      OrganizationCreatedEvent.OutputTuple,
      OrganizationCreatedEvent.OutputObject
    >;
    OrganizationCreated: TypedContractEvent<
      OrganizationCreatedEvent.InputTuple,
      OrganizationCreatedEvent.OutputTuple,
      OrganizationCreatedEvent.OutputObject
    >;

    "OrganizationPrimeUpdated(bytes8,address,address,uint256)": TypedContractEvent<
      OrganizationPrimeUpdatedEvent.InputTuple,
      OrganizationPrimeUpdatedEvent.OutputTuple,
      OrganizationPrimeUpdatedEvent.OutputObject
    >;
    OrganizationPrimeUpdated: TypedContractEvent<
      OrganizationPrimeUpdatedEvent.InputTuple,
      OrganizationPrimeUpdatedEvent.OutputTuple,
      OrganizationPrimeUpdatedEvent.OutputObject
    >;

    "OrganizationStateChanged(bytes8,uint8,uint8,uint256)": TypedContractEvent<
      OrganizationStateChangedEvent.InputTuple,
      OrganizationStateChangedEvent.OutputTuple,
      OrganizationStateChangedEvent.OutputObject
    >;
    OrganizationStateChanged: TypedContractEvent<
      OrganizationStateChangedEvent.InputTuple,
      OrganizationStateChangedEvent.OutputTuple,
      OrganizationStateChangedEvent.OutputObject
    >;

    "Paused(address)": TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;
    Paused: TypedContractEvent<
      PausedEvent.InputTuple,
      PausedEvent.OutputTuple,
      PausedEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "StakeWithdrawn(bytes8,address,uint256,uint256)": TypedContractEvent<
      StakeWithdrawnEvent.InputTuple,
      StakeWithdrawnEvent.OutputTuple,
      StakeWithdrawnEvent.OutputObject
    >;
    StakeWithdrawn: TypedContractEvent<
      StakeWithdrawnEvent.InputTuple,
      StakeWithdrawnEvent.OutputTuple,
      StakeWithdrawnEvent.OutputObject
    >;

    "Unpaused(address)": TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
    Unpaused: TypedContractEvent<
      UnpausedEvent.InputTuple,
      UnpausedEvent.OutputTuple,
      UnpausedEvent.OutputObject
    >;
  };
}
