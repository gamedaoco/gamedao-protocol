/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Module",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Module__factory>;
    getContractFactory(
      name: "Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Registry__factory>;
    getContractFactory(
      name: "Treasury",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Treasury__factory>;
    getContractFactory(
      name: "IControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IControl__factory>;
    getContractFactory(
      name: "IFlow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFlow__factory>;
    getContractFactory(
      name: "IGameToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGameToken__factory>;
    getContractFactory(
      name: "IIdentity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IIdentity__factory>;
    getContractFactory(
      name: "IMembership",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMembership__factory>;
    getContractFactory(
      name: "IModule",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IModule__factory>;
    getContractFactory(
      name: "IRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRegistry__factory>;
    getContractFactory(
      name: "ISense",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISense__factory>;
    getContractFactory(
      name: "ISignal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISignal__factory>;
    getContractFactory(
      name: "IStaking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IStaking__factory>;
    getContractFactory(
      name: "AlphanumericID",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlphanumericID__factory>;
    getContractFactory(
      name: "MockGameToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockGameToken__factory>;
    getContractFactory(
      name: "MockUSDC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockUSDC__factory>;
    getContractFactory(
      name: "Control",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Control__factory>;
    getContractFactory(
      name: "Factory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Factory__factory>;
    getContractFactory(
      name: "OrganizationFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OrganizationFactory__factory>;
    getContractFactory(
      name: "Flow",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Flow__factory>;
    getContractFactory(
      name: "Identity",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Identity__factory>;
    getContractFactory(
      name: "Membership",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Membership__factory>;
    getContractFactory(
      name: "Sense",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Sense__factory>;
    getContractFactory(
      name: "Signal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Signal__factory>;
    getContractFactory(
      name: "Staking",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Staking__factory>;
    getContractFactory(
      name: "AlphanumericIDTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AlphanumericIDTest__factory>;
    getContractFactory(
      name: "GameToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GameToken__factory>;

    getContractAt(
      name: "AccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Pausable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20Permit",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Module",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Module>;
    getContractAt(
      name: "Registry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Registry>;
    getContractAt(
      name: "Treasury",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Treasury>;
    getContractAt(
      name: "IControl",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IControl>;
    getContractAt(
      name: "IFlow",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IFlow>;
    getContractAt(
      name: "IGameToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IGameToken>;
    getContractAt(
      name: "IIdentity",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IIdentity>;
    getContractAt(
      name: "IMembership",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IMembership>;
    getContractAt(
      name: "IModule",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IModule>;
    getContractAt(
      name: "IRegistry",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IRegistry>;
    getContractAt(
      name: "ISense",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISense>;
    getContractAt(
      name: "ISignal",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISignal>;
    getContractAt(
      name: "IStaking",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IStaking>;
    getContractAt(
      name: "AlphanumericID",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AlphanumericID>;
    getContractAt(
      name: "MockGameToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockGameToken>;
    getContractAt(
      name: "MockUSDC",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockUSDC>;
    getContractAt(
      name: "Control",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Control>;
    getContractAt(
      name: "Factory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Factory>;
    getContractAt(
      name: "OrganizationFactory",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OrganizationFactory>;
    getContractAt(
      name: "Flow",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Flow>;
    getContractAt(
      name: "Identity",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Identity>;
    getContractAt(
      name: "Membership",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Membership>;
    getContractAt(
      name: "Sense",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Sense>;
    getContractAt(
      name: "Signal",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Signal>;
    getContractAt(
      name: "Staking",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Staking>;
    getContractAt(
      name: "AlphanumericIDTest",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AlphanumericIDTest>;
    getContractAt(
      name: "GameToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GameToken>;

    deployContract(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Module",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Module>;
    deployContract(
      name: "Registry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Registry>;
    deployContract(
      name: "Treasury",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Treasury>;
    deployContract(
      name: "IControl",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IControl>;
    deployContract(
      name: "IFlow",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFlow>;
    deployContract(
      name: "IGameToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGameToken>;
    deployContract(
      name: "IIdentity",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIdentity>;
    deployContract(
      name: "IMembership",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMembership>;
    deployContract(
      name: "IModule",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IModule>;
    deployContract(
      name: "IRegistry",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRegistry>;
    deployContract(
      name: "ISense",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISense>;
    deployContract(
      name: "ISignal",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISignal>;
    deployContract(
      name: "IStaking",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStaking>;
    deployContract(
      name: "AlphanumericID",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AlphanumericID>;
    deployContract(
      name: "MockGameToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockGameToken>;
    deployContract(
      name: "MockUSDC",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockUSDC>;
    deployContract(
      name: "Control",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Control>;
    deployContract(
      name: "Factory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Factory>;
    deployContract(
      name: "OrganizationFactory",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrganizationFactory>;
    deployContract(
      name: "Flow",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Flow>;
    deployContract(
      name: "Identity",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Identity>;
    deployContract(
      name: "Membership",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Membership>;
    deployContract(
      name: "Sense",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Sense>;
    deployContract(
      name: "Signal",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Signal>;
    deployContract(
      name: "Staking",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Staking>;
    deployContract(
      name: "AlphanumericIDTest",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AlphanumericIDTest>;
    deployContract(
      name: "GameToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GameToken>;

    deployContract(
      name: "AccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AccessControl>;
    deployContract(
      name: "IAccessControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IAccessControl>;
    deployContract(
      name: "Pausable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Pausable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20Permit",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Permit>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "Module",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Module>;
    deployContract(
      name: "Registry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Registry>;
    deployContract(
      name: "Treasury",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Treasury>;
    deployContract(
      name: "IControl",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IControl>;
    deployContract(
      name: "IFlow",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IFlow>;
    deployContract(
      name: "IGameToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IGameToken>;
    deployContract(
      name: "IIdentity",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IIdentity>;
    deployContract(
      name: "IMembership",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IMembership>;
    deployContract(
      name: "IModule",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IModule>;
    deployContract(
      name: "IRegistry",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IRegistry>;
    deployContract(
      name: "ISense",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISense>;
    deployContract(
      name: "ISignal",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISignal>;
    deployContract(
      name: "IStaking",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IStaking>;
    deployContract(
      name: "AlphanumericID",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AlphanumericID>;
    deployContract(
      name: "MockGameToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockGameToken>;
    deployContract(
      name: "MockUSDC",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockUSDC>;
    deployContract(
      name: "Control",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Control>;
    deployContract(
      name: "Factory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Factory>;
    deployContract(
      name: "OrganizationFactory",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OrganizationFactory>;
    deployContract(
      name: "Flow",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Flow>;
    deployContract(
      name: "Identity",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Identity>;
    deployContract(
      name: "Membership",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Membership>;
    deployContract(
      name: "Sense",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Sense>;
    deployContract(
      name: "Signal",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Signal>;
    deployContract(
      name: "Staking",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Staking>;
    deployContract(
      name: "AlphanumericIDTest",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AlphanumericIDTest>;
    deployContract(
      name: "GameToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GameToken>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
