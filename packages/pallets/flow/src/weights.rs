// This file is part of Substrate.

// Copyright (C) 2021 Parity Technologies (UK) Ltd.
// SPDX-License-Identifier: Apache-2.0

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

//! Autogenerated weights for gamedao_flow
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-08-12, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/subzero
// benchmark
// pallet
// --pallet=gamedao_flow
// --extrinsic=*
// --steps=20
// --repeat=10
// --output=gamedao-protocol/flow/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for gamedao_flow.
pub trait WeightInfo {
	fn create_campaign() -> Weight;
	fn contribute() -> Weight;
	fn on_initialize(c: u32, p: u32, ) -> Weight;
}

/// Weights for gamedao_flow using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Control OrgController (r:1 w:0)
	// Storage: Flow CampaignCount (r:1 w:1)
	// Storage: Flow CampaignsByBlock (r:2 w:2)
	// Storage: Control OrgTreasury (r:1 w:0)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Flow CampaignOf (r:0 w:1)
	// Storage: Flow CampaignStates (r:0 w:1)
	fn create_campaign() -> Weight {
		(41_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(6 as Weight))
	}
	// Storage: Flow CampaignOf (r:1 w:0)
	// Storage: Flow CampaignStates (r:1 w:0)
	// Storage: Flow CampaignContribution (r:1 w:1)
	// Storage: Flow CampaignContributorsCount (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Flow CampaignBalance (r:1 w:1)
	fn contribute() -> Weight {
		(37_000_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(6 as Weight))
			.saturating_add(T::DbWeight::get().writes(4 as Weight))
	}
	// Storage: Flow CampaignsByBlock (r:1 w:0)
	// Storage: Flow CampaignStates (r:10 w:11)
	// Storage: Flow CampaignFinalizationQueue (r:2 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Flow CampaignContribution (r:5 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Flow CampaignBalance (r:0 w:1)
	fn on_initialize(c: u32, p: u32, ) -> Weight {
		(32_693_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((15_609_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 585_000
			.saturating_add((6_409_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(T::DbWeight::get().reads(5 as Weight))
			.saturating_add(T::DbWeight::get().reads((2 as Weight).saturating_mul(c as Weight)))
			.saturating_add(T::DbWeight::get().reads((1 as Weight).saturating_mul(p as Weight)))
			.saturating_add(T::DbWeight::get().writes(5 as Weight))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(c as Weight)))
			.saturating_add(T::DbWeight::get().writes((1 as Weight).saturating_mul(p as Weight)))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Control OrgController (r:1 w:0)
	// Storage: Flow CampaignCount (r:1 w:1)
	// Storage: Flow CampaignsByBlock (r:2 w:2)
	// Storage: Control OrgTreasury (r:1 w:0)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Flow CampaignOf (r:0 w:1)
	// Storage: Flow CampaignStates (r:0 w:1)
	fn create_campaign() -> Weight {
		(41_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(6 as Weight))
	}
	// Storage: Flow CampaignOf (r:1 w:0)
	// Storage: Flow CampaignStates (r:1 w:0)
	// Storage: Flow CampaignContribution (r:1 w:1)
	// Storage: Flow CampaignContributorsCount (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Flow CampaignBalance (r:1 w:1)
	fn contribute() -> Weight {
		(37_000_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(6 as Weight))
			.saturating_add(RocksDbWeight::get().writes(4 as Weight))
	}
	// Storage: Flow CampaignsByBlock (r:1 w:0)
	// Storage: Flow CampaignStates (r:10 w:11)
	// Storage: Flow CampaignFinalizationQueue (r:2 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Flow CampaignContribution (r:5 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Flow CampaignBalance (r:0 w:1)
	fn on_initialize(c: u32, p: u32, ) -> Weight {
		(32_693_000 as Weight)
			// Standard Error: 51_000
			.saturating_add((15_609_000 as Weight).saturating_mul(c as Weight))
			// Standard Error: 585_000
			.saturating_add((6_409_000 as Weight).saturating_mul(p as Weight))
			.saturating_add(RocksDbWeight::get().reads(5 as Weight))
			.saturating_add(RocksDbWeight::get().reads((2 as Weight).saturating_mul(c as Weight)))
			.saturating_add(RocksDbWeight::get().reads((1 as Weight).saturating_mul(p as Weight)))
			.saturating_add(RocksDbWeight::get().writes(5 as Weight))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(c as Weight)))
			.saturating_add(RocksDbWeight::get().writes((1 as Weight).saturating_mul(p as Weight)))
	}
}
