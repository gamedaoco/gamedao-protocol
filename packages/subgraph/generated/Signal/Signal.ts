// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ConvictionDecayApplied extends ethereum.Event {
  get params(): ConvictionDecayApplied__Params {
    return new ConvictionDecayApplied__Params(this);
  }
}

export class ConvictionDecayApplied__Params {
  _event: ConvictionDecayApplied;

  constructor(event: ConvictionDecayApplied) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oldPower(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get newPower(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class ModuleDisabled extends ethereum.Event {
  get params(): ModuleDisabled__Params {
    return new ModuleDisabled__Params(this);
  }
}

export class ModuleDisabled__Params {
  _event: ModuleDisabled;

  constructor(event: ModuleDisabled) {
    this._event = event;
  }
}

export class ModuleEnabled extends ethereum.Event {
  get params(): ModuleEnabled__Params {
    return new ModuleEnabled__Params(this);
  }
}

export class ModuleEnabled__Params {
  _event: ModuleEnabled;

  constructor(event: ModuleEnabled) {
    this._event = event;
  }
}

export class ModuleInitialized extends ethereum.Event {
  get params(): ModuleInitialized__Params {
    return new ModuleInitialized__Params(this);
  }
}

export class ModuleInitialized__Params {
  _event: ModuleInitialized;

  constructor(event: ModuleInitialized) {
    this._event = event;
  }

  get registry(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ProposalCancelled extends ethereum.Event {
  get params(): ProposalCancelled__Params {
    return new ProposalCancelled__Params(this);
  }
}

export class ProposalCancelled__Params {
  _event: ProposalCancelled;

  constructor(event: ProposalCancelled) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get canceller(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ProposalCreated extends ethereum.Event {
  get params(): ProposalCreated__Params {
    return new ProposalCreated__Params(this);
  }
}

export class ProposalCreated__Params {
  _event: ProposalCreated;

  constructor(event: ProposalCreated) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get organizationId(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get proposer(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get title(): string {
    return this._event.parameters[3].value.toString();
  }

  get proposalType(): i32 {
    return this._event.parameters[4].value.toI32();
  }

  get votingType(): i32 {
    return this._event.parameters[5].value.toI32();
  }

  get votingPower(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get startTime(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get endTime(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[9].value.toBigInt();
  }
}

export class ProposalExecuted extends ethereum.Event {
  get params(): ProposalExecuted__Params {
    return new ProposalExecuted__Params(this);
  }
}

export class ProposalExecuted__Params {
  _event: ProposalExecuted;

  constructor(event: ProposalExecuted) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get success(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }

  get returnData(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ProposalQueued extends ethereum.Event {
  get params(): ProposalQueued__Params {
    return new ProposalQueued__Params(this);
  }
}

export class ProposalQueued__Params {
  _event: ProposalQueued;

  constructor(event: ProposalQueued) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get executionTime(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ProposalStateChanged extends ethereum.Event {
  get params(): ProposalStateChanged__Params {
    return new ProposalStateChanged__Params(this);
  }
}

export class ProposalStateChanged__Params {
  _event: ProposalStateChanged;

  constructor(event: ProposalStateChanged) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get oldState(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get newState(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ProposalUpdated extends ethereum.Event {
  get params(): ProposalUpdated__Params {
    return new ProposalUpdated__Params(this);
  }
}

export class ProposalUpdated__Params {
  _event: ProposalUpdated;

  constructor(event: ProposalUpdated) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get title(): string {
    return this._event.parameters[1].value.toString();
  }

  get description(): string {
    return this._event.parameters[2].value.toString();
  }

  get endTime(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class VoteCast extends ethereum.Event {
  get params(): VoteCast__Params {
    return new VoteCast__Params(this);
  }
}

export class VoteCast__Params {
  _event: VoteCast;

  constructor(event: VoteCast) {
    this._event = event;
  }

  get proposalId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get voter(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get choice(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get votingPower(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get reason(): string {
    return this._event.parameters[4].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class VotingParametersUpdated extends ethereum.Event {
  get params(): VotingParametersUpdated__Params {
    return new VotingParametersUpdated__Params(this);
  }
}

export class VotingParametersUpdated__Params {
  _event: VotingParametersUpdated;

  constructor(event: VotingParametersUpdated) {
    this._event = event;
  }

  get organizationId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get votingDelay(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get votingPeriod(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get executionDelay(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get quorumThreshold(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get proposalThreshold(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class VotingPowerDelegated extends ethereum.Event {
  get params(): VotingPowerDelegated__Params {
    return new VotingPowerDelegated__Params(this);
  }
}

export class VotingPowerDelegated__Params {
  _event: VotingPowerDelegated;

  constructor(event: VotingPowerDelegated) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegatee(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class VotingPowerUndelegated extends ethereum.Event {
  get params(): VotingPowerUndelegated__Params {
    return new VotingPowerUndelegated__Params(this);
  }
}

export class VotingPowerUndelegated__Params {
  _event: VotingPowerUndelegated;

  constructor(event: VotingPowerUndelegated) {
    this._event = event;
  }

  get delegator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get delegatee(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Signal__getDefaultVotingParametersResultValue0Struct extends ethereum.Tuple {
  get votingDelay(): BigInt {
    return this[0].toBigInt();
  }

  get votingPeriod(): BigInt {
    return this[1].toBigInt();
  }

  get executionDelay(): BigInt {
    return this[2].toBigInt();
  }

  get quorumThreshold(): BigInt {
    return this[3].toBigInt();
  }

  get proposalThreshold(): BigInt {
    return this[4].toBigInt();
  }

  get requireMembership(): boolean {
    return this[5].toBoolean();
  }
}

export class Signal__getDelegationsResultValue0Struct extends ethereum.Tuple {
  get delegator(): Address {
    return this[0].toAddress();
  }

  get delegatee(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }

  get active(): boolean {
    return this[4].toBoolean();
  }
}

export class Signal__getProposalResultValue0Struct extends ethereum.Tuple {
  get index(): BigInt {
    return this[0].toBigInt();
  }

  get proposalId(): Bytes {
    return this[1].toBytes();
  }

  get organizationId(): Bytes {
    return this[2].toBytes();
  }

  get proposer(): Address {
    return this[3].toAddress();
  }

  get title(): string {
    return this[4].toString();
  }

  get description(): string {
    return this[5].toString();
  }

  get metadataURI(): string {
    return this[6].toString();
  }

  get proposalType(): i32 {
    return this[7].toI32();
  }

  get votingType(): i32 {
    return this[8].toI32();
  }

  get votingPower(): i32 {
    return this[9].toI32();
  }

  get state(): i32 {
    return this[10].toI32();
  }

  get startTime(): BigInt {
    return this[11].toBigInt();
  }

  get endTime(): BigInt {
    return this[12].toBigInt();
  }

  get executionTime(): BigInt {
    return this[13].toBigInt();
  }

  get createdAt(): BigInt {
    return this[14].toBigInt();
  }

  get updatedAt(): BigInt {
    return this[15].toBigInt();
  }

  get executionData(): Bytes {
    return this[16].toBytes();
  }

  get targetContract(): Address {
    return this[17].toAddress();
  }

  get requiredQuorum(): BigInt {
    return this[18].toBigInt();
  }

  get votesFor(): BigInt {
    return this[19].toBigInt();
  }

  get votesAgainst(): BigInt {
    return this[20].toBigInt();
  }

  get votesAbstain(): BigInt {
    return this[21].toBigInt();
  }

  get totalVotingPower(): BigInt {
    return this[22].toBigInt();
  }

  get executed(): boolean {
    return this[23].toBoolean();
  }

  get cancelled(): boolean {
    return this[24].toBoolean();
  }
}

export class Signal__getProposalResultResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getPassed(): boolean {
    return this.value0;
  }

  getForVotes(): BigInt {
    return this.value1;
  }

  getAgainstVotes(): BigInt {
    return this.value2;
  }

  getAbstainVotes(): BigInt {
    return this.value3;
  }

  getQuorum(): BigInt {
    return this.value4;
  }
}

export class Signal__getProposalVotesResultVotesStruct extends ethereum.Tuple {
  get voter(): Address {
    return this[0].toAddress();
  }

  get choice(): i32 {
    return this[1].toI32();
  }

  get votingPower(): BigInt {
    return this[2].toBigInt();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }

  get reason(): string {
    return this[4].toString();
  }

  get convictionTime(): BigInt {
    return this[5].toBigInt();
  }
}

export class Signal__getProposalVotesResult {
  value0: Array<Address>;
  value1: Array<Signal__getProposalVotesResultVotesStruct>;

  constructor(
    value0: Array<Address>,
    value1: Array<Signal__getProposalVotesResultVotesStruct>
  ) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddressArray(this.value0));
    map.set("value1", ethereum.Value.fromTupleArray(this.value1));
    return map;
  }

  getVoters(): Array<Address> {
    return this.value0;
  }

  getVotes(): Array<Signal__getProposalVotesResultVotesStruct> {
    return this.value1;
  }
}

export class Signal__getVoteResultValue0Struct extends ethereum.Tuple {
  get voter(): Address {
    return this[0].toAddress();
  }

  get choice(): i32 {
    return this[1].toI32();
  }

  get votingPower(): BigInt {
    return this[2].toBigInt();
  }

  get timestamp(): BigInt {
    return this[3].toBigInt();
  }

  get reason(): string {
    return this[4].toString();
  }

  get convictionTime(): BigInt {
    return this[5].toBigInt();
  }
}

export class Signal__getVotingParametersResultValue0Struct extends ethereum.Tuple {
  get votingDelay(): BigInt {
    return this[0].toBigInt();
  }

  get votingPeriod(): BigInt {
    return this[1].toBigInt();
  }

  get executionDelay(): BigInt {
    return this[2].toBigInt();
  }

  get quorumThreshold(): BigInt {
    return this[3].toBigInt();
  }

  get proposalThreshold(): BigInt {
    return this[4].toBigInt();
  }

  get requireMembership(): boolean {
    return this[5].toBoolean();
  }
}

export class Signal__previewProposalExecutionResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getSuccess(): boolean {
    return this.value0;
  }

  getReturnData(): Bytes {
    return this.value1;
  }
}

export class Signal extends ethereum.SmartContract {
  static bind(address: Address): Signal {
    return new Signal("Signal", address);
  }

  ADMIN_ROLE(): Bytes {
    let result = super.call("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  BASIS_POINTS(): BigInt {
    let result = super.call("BASIS_POINTS", "BASIS_POINTS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASIS_POINTS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASIS_POINTS", "BASIS_POINTS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  CONVICTION_MULTIPLIER_BASE(): BigInt {
    let result = super.call(
      "CONVICTION_MULTIPLIER_BASE",
      "CONVICTION_MULTIPLIER_BASE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_CONVICTION_MULTIPLIER_BASE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "CONVICTION_MULTIPLIER_BASE",
      "CONVICTION_MULTIPLIER_BASE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  EXECUTOR_ROLE(): Bytes {
    let result = super.call("EXECUTOR_ROLE", "EXECUTOR_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_EXECUTOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "EXECUTOR_ROLE",
      "EXECUTOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAX_EXECUTION_DELAY(): BigInt {
    let result = super.call(
      "MAX_EXECUTION_DELAY",
      "MAX_EXECUTION_DELAY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_EXECUTION_DELAY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_EXECUTION_DELAY",
      "MAX_EXECUTION_DELAY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_QUORUM_THRESHOLD(): BigInt {
    let result = super.call(
      "MAX_QUORUM_THRESHOLD",
      "MAX_QUORUM_THRESHOLD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_QUORUM_THRESHOLD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_QUORUM_THRESHOLD",
      "MAX_QUORUM_THRESHOLD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MAX_VOTING_PERIOD(): BigInt {
    let result = super.call(
      "MAX_VOTING_PERIOD",
      "MAX_VOTING_PERIOD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_VOTING_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_VOTING_PERIOD",
      "MAX_VOTING_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_VOTING_PERIOD(): BigInt {
    let result = super.call(
      "MIN_VOTING_PERIOD",
      "MIN_VOTING_PERIOD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_VOTING_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_VOTING_PERIOD",
      "MIN_VOTING_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  OPERATOR_ROLE(): Bytes {
    let result = super.call("OPERATOR_ROLE", "OPERATOR_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_OPERATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "OPERATOR_ROLE",
      "OPERATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  PROPOSAL_CREATOR_ROLE(): Bytes {
    let result = super.call(
      "PROPOSAL_CREATOR_ROLE",
      "PROPOSAL_CREATOR_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_PROPOSAL_CREATOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PROPOSAL_CREATOR_ROLE",
      "PROPOSAL_CREATOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SIGNAL_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "SIGNAL_ADMIN_ROLE",
      "SIGNAL_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_SIGNAL_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "SIGNAL_ADMIN_ROLE",
      "SIGNAL_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  calculateConvictionMultiplier(convictionTime: BigInt): BigInt {
    let result = super.call(
      "calculateConvictionMultiplier",
      "calculateConvictionMultiplier(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(convictionTime)]
    );

    return result[0].toBigInt();
  }

  try_calculateConvictionMultiplier(
    convictionTime: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateConvictionMultiplier",
      "calculateConvictionMultiplier(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(convictionTime)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  calculateVotingPower(
    proposalId: Bytes,
    voter: Address,
    powerType: i32
  ): BigInt {
    let result = super.call(
      "calculateVotingPower",
      "calculateVotingPower(bytes32,address,uint8):(uint256)",
      [
        ethereum.Value.fromFixedBytes(proposalId),
        ethereum.Value.fromAddress(voter),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(powerType))
      ]
    );

    return result[0].toBigInt();
  }

  try_calculateVotingPower(
    proposalId: Bytes,
    voter: Address,
    powerType: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "calculateVotingPower",
      "calculateVotingPower(bytes32,address,uint8):(uint256)",
      [
        ethereum.Value.fromFixedBytes(proposalId),
        ethereum.Value.fromAddress(voter),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(powerType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  canExecute(proposalId: Bytes): boolean {
    let result = super.call("canExecute", "canExecute(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(proposalId)
    ]);

    return result[0].toBoolean();
  }

  try_canExecute(proposalId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall("canExecute", "canExecute(bytes32):(bool)", [
      ethereum.Value.fromFixedBytes(proposalId)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  canVote(proposalId: Bytes, voter: Address): boolean {
    let result = super.call("canVote", "canVote(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(proposalId),
      ethereum.Value.fromAddress(voter)
    ]);

    return result[0].toBoolean();
  }

  try_canVote(proposalId: Bytes, voter: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("canVote", "canVote(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(proposalId),
      ethereum.Value.fromAddress(voter)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  createProposal(
    organizationId: Bytes,
    title: string,
    description: string,
    metadataURI: string,
    proposalType: i32,
    votingType: i32,
    votingPower: i32,
    votingPeriod: BigInt,
    executionData: Bytes,
    targetContract: Address
  ): Bytes {
    let result = super.call(
      "createProposal",
      "createProposal(bytes8,string,string,string,uint8,uint8,uint8,uint256,bytes,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(organizationId),
        ethereum.Value.fromString(title),
        ethereum.Value.fromString(description),
        ethereum.Value.fromString(metadataURI),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(proposalType)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(votingType)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(votingPower)),
        ethereum.Value.fromUnsignedBigInt(votingPeriod),
        ethereum.Value.fromBytes(executionData),
        ethereum.Value.fromAddress(targetContract)
      ]
    );

    return result[0].toBytes();
  }

  try_createProposal(
    organizationId: Bytes,
    title: string,
    description: string,
    metadataURI: string,
    proposalType: i32,
    votingType: i32,
    votingPower: i32,
    votingPeriod: BigInt,
    executionData: Bytes,
    targetContract: Address
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "createProposal",
      "createProposal(bytes8,string,string,string,uint8,uint8,uint8,uint256,bytes,address):(bytes32)",
      [
        ethereum.Value.fromFixedBytes(organizationId),
        ethereum.Value.fromString(title),
        ethereum.Value.fromString(description),
        ethereum.Value.fromString(metadataURI),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(proposalType)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(votingType)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(votingPower)),
        ethereum.Value.fromUnsignedBigInt(votingPeriod),
        ethereum.Value.fromBytes(executionData),
        ethereum.Value.fromAddress(targetContract)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  estimateGasForExecution(proposalId: Bytes): BigInt {
    let result = super.call(
      "estimateGasForExecution",
      "estimateGasForExecution(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );

    return result[0].toBigInt();
  }

  try_estimateGasForExecution(proposalId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateGasForExecution",
      "estimateGasForExecution(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getActiveProposals(): Array<Bytes> {
    let result = super.call(
      "getActiveProposals",
      "getActiveProposals():(bytes32[])",
      []
    );

    return result[0].toBytesArray();
  }

  try_getActiveProposals(): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getActiveProposals",
      "getActiveProposals():(bytes32[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getDefaultVotingParameters(): Signal__getDefaultVotingParametersResultValue0Struct {
    let result = super.call(
      "getDefaultVotingParameters",
      "getDefaultVotingParameters():((uint256,uint256,uint256,uint256,uint256,bool))",
      []
    );

    return changetype<Signal__getDefaultVotingParametersResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getDefaultVotingParameters(): ethereum.CallResult<
    Signal__getDefaultVotingParametersResultValue0Struct
  > {
    let result = super.tryCall(
      "getDefaultVotingParameters",
      "getDefaultVotingParameters():((uint256,uint256,uint256,uint256,uint256,bool))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Signal__getDefaultVotingParametersResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getDelegatedVotingPower(delegator: Address): BigInt {
    let result = super.call(
      "getDelegatedVotingPower",
      "getDelegatedVotingPower(address):(uint256)",
      [ethereum.Value.fromAddress(delegator)]
    );

    return result[0].toBigInt();
  }

  try_getDelegatedVotingPower(delegator: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDelegatedVotingPower",
      "getDelegatedVotingPower(address):(uint256)",
      [ethereum.Value.fromAddress(delegator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDelegations(
    delegator: Address
  ): Array<Signal__getDelegationsResultValue0Struct> {
    let result = super.call(
      "getDelegations",
      "getDelegations(address):((address,address,uint256,uint256,bool)[])",
      [ethereum.Value.fromAddress(delegator)]
    );

    return result[0].toTupleArray<Signal__getDelegationsResultValue0Struct>();
  }

  try_getDelegations(
    delegator: Address
  ): ethereum.CallResult<Array<Signal__getDelegationsResultValue0Struct>> {
    let result = super.tryCall(
      "getDelegations",
      "getDelegations(address):((address,address,uint256,uint256,bool)[])",
      [ethereum.Value.fromAddress(delegator)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Signal__getDelegationsResultValue0Struct>()
    );
  }

  getExecutionETA(proposalId: Bytes): BigInt {
    let result = super.call(
      "getExecutionETA",
      "getExecutionETA(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );

    return result[0].toBigInt();
  }

  try_getExecutionETA(proposalId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getExecutionETA",
      "getExecutionETA(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProposal(proposalId: Bytes): Signal__getProposalResultValue0Struct {
    let result = super.call(
      "getProposal",
      "getProposal(bytes32):((uint256,bytes32,bytes8,address,string,string,string,uint8,uint8,uint8,uint8,uint256,uint256,uint256,uint256,uint256,bytes,address,uint256,uint256,uint256,uint256,uint256,bool,bool))",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );

    return changetype<Signal__getProposalResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getProposal(
    proposalId: Bytes
  ): ethereum.CallResult<Signal__getProposalResultValue0Struct> {
    let result = super.tryCall(
      "getProposal",
      "getProposal(bytes32):((uint256,bytes32,bytes8,address,string,string,string,uint8,uint8,uint8,uint8,uint256,uint256,uint256,uint256,uint256,bytes,address,uint256,uint256,uint256,uint256,uint256,bool,bool))",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Signal__getProposalResultValue0Struct>(value[0].toTuple())
    );
  }

  getProposalCount(): BigInt {
    let result = super.call(
      "getProposalCount",
      "getProposalCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getProposalCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getProposalCount",
      "getProposalCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getProposalResult(proposalId: Bytes): Signal__getProposalResultResult {
    let result = super.call(
      "getProposalResult",
      "getProposalResult(bytes32):(bool,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );

    return new Signal__getProposalResultResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_getProposalResult(
    proposalId: Bytes
  ): ethereum.CallResult<Signal__getProposalResultResult> {
    let result = super.tryCall(
      "getProposalResult",
      "getProposalResult(bytes32):(bool,uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Signal__getProposalResultResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  getProposalVotes(proposalId: Bytes): Signal__getProposalVotesResult {
    let result = super.call(
      "getProposalVotes",
      "getProposalVotes(bytes32):(address[],(address,uint8,uint256,uint256,string,uint256)[])",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );

    return new Signal__getProposalVotesResult(
      result[0].toAddressArray(),
      result[1].toTupleArray<Signal__getProposalVotesResultVotesStruct>()
    );
  }

  try_getProposalVotes(
    proposalId: Bytes
  ): ethereum.CallResult<Signal__getProposalVotesResult> {
    let result = super.tryCall(
      "getProposalVotes",
      "getProposalVotes(bytes32):(address[],(address,uint8,uint256,uint256,string,uint256)[])",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Signal__getProposalVotesResult(
        value[0].toAddressArray(),
        value[1].toTupleArray<Signal__getProposalVotesResultVotesStruct>()
      )
    );
  }

  getProposalsByOrganization(organizationId: Bytes): Array<Bytes> {
    let result = super.call(
      "getProposalsByOrganization",
      "getProposalsByOrganization(bytes8):(bytes32[])",
      [ethereum.Value.fromFixedBytes(organizationId)]
    );

    return result[0].toBytesArray();
  }

  try_getProposalsByOrganization(
    organizationId: Bytes
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getProposalsByOrganization",
      "getProposalsByOrganization(bytes8):(bytes32[])",
      [ethereum.Value.fromFixedBytes(organizationId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getProposalsByState(state: i32): Array<Bytes> {
    let result = super.call(
      "getProposalsByState",
      "getProposalsByState(uint8):(bytes32[])",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(state))]
    );

    return result[0].toBytesArray();
  }

  try_getProposalsByState(state: i32): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getProposalsByState",
      "getProposalsByState(uint8):(bytes32[])",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(state))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  getQuorumReached(proposalId: Bytes): boolean {
    let result = super.call(
      "getQuorumReached",
      "getQuorumReached(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );

    return result[0].toBoolean();
  }

  try_getQuorumReached(proposalId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "getQuorumReached",
      "getQuorumReached(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getTimeRemaining(proposalId: Bytes): BigInt {
    let result = super.call(
      "getTimeRemaining",
      "getTimeRemaining(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );

    return result[0].toBigInt();
  }

  try_getTimeRemaining(proposalId: Bytes): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTimeRemaining",
      "getTimeRemaining(bytes32):(uint256)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getVote(
    proposalId: Bytes,
    voter: Address
  ): Signal__getVoteResultValue0Struct {
    let result = super.call(
      "getVote",
      "getVote(bytes32,address):((address,uint8,uint256,uint256,string,uint256))",
      [
        ethereum.Value.fromFixedBytes(proposalId),
        ethereum.Value.fromAddress(voter)
      ]
    );

    return changetype<Signal__getVoteResultValue0Struct>(result[0].toTuple());
  }

  try_getVote(
    proposalId: Bytes,
    voter: Address
  ): ethereum.CallResult<Signal__getVoteResultValue0Struct> {
    let result = super.tryCall(
      "getVote",
      "getVote(bytes32,address):((address,uint8,uint256,uint256,string,uint256))",
      [
        ethereum.Value.fromFixedBytes(proposalId),
        ethereum.Value.fromAddress(voter)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Signal__getVoteResultValue0Struct>(value[0].toTuple())
    );
  }

  getVotingParameters(
    organizationId: Bytes
  ): Signal__getVotingParametersResultValue0Struct {
    let result = super.call(
      "getVotingParameters",
      "getVotingParameters(bytes8):((uint256,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromFixedBytes(organizationId)]
    );

    return changetype<Signal__getVotingParametersResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getVotingParameters(
    organizationId: Bytes
  ): ethereum.CallResult<Signal__getVotingParametersResultValue0Struct> {
    let result = super.tryCall(
      "getVotingParameters",
      "getVotingParameters(bytes8):((uint256,uint256,uint256,uint256,uint256,bool))",
      [ethereum.Value.fromFixedBytes(organizationId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Signal__getVotingParametersResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getVotingPower(proposalId: Bytes, voter: Address): BigInt {
    let result = super.call(
      "getVotingPower",
      "getVotingPower(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(proposalId),
        ethereum.Value.fromAddress(voter)
      ]
    );

    return result[0].toBigInt();
  }

  try_getVotingPower(
    proposalId: Bytes,
    voter: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getVotingPower",
      "getVotingPower(bytes32,address):(uint256)",
      [
        ethereum.Value.fromFixedBytes(proposalId),
        ethereum.Value.fromAddress(voter)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  hasVoted(proposalId: Bytes, voter: Address): boolean {
    let result = super.call("hasVoted", "hasVoted(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(proposalId),
      ethereum.Value.fromAddress(voter)
    ]);

    return result[0].toBoolean();
  }

  try_hasVoted(
    proposalId: Bytes,
    voter: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasVoted", "hasVoted(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(proposalId),
      ethereum.Value.fromAddress(voter)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isInitialized(): boolean {
    let result = super.call("isInitialized", "isInitialized():(bool)", []);

    return result[0].toBoolean();
  }

  try_isInitialized(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isInitialized", "isInitialized():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isProposalActive(proposalId: Bytes): boolean {
    let result = super.call(
      "isProposalActive",
      "isProposalActive(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );

    return result[0].toBoolean();
  }

  try_isProposalActive(proposalId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isProposalActive",
      "isProposalActive(bytes32):(bool)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  moduleId(): Bytes {
    let result = super.call("moduleId", "moduleId():(bytes32)", []);

    return result[0].toBytes();
  }

  try_moduleId(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("moduleId", "moduleId():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  previewProposalExecution(
    proposalId: Bytes
  ): Signal__previewProposalExecutionResult {
    let result = super.call(
      "previewProposalExecution",
      "previewProposalExecution(bytes32):(bool,bytes)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );

    return new Signal__previewProposalExecutionResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_previewProposalExecution(
    proposalId: Bytes
  ): ethereum.CallResult<Signal__previewProposalExecutionResult> {
    let result = super.tryCall(
      "previewProposalExecution",
      "previewProposalExecution(bytes32):(bool,bytes)",
      [ethereum.Value.fromFixedBytes(proposalId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Signal__previewProposalExecutionResult(
        value[0].toBoolean(),
        value[1].toBytes()
      )
    );
  }

  registry(): Address {
    let result = super.call("registry", "registry():(address)", []);

    return result[0].toAddress();
  }

  try_registry(): ethereum.CallResult<Address> {
    let result = super.tryCall("registry", "registry():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  validateProposalParameters(
    organizationId: Bytes,
    param1: i32,
    param2: i32,
    param3: i32,
    votingPeriod: BigInt
  ): boolean {
    let result = super.call(
      "validateProposalParameters",
      "validateProposalParameters(bytes8,uint8,uint8,uint8,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(organizationId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param2)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param3)),
        ethereum.Value.fromUnsignedBigInt(votingPeriod)
      ]
    );

    return result[0].toBoolean();
  }

  try_validateProposalParameters(
    organizationId: Bytes,
    param1: i32,
    param2: i32,
    param3: i32,
    votingPeriod: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "validateProposalParameters",
      "validateProposalParameters(bytes8,uint8,uint8,uint8,uint256):(bool)",
      [
        ethereum.Value.fromFixedBytes(organizationId),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param2)),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param3)),
        ethereum.Value.fromUnsignedBigInt(votingPeriod)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  version(): string {
    let result = super.call("version", "version():(string)", []);

    return result[0].toString();
  }

  try_version(): ethereum.CallResult<string> {
    let result = super.tryCall("version", "version():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApplyConvictionDecayCall extends ethereum.Call {
  get inputs(): ApplyConvictionDecayCall__Inputs {
    return new ApplyConvictionDecayCall__Inputs(this);
  }

  get outputs(): ApplyConvictionDecayCall__Outputs {
    return new ApplyConvictionDecayCall__Outputs(this);
  }
}

export class ApplyConvictionDecayCall__Inputs {
  _call: ApplyConvictionDecayCall;

  constructor(call: ApplyConvictionDecayCall) {
    this._call = call;
  }

  get proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get voter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ApplyConvictionDecayCall__Outputs {
  _call: ApplyConvictionDecayCall;

  constructor(call: ApplyConvictionDecayCall) {
    this._call = call;
  }
}

export class CancelProposalCall extends ethereum.Call {
  get inputs(): CancelProposalCall__Inputs {
    return new CancelProposalCall__Inputs(this);
  }

  get outputs(): CancelProposalCall__Outputs {
    return new CancelProposalCall__Outputs(this);
  }
}

export class CancelProposalCall__Inputs {
  _call: CancelProposalCall;

  constructor(call: CancelProposalCall) {
    this._call = call;
  }

  get proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CancelProposalCall__Outputs {
  _call: CancelProposalCall;

  constructor(call: CancelProposalCall) {
    this._call = call;
  }
}

export class CastVoteCall extends ethereum.Call {
  get inputs(): CastVoteCall__Inputs {
    return new CastVoteCall__Inputs(this);
  }

  get outputs(): CastVoteCall__Outputs {
    return new CastVoteCall__Outputs(this);
  }
}

export class CastVoteCall__Inputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }

  get proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get choice(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get reason(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class CastVoteCall__Outputs {
  _call: CastVoteCall;

  constructor(call: CastVoteCall) {
    this._call = call;
  }
}

export class CastVoteWithConvictionCall extends ethereum.Call {
  get inputs(): CastVoteWithConvictionCall__Inputs {
    return new CastVoteWithConvictionCall__Inputs(this);
  }

  get outputs(): CastVoteWithConvictionCall__Outputs {
    return new CastVoteWithConvictionCall__Outputs(this);
  }
}

export class CastVoteWithConvictionCall__Inputs {
  _call: CastVoteWithConvictionCall;

  constructor(call: CastVoteWithConvictionCall) {
    this._call = call;
  }

  get proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get choice(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get convictionTime(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get reason(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class CastVoteWithConvictionCall__Outputs {
  _call: CastVoteWithConvictionCall;

  constructor(call: CastVoteWithConvictionCall) {
    this._call = call;
  }
}

export class CreateProposalCall extends ethereum.Call {
  get inputs(): CreateProposalCall__Inputs {
    return new CreateProposalCall__Inputs(this);
  }

  get outputs(): CreateProposalCall__Outputs {
    return new CreateProposalCall__Outputs(this);
  }
}

export class CreateProposalCall__Inputs {
  _call: CreateProposalCall;

  constructor(call: CreateProposalCall) {
    this._call = call;
  }

  get organizationId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get title(): string {
    return this._call.inputValues[1].value.toString();
  }

  get description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get metadataURI(): string {
    return this._call.inputValues[3].value.toString();
  }

  get proposalType(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get votingType(): i32 {
    return this._call.inputValues[5].value.toI32();
  }

  get votingPower(): i32 {
    return this._call.inputValues[6].value.toI32();
  }

  get votingPeriod(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get executionData(): Bytes {
    return this._call.inputValues[8].value.toBytes();
  }

  get targetContract(): Address {
    return this._call.inputValues[9].value.toAddress();
  }
}

export class CreateProposalCall__Outputs {
  _call: CreateProposalCall;

  constructor(call: CreateProposalCall) {
    this._call = call;
  }

  get proposalId(): Bytes {
    return this._call.outputValues[0].value.toBytes();
  }
}

export class DelegateVotingPowerCall extends ethereum.Call {
  get inputs(): DelegateVotingPowerCall__Inputs {
    return new DelegateVotingPowerCall__Inputs(this);
  }

  get outputs(): DelegateVotingPowerCall__Outputs {
    return new DelegateVotingPowerCall__Outputs(this);
  }
}

export class DelegateVotingPowerCall__Inputs {
  _call: DelegateVotingPowerCall;

  constructor(call: DelegateVotingPowerCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DelegateVotingPowerCall__Outputs {
  _call: DelegateVotingPowerCall;

  constructor(call: DelegateVotingPowerCall) {
    this._call = call;
  }
}

export class EmergencyCancelCall extends ethereum.Call {
  get inputs(): EmergencyCancelCall__Inputs {
    return new EmergencyCancelCall__Inputs(this);
  }

  get outputs(): EmergencyCancelCall__Outputs {
    return new EmergencyCancelCall__Outputs(this);
  }
}

export class EmergencyCancelCall__Inputs {
  _call: EmergencyCancelCall;

  constructor(call: EmergencyCancelCall) {
    this._call = call;
  }

  get proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class EmergencyCancelCall__Outputs {
  _call: EmergencyCancelCall;

  constructor(call: EmergencyCancelCall) {
    this._call = call;
  }
}

export class EmergencyPauseCall extends ethereum.Call {
  get inputs(): EmergencyPauseCall__Inputs {
    return new EmergencyPauseCall__Inputs(this);
  }

  get outputs(): EmergencyPauseCall__Outputs {
    return new EmergencyPauseCall__Outputs(this);
  }
}

export class EmergencyPauseCall__Inputs {
  _call: EmergencyPauseCall;

  constructor(call: EmergencyPauseCall) {
    this._call = call;
  }
}

export class EmergencyPauseCall__Outputs {
  _call: EmergencyPauseCall;

  constructor(call: EmergencyPauseCall) {
    this._call = call;
  }
}

export class EmergencyUnpauseCall extends ethereum.Call {
  get inputs(): EmergencyUnpauseCall__Inputs {
    return new EmergencyUnpauseCall__Inputs(this);
  }

  get outputs(): EmergencyUnpauseCall__Outputs {
    return new EmergencyUnpauseCall__Outputs(this);
  }
}

export class EmergencyUnpauseCall__Inputs {
  _call: EmergencyUnpauseCall;

  constructor(call: EmergencyUnpauseCall) {
    this._call = call;
  }
}

export class EmergencyUnpauseCall__Outputs {
  _call: EmergencyUnpauseCall;

  constructor(call: EmergencyUnpauseCall) {
    this._call = call;
  }
}

export class ExecuteProposalCall extends ethereum.Call {
  get inputs(): ExecuteProposalCall__Inputs {
    return new ExecuteProposalCall__Inputs(this);
  }

  get outputs(): ExecuteProposalCall__Outputs {
    return new ExecuteProposalCall__Outputs(this);
  }
}

export class ExecuteProposalCall__Inputs {
  _call: ExecuteProposalCall;

  constructor(call: ExecuteProposalCall) {
    this._call = call;
  }

  get proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class ExecuteProposalCall__Outputs {
  _call: ExecuteProposalCall;

  constructor(call: ExecuteProposalCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get registryAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class OnModuleDisabledCall extends ethereum.Call {
  get inputs(): OnModuleDisabledCall__Inputs {
    return new OnModuleDisabledCall__Inputs(this);
  }

  get outputs(): OnModuleDisabledCall__Outputs {
    return new OnModuleDisabledCall__Outputs(this);
  }
}

export class OnModuleDisabledCall__Inputs {
  _call: OnModuleDisabledCall;

  constructor(call: OnModuleDisabledCall) {
    this._call = call;
  }
}

export class OnModuleDisabledCall__Outputs {
  _call: OnModuleDisabledCall;

  constructor(call: OnModuleDisabledCall) {
    this._call = call;
  }
}

export class OnModuleEnabledCall extends ethereum.Call {
  get inputs(): OnModuleEnabledCall__Inputs {
    return new OnModuleEnabledCall__Inputs(this);
  }

  get outputs(): OnModuleEnabledCall__Outputs {
    return new OnModuleEnabledCall__Outputs(this);
  }
}

export class OnModuleEnabledCall__Inputs {
  _call: OnModuleEnabledCall;

  constructor(call: OnModuleEnabledCall) {
    this._call = call;
  }
}

export class OnModuleEnabledCall__Outputs {
  _call: OnModuleEnabledCall;

  constructor(call: OnModuleEnabledCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class QueueProposalCall extends ethereum.Call {
  get inputs(): QueueProposalCall__Inputs {
    return new QueueProposalCall__Inputs(this);
  }

  get outputs(): QueueProposalCall__Outputs {
    return new QueueProposalCall__Outputs(this);
  }
}

export class QueueProposalCall__Inputs {
  _call: QueueProposalCall;

  constructor(call: QueueProposalCall) {
    this._call = call;
  }

  get proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class QueueProposalCall__Outputs {
  _call: QueueProposalCall;

  constructor(call: QueueProposalCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetDefaultVotingParametersCall extends ethereum.Call {
  get inputs(): SetDefaultVotingParametersCall__Inputs {
    return new SetDefaultVotingParametersCall__Inputs(this);
  }

  get outputs(): SetDefaultVotingParametersCall__Outputs {
    return new SetDefaultVotingParametersCall__Outputs(this);
  }
}

export class SetDefaultVotingParametersCall__Inputs {
  _call: SetDefaultVotingParametersCall;

  constructor(call: SetDefaultVotingParametersCall) {
    this._call = call;
  }

  get params(): SetDefaultVotingParametersCallParamsStruct {
    return changetype<SetDefaultVotingParametersCallParamsStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class SetDefaultVotingParametersCall__Outputs {
  _call: SetDefaultVotingParametersCall;

  constructor(call: SetDefaultVotingParametersCall) {
    this._call = call;
  }
}

export class SetDefaultVotingParametersCallParamsStruct extends ethereum.Tuple {
  get votingDelay(): BigInt {
    return this[0].toBigInt();
  }

  get votingPeriod(): BigInt {
    return this[1].toBigInt();
  }

  get executionDelay(): BigInt {
    return this[2].toBigInt();
  }

  get quorumThreshold(): BigInt {
    return this[3].toBigInt();
  }

  get proposalThreshold(): BigInt {
    return this[4].toBigInt();
  }

  get requireMembership(): boolean {
    return this[5].toBoolean();
  }
}

export class SetProposalStateCall extends ethereum.Call {
  get inputs(): SetProposalStateCall__Inputs {
    return new SetProposalStateCall__Inputs(this);
  }

  get outputs(): SetProposalStateCall__Outputs {
    return new SetProposalStateCall__Outputs(this);
  }
}

export class SetProposalStateCall__Inputs {
  _call: SetProposalStateCall;

  constructor(call: SetProposalStateCall) {
    this._call = call;
  }

  get proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get newState(): i32 {
    return this._call.inputValues[1].value.toI32();
  }
}

export class SetProposalStateCall__Outputs {
  _call: SetProposalStateCall;

  constructor(call: SetProposalStateCall) {
    this._call = call;
  }
}

export class SetVotingParametersCall extends ethereum.Call {
  get inputs(): SetVotingParametersCall__Inputs {
    return new SetVotingParametersCall__Inputs(this);
  }

  get outputs(): SetVotingParametersCall__Outputs {
    return new SetVotingParametersCall__Outputs(this);
  }
}

export class SetVotingParametersCall__Inputs {
  _call: SetVotingParametersCall;

  constructor(call: SetVotingParametersCall) {
    this._call = call;
  }

  get organizationId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get params(): SetVotingParametersCallParamsStruct {
    return changetype<SetVotingParametersCallParamsStruct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class SetVotingParametersCall__Outputs {
  _call: SetVotingParametersCall;

  constructor(call: SetVotingParametersCall) {
    this._call = call;
  }
}

export class SetVotingParametersCallParamsStruct extends ethereum.Tuple {
  get votingDelay(): BigInt {
    return this[0].toBigInt();
  }

  get votingPeriod(): BigInt {
    return this[1].toBigInt();
  }

  get executionDelay(): BigInt {
    return this[2].toBigInt();
  }

  get quorumThreshold(): BigInt {
    return this[3].toBigInt();
  }

  get proposalThreshold(): BigInt {
    return this[4].toBigInt();
  }

  get requireMembership(): boolean {
    return this[5].toBoolean();
  }
}

export class UndelegateVotingPowerCall extends ethereum.Call {
  get inputs(): UndelegateVotingPowerCall__Inputs {
    return new UndelegateVotingPowerCall__Inputs(this);
  }

  get outputs(): UndelegateVotingPowerCall__Outputs {
    return new UndelegateVotingPowerCall__Outputs(this);
  }
}

export class UndelegateVotingPowerCall__Inputs {
  _call: UndelegateVotingPowerCall;

  constructor(call: UndelegateVotingPowerCall) {
    this._call = call;
  }

  get delegatee(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class UndelegateVotingPowerCall__Outputs {
  _call: UndelegateVotingPowerCall;

  constructor(call: UndelegateVotingPowerCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdateProposalCall extends ethereum.Call {
  get inputs(): UpdateProposalCall__Inputs {
    return new UpdateProposalCall__Inputs(this);
  }

  get outputs(): UpdateProposalCall__Outputs {
    return new UpdateProposalCall__Outputs(this);
  }
}

export class UpdateProposalCall__Inputs {
  _call: UpdateProposalCall;

  constructor(call: UpdateProposalCall) {
    this._call = call;
  }

  get proposalId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get title(): string {
    return this._call.inputValues[1].value.toString();
  }

  get description(): string {
    return this._call.inputValues[2].value.toString();
  }

  get endTime(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class UpdateProposalCall__Outputs {
  _call: UpdateProposalCall;

  constructor(call: UpdateProposalCall) {
    this._call = call;
  }
}
