// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class OrganizationStakeWithdrawn extends ethereum.Event {
  get params(): OrganizationStakeWithdrawn__Params {
    return new OrganizationStakeWithdrawn__Params(this);
  }
}

export class OrganizationStakeWithdrawn__Params {
  _event: OrganizationStakeWithdrawn;

  constructor(event: OrganizationStakeWithdrawn) {
    this._event = event;
  }

  get organizationId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get staker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class OrganizationStaked extends ethereum.Event {
  get params(): OrganizationStaked__Params {
    return new OrganizationStaked__Params(this);
  }
}

export class OrganizationStaked__Params {
  _event: OrganizationStaked;

  constructor(event: OrganizationStaked) {
    this._event = event;
  }

  get organizationId(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get staker(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class PoolUpdated extends ethereum.Event {
  get params(): PoolUpdated__Params {
    return new PoolUpdated__Params(this);
  }
}

export class PoolUpdated__Params {
  _event: PoolUpdated;

  constructor(event: PoolUpdated) {
    this._event = event;
  }

  get purpose(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get newRewardRate(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get active(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class RewardsClaimed extends ethereum.Event {
  get params(): RewardsClaimed__Params {
    return new RewardsClaimed__Params(this);
  }
}

export class RewardsClaimed__Params {
  _event: RewardsClaimed;

  constructor(event: RewardsClaimed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get purpose(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class RewardsDistributed extends ethereum.Event {
  get params(): RewardsDistributed__Params {
    return new RewardsDistributed__Params(this);
  }
}

export class RewardsDistributed__Params {
  _event: RewardsDistributed;

  constructor(event: RewardsDistributed) {
    this._event = event;
  }

  get purpose(): i32 {
    return this._event.parameters[0].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class RoleAdminChanged extends ethereum.Event {
  get params(): RoleAdminChanged__Params {
    return new RoleAdminChanged__Params(this);
  }
}

export class RoleAdminChanged__Params {
  _event: RoleAdminChanged;

  constructor(event: RoleAdminChanged) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get previousAdminRole(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get newAdminRole(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class RoleGranted extends ethereum.Event {
  get params(): RoleGranted__Params {
    return new RoleGranted__Params(this);
  }
}

export class RoleGranted__Params {
  _event: RoleGranted;

  constructor(event: RoleGranted) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class RoleRevoked extends ethereum.Event {
  get params(): RoleRevoked__Params {
    return new RoleRevoked__Params(this);
  }
}

export class RoleRevoked__Params {
  _event: RoleRevoked;

  constructor(event: RoleRevoked) {
    this._event = event;
  }

  get role(): Bytes {
    return this._event.parameters[0].value.toBytes();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sender(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Slashed extends ethereum.Event {
  get params(): Slashed__Params {
    return new Slashed__Params(this);
  }
}

export class Slashed__Params {
  _event: Slashed;

  constructor(event: Slashed) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get purpose(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get slasher(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get reason(): string {
    return this._event.parameters[4].value.toString();
  }

  get timestamp(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Staked extends ethereum.Event {
  get params(): Staked__Params {
    return new Staked__Params(this);
  }
}

export class Staked__Params {
  _event: Staked;

  constructor(event: Staked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get purpose(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get strategy(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class UnstakeRequested extends ethereum.Event {
  get params(): UnstakeRequested__Params {
    return new UnstakeRequested__Params(this);
  }
}

export class UnstakeRequested__Params {
  _event: UnstakeRequested;

  constructor(event: UnstakeRequested) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get purpose(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get strategy(): i32 {
    return this._event.parameters[3].value.toI32();
  }

  get requestId(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get unlockTime(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }
}

export class Unstaked extends ethereum.Event {
  get params(): Unstaked__Params {
    return new Unstaked__Params(this);
  }
}

export class Unstaked__Params {
  _event: Unstaked;

  constructor(event: Unstaked) {
    this._event = event;
  }

  get user(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get purpose(): i32 {
    return this._event.parameters[1].value.toI32();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get penalty(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class GameStaking__getOrganizationStakeResultValue0Struct extends ethereum.Tuple {
  get organizationId(): Bytes {
    return this[0].toBytes();
  }

  get staker(): Address {
    return this[1].toAddress();
  }

  get amount(): BigInt {
    return this[2].toBigInt();
  }

  get stakedAt(): BigInt {
    return this[3].toBigInt();
  }

  get active(): boolean {
    return this[4].toBoolean();
  }
}

export class GameStaking__getPoolInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getTotalStaked(): BigInt {
    return this.value0;
  }

  getRewardRate(): BigInt {
    return this.value1;
  }

  getTotalRewardsDistributed(): BigInt {
    return this.value2;
  }

  getActive(): boolean {
    return this.value3;
  }
}

export class GameStaking__getStakeInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: i32;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set(
      "value3",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value3))
    );
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getPendingRewards(): BigInt {
    return this.value1;
  }

  getStakedAt(): BigInt {
    return this.value2;
  }

  getStrategy(): i32 {
    return this.value3;
  }
}

export class GameStaking__organizationStakesResult {
  value0: Bytes;
  value1: Address;
  value2: BigInt;
  value3: BigInt;
  value4: boolean;

  constructor(
    value0: Bytes,
    value1: Address,
    value2: BigInt,
    value3: BigInt,
    value4: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    return map;
  }

  getOrganizationId(): Bytes {
    return this.value0;
  }

  getStaker(): Address {
    return this.value1;
  }

  getAmount(): BigInt {
    return this.value2;
  }

  getStakedAt(): BigInt {
    return this.value3;
  }

  getActive(): boolean {
    return this.value4;
  }
}

export class GameStaking__stakingPoolsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    return map;
  }

  getTotalStaked(): BigInt {
    return this.value0;
  }

  getRewardRate(): BigInt {
    return this.value1;
  }

  getLastUpdateTime(): BigInt {
    return this.value2;
  }

  getRewardPerTokenStored(): BigInt {
    return this.value3;
  }

  getTotalRewardsDistributed(): BigInt {
    return this.value4;
  }

  getActive(): boolean {
    return this.value5;
  }
}

export class GameStaking__unstakeRequestsResult {
  value0: BigInt;
  value1: BigInt;
  value2: i32;
  value3: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: i32, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getRequestTime(): BigInt {
    return this.value1;
  }

  getStrategy(): i32 {
    return this.value2;
  }

  getProcessed(): boolean {
    return this.value3;
  }
}

export class GameStaking__userStakesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    return map;
  }

  getAmount(): BigInt {
    return this.value0;
  }

  getRewardPerTokenPaid(): BigInt {
    return this.value1;
  }

  getPendingRewards(): BigInt {
    return this.value2;
  }

  getStakedAt(): BigInt {
    return this.value3;
  }

  getLastClaimTime(): BigInt {
    return this.value4;
  }

  getPreferredStrategy(): i32 {
    return this.value5;
  }
}

export class GameStaking extends ethereum.SmartContract {
  static bind(address: Address): GameStaking {
    return new GameStaking("GameStaking", address);
  }

  ADMIN_ROLE(): Bytes {
    let result = super.call("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("ADMIN_ROLE", "ADMIN_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  BASIS_POINTS(): BigInt {
    let result = super.call("BASIS_POINTS", "BASIS_POINTS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_BASIS_POINTS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("BASIS_POINTS", "BASIS_POINTS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DEFAULT_ADMIN_ROLE(): Bytes {
    let result = super.call(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_DEFAULT_ADMIN_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DEFAULT_ADMIN_ROLE",
      "DEFAULT_ADMIN_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAX_REWARD_RATE(): BigInt {
    let result = super.call(
      "MAX_REWARD_RATE",
      "MAX_REWARD_RATE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_REWARD_RATE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_REWARD_RATE",
      "MAX_REWARD_RATE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_STAKE_AMOUNT(): BigInt {
    let result = super.call(
      "MIN_STAKE_AMOUNT",
      "MIN_STAKE_AMOUNT():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MIN_STAKE_AMOUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_STAKE_AMOUNT",
      "MIN_STAKE_AMOUNT():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  ORGANIZATION_MANAGER_ROLE(): Bytes {
    let result = super.call(
      "ORGANIZATION_MANAGER_ROLE",
      "ORGANIZATION_MANAGER_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_ORGANIZATION_MANAGER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "ORGANIZATION_MANAGER_ROLE",
      "ORGANIZATION_MANAGER_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  ORGANIZATION_STAKE_LOCK_PERIOD(): BigInt {
    let result = super.call(
      "ORGANIZATION_STAKE_LOCK_PERIOD",
      "ORGANIZATION_STAKE_LOCK_PERIOD():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_ORGANIZATION_STAKE_LOCK_PERIOD(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ORGANIZATION_STAKE_LOCK_PERIOD",
      "ORGANIZATION_STAKE_LOCK_PERIOD():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PRECISION(): BigInt {
    let result = super.call("PRECISION", "PRECISION():(uint256)", []);

    return result[0].toBigInt();
  }

  try_PRECISION(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("PRECISION", "PRECISION():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  RAGE_QUIT_PENALTY(): BigInt {
    let result = super.call(
      "RAGE_QUIT_PENALTY",
      "RAGE_QUIT_PENALTY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_RAGE_QUIT_PENALTY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "RAGE_QUIT_PENALTY",
      "RAGE_QUIT_PENALTY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  REWARD_DISTRIBUTOR_ROLE(): Bytes {
    let result = super.call(
      "REWARD_DISTRIBUTOR_ROLE",
      "REWARD_DISTRIBUTOR_ROLE():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_REWARD_DISTRIBUTOR_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "REWARD_DISTRIBUTOR_ROLE",
      "REWARD_DISTRIBUTOR_ROLE():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  SLASHER_ROLE(): Bytes {
    let result = super.call("SLASHER_ROLE", "SLASHER_ROLE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_SLASHER_ROLE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("SLASHER_ROLE", "SLASHER_ROLE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  canWithdrawOrganizationStake(organizationId: Bytes): boolean {
    let result = super.call(
      "canWithdrawOrganizationStake",
      "canWithdrawOrganizationStake(bytes8):(bool)",
      [ethereum.Value.fromFixedBytes(organizationId)]
    );

    return result[0].toBoolean();
  }

  try_canWithdrawOrganizationStake(
    organizationId: Bytes
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "canWithdrawOrganizationStake",
      "canWithdrawOrganizationStake(bytes8):(bool)",
      [ethereum.Value.fromFixedBytes(organizationId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  gameToken(): Address {
    let result = super.call("gameToken", "gameToken():(address)", []);

    return result[0].toAddress();
  }

  try_gameToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("gameToken", "gameToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOrganizationStake(
    organizationId: Bytes
  ): GameStaking__getOrganizationStakeResultValue0Struct {
    let result = super.call(
      "getOrganizationStake",
      "getOrganizationStake(bytes8):((bytes8,address,uint256,uint256,bool))",
      [ethereum.Value.fromFixedBytes(organizationId)]
    );

    return changetype<GameStaking__getOrganizationStakeResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getOrganizationStake(
    organizationId: Bytes
  ): ethereum.CallResult<GameStaking__getOrganizationStakeResultValue0Struct> {
    let result = super.tryCall(
      "getOrganizationStake",
      "getOrganizationStake(bytes8):((bytes8,address,uint256,uint256,bool))",
      [ethereum.Value.fromFixedBytes(organizationId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<GameStaking__getOrganizationStakeResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getPendingRewards(user: Address, purpose: i32): BigInt {
    let result = super.call(
      "getPendingRewards",
      "getPendingRewards(address,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(purpose))
      ]
    );

    return result[0].toBigInt();
  }

  try_getPendingRewards(
    user: Address,
    purpose: i32
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getPendingRewards",
      "getPendingRewards(address,uint8):(uint256)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(purpose))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getPoolInfo(purpose: i32): GameStaking__getPoolInfoResult {
    let result = super.call(
      "getPoolInfo",
      "getPoolInfo(uint8):(uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(purpose))]
    );

    return new GameStaking__getPoolInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_getPoolInfo(
    purpose: i32
  ): ethereum.CallResult<GameStaking__getPoolInfoResult> {
    let result = super.tryCall(
      "getPoolInfo",
      "getPoolInfo(uint8):(uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(purpose))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameStaking__getPoolInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  getRoleAdmin(role: Bytes): Bytes {
    let result = super.call("getRoleAdmin", "getRoleAdmin(bytes32):(bytes32)", [
      ethereum.Value.fromFixedBytes(role)
    ]);

    return result[0].toBytes();
  }

  try_getRoleAdmin(role: Bytes): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getRoleAdmin",
      "getRoleAdmin(bytes32):(bytes32)",
      [ethereum.Value.fromFixedBytes(role)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getStakeInfo(user: Address, purpose: i32): GameStaking__getStakeInfoResult {
    let result = super.call(
      "getStakeInfo",
      "getStakeInfo(address,uint8):(uint256,uint256,uint256,uint8)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(purpose))
      ]
    );

    return new GameStaking__getStakeInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toI32()
    );
  }

  try_getStakeInfo(
    user: Address,
    purpose: i32
  ): ethereum.CallResult<GameStaking__getStakeInfoResult> {
    let result = super.tryCall(
      "getStakeInfo",
      "getStakeInfo(address,uint8):(uint256,uint256,uint256,uint8)",
      [
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(purpose))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameStaking__getStakeInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toI32()
      )
    );
  }

  getUserOrganizationStakes(user: Address): Array<Bytes> {
    let result = super.call(
      "getUserOrganizationStakes",
      "getUserOrganizationStakes(address):(bytes8[])",
      [ethereum.Value.fromAddress(user)]
    );

    return result[0].toBytesArray();
  }

  try_getUserOrganizationStakes(
    user: Address
  ): ethereum.CallResult<Array<Bytes>> {
    let result = super.tryCall(
      "getUserOrganizationStakes",
      "getUserOrganizationStakes(address):(bytes8[])",
      [ethereum.Value.fromAddress(user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytesArray());
  }

  hasRole(role: Bytes, account: Address): boolean {
    let result = super.call("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBoolean();
  }

  try_hasRole(role: Bytes, account: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasRole", "hasRole(bytes32,address):(bool)", [
      ethereum.Value.fromFixedBytes(role),
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  organizationStakes(param0: Bytes): GameStaking__organizationStakesResult {
    let result = super.call(
      "organizationStakes",
      "organizationStakes(bytes8):(bytes8,address,uint256,uint256,bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );

    return new GameStaking__organizationStakesResult(
      result[0].toBytes(),
      result[1].toAddress(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBoolean()
    );
  }

  try_organizationStakes(
    param0: Bytes
  ): ethereum.CallResult<GameStaking__organizationStakesResult> {
    let result = super.tryCall(
      "organizationStakes",
      "organizationStakes(bytes8):(bytes8,address,uint256,uint256,bool)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameStaking__organizationStakesResult(
        value[0].toBytes(),
        value[1].toAddress(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBoolean()
      )
    );
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  protocolFeeShare(): BigInt {
    let result = super.call(
      "protocolFeeShare",
      "protocolFeeShare():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_protocolFeeShare(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "protocolFeeShare",
      "protocolFeeShare():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  slashedUsers(param0: Address): boolean {
    let result = super.call("slashedUsers", "slashedUsers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_slashedUsers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("slashedUsers", "slashedUsers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  stakingPools(param0: i32): GameStaking__stakingPoolsResult {
    let result = super.call(
      "stakingPools",
      "stakingPools(uint8):(uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );

    return new GameStaking__stakingPoolsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean()
    );
  }

  try_stakingPools(
    param0: i32
  ): ethereum.CallResult<GameStaking__stakingPoolsResult> {
    let result = super.tryCall(
      "stakingPools",
      "stakingPools(uint8):(uint256,uint256,uint256,uint256,uint256,bool)",
      [ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param0))]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameStaking__stakingPoolsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean()
      )
    );
  }

  supportsInterface(interfaceId: Bytes): boolean {
    let result = super.call(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );

    return result[0].toBoolean();
  }

  try_supportsInterface(interfaceId: Bytes): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "supportsInterface",
      "supportsInterface(bytes4):(bool)",
      [ethereum.Value.fromFixedBytes(interfaceId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  totalRewardsPool(): BigInt {
    let result = super.call(
      "totalRewardsPool",
      "totalRewardsPool():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_totalRewardsPool(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalRewardsPool",
      "totalRewardsPool():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSlashed(): BigInt {
    let result = super.call("totalSlashed", "totalSlashed():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSlashed(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSlashed", "totalSlashed():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  treasury(): Address {
    let result = super.call("treasury", "treasury():(address)", []);

    return result[0].toAddress();
  }

  try_treasury(): ethereum.CallResult<Address> {
    let result = super.tryCall("treasury", "treasury():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  unstakeRequests(
    param0: Address,
    param1: BigInt
  ): GameStaking__unstakeRequestsResult {
    let result = super.call(
      "unstakeRequests",
      "unstakeRequests(address,uint256):(uint256,uint256,uint8,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new GameStaking__unstakeRequestsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toI32(),
      result[3].toBoolean()
    );
  }

  try_unstakeRequests(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<GameStaking__unstakeRequestsResult> {
    let result = super.tryCall(
      "unstakeRequests",
      "unstakeRequests(address,uint256):(uint256,uint256,uint8,bool)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameStaking__unstakeRequestsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toI32(),
        value[3].toBoolean()
      )
    );
  }

  userOrganizationStakes(param0: Address, param1: BigInt): Bytes {
    let result = super.call(
      "userOrganizationStakes",
      "userOrganizationStakes(address,uint256):(bytes8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBytes();
  }

  try_userOrganizationStakes(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "userOrganizationStakes",
      "userOrganizationStakes(address,uint256):(bytes8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  userStakes(param0: Address, param1: i32): GameStaking__userStakesResult {
    let result = super.call(
      "userStakes",
      "userStakes(address,uint8):(uint256,uint256,uint256,uint256,uint256,uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1))
      ]
    );

    return new GameStaking__userStakesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toI32()
    );
  }

  try_userStakes(
    param0: Address,
    param1: i32
  ): ethereum.CallResult<GameStaking__userStakesResult> {
    let result = super.tryCall(
      "userStakes",
      "userStakes(address,uint8):(uint256,uint256,uint256,uint256,uint256,uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(param1))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new GameStaking__userStakesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toI32()
      )
    );
  }

  userUnstakeRequestCount(param0: Address): BigInt {
    let result = super.call(
      "userUnstakeRequestCount",
      "userUnstakeRequestCount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBigInt();
  }

  try_userUnstakeRequestCount(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "userUnstakeRequestCount",
      "userUnstakeRequestCount(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _gameToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _protocolFeeShare(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ClaimRewardsCall extends ethereum.Call {
  get inputs(): ClaimRewardsCall__Inputs {
    return new ClaimRewardsCall__Inputs(this);
  }

  get outputs(): ClaimRewardsCall__Outputs {
    return new ClaimRewardsCall__Outputs(this);
  }
}

export class ClaimRewardsCall__Inputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }

  get purpose(): i32 {
    return this._call.inputValues[0].value.toI32();
  }
}

export class ClaimRewardsCall__Outputs {
  _call: ClaimRewardsCall;

  constructor(call: ClaimRewardsCall) {
    this._call = call;
  }
}

export class DistributeRewardsCall extends ethereum.Call {
  get inputs(): DistributeRewardsCall__Inputs {
    return new DistributeRewardsCall__Inputs(this);
  }

  get outputs(): DistributeRewardsCall__Outputs {
    return new DistributeRewardsCall__Outputs(this);
  }
}

export class DistributeRewardsCall__Inputs {
  _call: DistributeRewardsCall;

  constructor(call: DistributeRewardsCall) {
    this._call = call;
  }

  get purpose(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DistributeRewardsCall__Outputs {
  _call: DistributeRewardsCall;

  constructor(call: DistributeRewardsCall) {
    this._call = call;
  }
}

export class EmergencyWithdrawCall extends ethereum.Call {
  get inputs(): EmergencyWithdrawCall__Inputs {
    return new EmergencyWithdrawCall__Inputs(this);
  }

  get outputs(): EmergencyWithdrawCall__Outputs {
    return new EmergencyWithdrawCall__Outputs(this);
  }
}

export class EmergencyWithdrawCall__Inputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class EmergencyWithdrawCall__Outputs {
  _call: EmergencyWithdrawCall;

  constructor(call: EmergencyWithdrawCall) {
    this._call = call;
  }
}

export class GrantRoleCall extends ethereum.Call {
  get inputs(): GrantRoleCall__Inputs {
    return new GrantRoleCall__Inputs(this);
  }

  get outputs(): GrantRoleCall__Outputs {
    return new GrantRoleCall__Outputs(this);
  }
}

export class GrantRoleCall__Inputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class GrantRoleCall__Outputs {
  _call: GrantRoleCall;

  constructor(call: GrantRoleCall) {
    this._call = call;
  }
}

export class PauseCall extends ethereum.Call {
  get inputs(): PauseCall__Inputs {
    return new PauseCall__Inputs(this);
  }

  get outputs(): PauseCall__Outputs {
    return new PauseCall__Outputs(this);
  }
}

export class PauseCall__Inputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class PauseCall__Outputs {
  _call: PauseCall;

  constructor(call: PauseCall) {
    this._call = call;
  }
}

export class ProcessUnstakeCall extends ethereum.Call {
  get inputs(): ProcessUnstakeCall__Inputs {
    return new ProcessUnstakeCall__Inputs(this);
  }

  get outputs(): ProcessUnstakeCall__Outputs {
    return new ProcessUnstakeCall__Outputs(this);
  }
}

export class ProcessUnstakeCall__Inputs {
  _call: ProcessUnstakeCall;

  constructor(call: ProcessUnstakeCall) {
    this._call = call;
  }

  get purpose(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get requestId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ProcessUnstakeCall__Outputs {
  _call: ProcessUnstakeCall;

  constructor(call: ProcessUnstakeCall) {
    this._call = call;
  }
}

export class RenounceRoleCall extends ethereum.Call {
  get inputs(): RenounceRoleCall__Inputs {
    return new RenounceRoleCall__Inputs(this);
  }

  get outputs(): RenounceRoleCall__Outputs {
    return new RenounceRoleCall__Outputs(this);
  }
}

export class RenounceRoleCall__Inputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RenounceRoleCall__Outputs {
  _call: RenounceRoleCall;

  constructor(call: RenounceRoleCall) {
    this._call = call;
  }
}

export class RequestUnstakeCall extends ethereum.Call {
  get inputs(): RequestUnstakeCall__Inputs {
    return new RequestUnstakeCall__Inputs(this);
  }

  get outputs(): RequestUnstakeCall__Outputs {
    return new RequestUnstakeCall__Outputs(this);
  }
}

export class RequestUnstakeCall__Inputs {
  _call: RequestUnstakeCall;

  constructor(call: RequestUnstakeCall) {
    this._call = call;
  }

  get purpose(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get strategy(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class RequestUnstakeCall__Outputs {
  _call: RequestUnstakeCall;

  constructor(call: RequestUnstakeCall) {
    this._call = call;
  }
}

export class RevokeRoleCall extends ethereum.Call {
  get inputs(): RevokeRoleCall__Inputs {
    return new RevokeRoleCall__Inputs(this);
  }

  get outputs(): RevokeRoleCall__Outputs {
    return new RevokeRoleCall__Outputs(this);
  }
}

export class RevokeRoleCall__Inputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }

  get role(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get account(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeRoleCall__Outputs {
  _call: RevokeRoleCall;

  constructor(call: RevokeRoleCall) {
    this._call = call;
  }
}

export class SetProtocolFeeShareCall extends ethereum.Call {
  get inputs(): SetProtocolFeeShareCall__Inputs {
    return new SetProtocolFeeShareCall__Inputs(this);
  }

  get outputs(): SetProtocolFeeShareCall__Outputs {
    return new SetProtocolFeeShareCall__Outputs(this);
  }
}

export class SetProtocolFeeShareCall__Inputs {
  _call: SetProtocolFeeShareCall;

  constructor(call: SetProtocolFeeShareCall) {
    this._call = call;
  }

  get _protocolFeeShare(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetProtocolFeeShareCall__Outputs {
  _call: SetProtocolFeeShareCall;

  constructor(call: SetProtocolFeeShareCall) {
    this._call = call;
  }
}

export class SetTreasuryCall extends ethereum.Call {
  get inputs(): SetTreasuryCall__Inputs {
    return new SetTreasuryCall__Inputs(this);
  }

  get outputs(): SetTreasuryCall__Outputs {
    return new SetTreasuryCall__Outputs(this);
  }
}

export class SetTreasuryCall__Inputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }

  get _treasury(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetTreasuryCall__Outputs {
  _call: SetTreasuryCall;

  constructor(call: SetTreasuryCall) {
    this._call = call;
  }
}

export class SlashCall extends ethereum.Call {
  get inputs(): SlashCall__Inputs {
    return new SlashCall__Inputs(this);
  }

  get outputs(): SlashCall__Outputs {
    return new SlashCall__Outputs(this);
  }
}

export class SlashCall__Inputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }

  get user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get purpose(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get reason(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class SlashCall__Outputs {
  _call: SlashCall;

  constructor(call: SlashCall) {
    this._call = call;
  }
}

export class StakeCall extends ethereum.Call {
  get inputs(): StakeCall__Inputs {
    return new StakeCall__Inputs(this);
  }

  get outputs(): StakeCall__Outputs {
    return new StakeCall__Outputs(this);
  }
}

export class StakeCall__Inputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }

  get purpose(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get preferredStrategy(): i32 {
    return this._call.inputValues[2].value.toI32();
  }
}

export class StakeCall__Outputs {
  _call: StakeCall;

  constructor(call: StakeCall) {
    this._call = call;
  }
}

export class StakeForOrganizationCall extends ethereum.Call {
  get inputs(): StakeForOrganizationCall__Inputs {
    return new StakeForOrganizationCall__Inputs(this);
  }

  get outputs(): StakeForOrganizationCall__Outputs {
    return new StakeForOrganizationCall__Outputs(this);
  }
}

export class StakeForOrganizationCall__Inputs {
  _call: StakeForOrganizationCall;

  constructor(call: StakeForOrganizationCall) {
    this._call = call;
  }

  get organizationId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get staker(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class StakeForOrganizationCall__Outputs {
  _call: StakeForOrganizationCall;

  constructor(call: StakeForOrganizationCall) {
    this._call = call;
  }
}

export class UnpauseCall extends ethereum.Call {
  get inputs(): UnpauseCall__Inputs {
    return new UnpauseCall__Inputs(this);
  }

  get outputs(): UnpauseCall__Outputs {
    return new UnpauseCall__Outputs(this);
  }
}

export class UnpauseCall__Inputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UnpauseCall__Outputs {
  _call: UnpauseCall;

  constructor(call: UnpauseCall) {
    this._call = call;
  }
}

export class UpdatePoolCall extends ethereum.Call {
  get inputs(): UpdatePoolCall__Inputs {
    return new UpdatePoolCall__Inputs(this);
  }

  get outputs(): UpdatePoolCall__Outputs {
    return new UpdatePoolCall__Outputs(this);
  }
}

export class UpdatePoolCall__Inputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }

  get purpose(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get newRewardRate(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get active(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class UpdatePoolCall__Outputs {
  _call: UpdatePoolCall;

  constructor(call: UpdatePoolCall) {
    this._call = call;
  }
}

export class WithdrawOrganizationStakeCall extends ethereum.Call {
  get inputs(): WithdrawOrganizationStakeCall__Inputs {
    return new WithdrawOrganizationStakeCall__Inputs(this);
  }

  get outputs(): WithdrawOrganizationStakeCall__Outputs {
    return new WithdrawOrganizationStakeCall__Outputs(this);
  }
}

export class WithdrawOrganizationStakeCall__Inputs {
  _call: WithdrawOrganizationStakeCall;

  constructor(call: WithdrawOrganizationStakeCall) {
    this._call = call;
  }

  get organizationId(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get staker(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class WithdrawOrganizationStakeCall__Outputs {
  _call: WithdrawOrganizationStakeCall;

  constructor(call: WithdrawOrganizationStakeCall) {
    this._call = call;
  }
}
