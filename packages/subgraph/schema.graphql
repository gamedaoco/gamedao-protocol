# GameDAO Protocol Schema
# This schema defines all entities for the GameDAO ecosystem

# ===== GLOBAL STATS =====

type GlobalStats @entity {
  id: ID! # Always "global"
  totalModules: BigInt! # Total number of modules
  activeModules: BigInt! # Number of active modules
  totalOrganizations: BigInt! # Total organizations created
  activeOrganizations: BigInt! # Number of active organizations
  totalMembers: BigInt! # Total members across all organizations
  totalCampaigns: BigInt! # Total campaigns created
  activeCampaigns: BigInt! # Number of active campaigns
  totalRaised: BigDecimal! # Total amount raised across all campaigns
  totalProposals: BigInt! # Total proposals created
  activeProposals: BigInt! # Number of active proposals
  totalVotes: BigInt! # Total votes cast
  totalProfiles: BigInt! # Total profiles created
  verifiedProfiles: BigInt! # Number of verified profiles
  totalAchievements: BigInt! # Total achievements earned
  updatedAt: BigInt! # Last update timestamp
}

# ===== REGISTRY ENTITIES =====

type Module @entity {
  id: ID! # module name
  address: Bytes! # current implementation address
  admin: Bytes! # admin address
  enabled: Boolean! # whether module is enabled
  version: BigInt! # current version number
  registeredAt: BigInt! # timestamp when registered
  updatedAt: BigInt! # timestamp of last update

  # History tracking
  registrations: [ModuleRegistration!]! @derivedFrom(field: "module")
  upgrades: [ModuleUpgrade!]! @derivedFrom(field: "module")
}

type ModuleRegistration @entity {
  id: ID! # tx hash + log index
  module: Module!
  address: Bytes!
  admin: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type ModuleUpgrade @entity {
  id: ID! # tx hash + log index
  module: Module!
  oldAddress: Bytes!
  newAddress: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

# ===== STAKING ENTITIES =====

enum StakingPurpose {
  GOVERNANCE
  DAO_CREATION
  TREASURY_BOND
  LIQUIDITY_MINING
}

enum UnstakingStrategy {
  RAGE_QUIT
  STANDARD
  PATIENT
}

type OrganizationStake @entity {
  id: ID! # organization ID
  organizationId: Bytes! # bytes8 organization ID
  staker: User! # user who staked
  amount: BigInt! # amount staked
  stakedAt: BigInt! # timestamp when staked
  active: Boolean! # whether stake is active
  organization: Organization! # link to organization

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type UserStake @entity {
  id: ID! # user address + purpose
  user: User! # user who staked
  purpose: StakingPurpose! # staking purpose
  amount: BigInt! # amount staked
  stakedAt: BigInt! # timestamp when staked
  lastClaimTime: BigInt! # last reward claim time
  preferredStrategy: UnstakingStrategy! # preferred unstaking strategy
  pendingRewards: BigInt! # pending rewards

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type UnstakeRequest @entity {
  id: ID! # user address + request ID
  user: User! # user requesting unstake
  purpose: StakingPurpose! # staking purpose
  amount: BigInt! # amount to unstake
  requestTime: BigInt! # timestamp of request
  strategy: UnstakingStrategy! # unstaking strategy
  processed: Boolean! # whether request is processed

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type StakingPool @entity {
  id: ID! # staking purpose
  purpose: StakingPurpose! # staking purpose
  totalStaked: BigInt! # total amount staked
  rewardRate: BigInt! # annual reward rate in basis points
  totalRewardsDistributed: BigInt! # total rewards distributed
  active: Boolean! # whether pool is active
}

# ===== CONTROL MODULE ENTITIES =====

enum OrganizationState {
  INACTIVE
  ACTIVE
  LOCKED
  DISSOLVED
}

enum AccessModel {
  OPEN
  VOTING
  INVITE
}

enum FeeModel {
  NONE
  FIXED
  PERCENTAGE
}

enum OrgType {
  INDIVIDUAL
  COMPANY
  DAO
  HYBRID
}

type Organization @entity {
  id: ID! # bytes8 organization ID
  name: String! # organization name
  metadataURI: String! # IPFS metadata URI
  creator: User! # organization creator
  treasury: Bytes! # treasury contract address
  orgType: OrgType! # organization type
  accessModel: AccessModel! # access model
  feeModel: FeeModel! # fee model
  memberLimit: BigInt! # member limit
  memberCount: BigInt! # current member count
  totalCampaigns: BigInt! # total campaigns created
  totalProposals: BigInt! # total proposals created
  membershipFee: BigInt! # membership fee
  gameStakeRequired: BigInt! # GAME tokens required to stake
  state: OrganizationState! # current state
  createdAt: BigInt! # creation timestamp
  updatedAt: BigInt! # last update timestamp

  # Derived relationships
  members: [Member!]! @derivedFrom(field: "organization")
  campaigns: [Campaign!]! @derivedFrom(field: "organization")
  proposals: [Proposal!]! @derivedFrom(field: "organization")
  stake: OrganizationStake @derivedFrom(field: "organization")

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Member @entity {
  id: ID! # organization ID + member address
  organization: Organization! # organization
  user: User! # user who is a member
  state: MemberState! # member state
  joinedAt: BigInt! # timestamp when joined
  reputation: BigInt! # member reputation
  stake: BigInt! # member stake amount

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

enum MemberState {
  INACTIVE
  ACTIVE
  PAUSED
  BANNED
}

type User @entity {
  id: ID! # user address
  address: Bytes! # user address
  totalOrganizations: BigInt! # total organizations created
  totalMemberships: BigInt! # total memberships
  totalContributions: BigInt! # total contributions made
  totalProposals: BigInt! # total proposals created
  totalVotes: BigInt! # total votes cast
  firstSeenAt: BigInt! # first interaction timestamp
  lastActiveAt: BigInt! # last activity timestamp

  # Derived relationships
  organizations: [Organization!]! @derivedFrom(field: "creator")
  memberships: [Member!]! @derivedFrom(field: "user")
  campaigns: [Campaign!]! @derivedFrom(field: "creator")
  proposals: [Proposal!]! @derivedFrom(field: "creator")
  votes: [Vote!]! @derivedFrom(field: "voter")
  stakes: [UserStake!]! @derivedFrom(field: "user")
  organizationStakes: [OrganizationStake!]! @derivedFrom(field: "staker")
  unstakeRequests: [UnstakeRequest!]! @derivedFrom(field: "user")
}

# ===== FLOW MODULE ENTITIES =====

enum FlowType {
  GRANT
  RAISE
  LEND
  LOAN
  SHARE
  POOL
}

enum FlowState {
  CREATED
  ACTIVE
  PAUSED
  FINALIZED
  CANCELLED
}

type Campaign @entity {
  id: ID! # campaign ID
  organization: Organization! # organization that created the campaign
  creator: User! # campaign creator
  title: String! # campaign title
  description: String! # campaign description
  metadataURI: String! # IPFS metadata URI
  flowType: FlowType! # type of flow
  state: FlowState! # current state
  paymentToken: Bytes! # payment token address
  target: BigInt! # target amount
  min: BigInt! # minimum amount
  max: BigInt! # maximum amount
  raised: BigInt! # amount raised
  contributorCount: BigInt! # number of contributors
  startTime: BigInt! # campaign start time
  endTime: BigInt! # campaign end time
  createdAt: BigInt! # creation timestamp
  updatedAt: BigInt! # last update timestamp

  # Derived relationships
  contributions: [Contribution!]! @derivedFrom(field: "campaign")

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Contribution @entity {
  id: ID! # contribution ID
  campaign: Campaign! # campaign contributed to
  contributor: User! # contributor
  amount: BigInt! # contribution amount
  timestamp: BigInt! # contribution timestamp

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

# ===== SIGNAL MODULE ENTITIES =====

enum ProposalType {
  SIMPLE
  PARAMETRIC
  TREASURY
  MEMBER
  CONSTITUTIONAL
}

enum VotingType {
  RELATIVE
  ABSOLUTE
  SUPERMAJORITY
  UNANIMOUS
}

enum VotingPower {
  DEMOCRATIC
  TOKEN
  REPUTATION
}

enum ProposalState {
  PENDING
  ACTIVE
  SUCCEEDED
  EXECUTED
  DEFEATED
  CANCELED
}

enum VoteChoice {
  NONE
  AGAINST
  FOR
  ABSTAIN
}

type Proposal @entity {
  id: ID! # proposal ID (hierarchical or legacy)
  organization: Organization! # organization
  creator: User! # proposal creator
  title: String! # proposal title
  description: String! # proposal description
  metadataURI: String! # IPFS metadata URI
  proposalType: ProposalType! # type of proposal
  votingType: VotingType! # voting mechanism
  votingPower: VotingPower! # voting power calculation
  state: ProposalState! # current state
  startTime: BigInt! # voting start time
  endTime: BigInt! # voting end time
  executionTime: BigInt! # execution time
  forVotes: BigInt! # votes in favor
  againstVotes: BigInt! # votes against
  abstainVotes: BigInt! # abstain votes
  totalVotes: BigInt! # total votes cast
  quorumReached: Boolean! # whether quorum was reached
  createdAt: BigInt! # creation timestamp
  executedAt: BigInt! # execution timestamp
  executor: Bytes # executor address

  # Derived relationships
  votes: [Vote!]! @derivedFrom(field: "proposal")

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Vote @entity {
  id: ID! # proposal ID + voter address
  proposal: Proposal! # proposal voted on
  voter: User! # voter
  choice: VoteChoice! # vote choice
  votingPower: BigInt! # voting power used
  timestamp: BigInt! # vote timestamp
  reason: String! # reason for vote
  convictionTime: BigInt! # conviction time
  convictionMultiplier: BigInt! # conviction multiplier

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Delegation @entity {
  id: ID! # delegator + delegatee
  delegator: User! # user delegating
  delegatee: User! # user receiving delegation
  amount: BigInt! # amount delegated
  timestamp: BigInt! # delegation timestamp

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

# ===== SENSE MODULE ENTITIES =====

type Profile @entity {
  id: ID! # profile ID
  user: User! # user who owns the profile
  organization: Organization! # organization
  metadata: String! # profile metadata
  createdAt: BigInt! # creation timestamp

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Achievement @entity {
  id: ID! # achievement ID
  user: User! # user who earned the achievement
  organization: Organization! # organization
  achievementType: String! # type of achievement
  metadata: String! # achievement metadata
  earnedAt: BigInt! # timestamp when earned

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Feedback @entity {
  id: ID! # feedback ID
  from: User! # user giving feedback
  to: User! # user receiving feedback
  organization: Organization! # organization context
  rating: BigInt! # rating given
  comment: String! # feedback comment
  timestamp: BigInt! # feedback timestamp

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type ReputationEvent @entity {
  id: ID! # event ID
  user: User! # user affected
  organization: Organization! # organization context
  eventType: String! # type of reputation event
  change: BigInt! # reputation change
  timestamp: BigInt! # event timestamp

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}
