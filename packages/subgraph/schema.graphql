# GameDAO Protocol Schema
# This schema defines all entities for the GameDAO ecosystem

# ===== REGISTRY ENTITIES =====

type Module @entity {
  id: ID! # module name
  address: Bytes! # current implementation address
  admin: Bytes! # admin address
  enabled: Boolean! # whether module is enabled
  version: BigInt! # current version number
  registeredAt: BigInt! # timestamp when registered
  updatedAt: BigInt! # timestamp of last update

  # History tracking
  registrations: [ModuleRegistration!]! @derivedFrom(field: "module")
  upgrades: [ModuleUpgrade!]! @derivedFrom(field: "module")
}

type ModuleRegistration @entity {
  id: ID! # tx hash + log index
  module: Module!
  address: Bytes!
  admin: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type ModuleUpgrade @entity {
  id: ID! # tx hash + log index
  module: Module!
  oldAddress: Bytes!
  newAddress: Bytes!
  timestamp: BigInt!
  blockNumber: BigInt!
  transactionHash: Bytes!
}

# ===== STAKING ENTITIES =====

enum StakingPurpose {
  GOVERNANCE
  DAO_CREATION
  TREASURY_BOND
  LIQUIDITY_MINING
}

enum UnstakingStrategy {
  RAGE_QUIT
  STANDARD
  PATIENT
}

type OrganizationStake @entity {
  id: ID! # organization ID
  organizationId: Bytes! # bytes8 organization ID
  staker: User! # user who staked
  amount: BigInt! # amount staked
  stakedAt: BigInt! # timestamp when staked
  active: Boolean! # whether stake is active
  organization: Organization! # link to organization

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type UserStake @entity {
  id: ID! # user address + purpose
  user: User! # user who staked
  purpose: StakingPurpose! # staking purpose
  amount: BigInt! # amount staked
  stakedAt: BigInt! # timestamp when staked
  lastClaimTime: BigInt! # last reward claim time
  preferredStrategy: UnstakingStrategy! # preferred unstaking strategy
  pendingRewards: BigInt! # pending rewards

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type UnstakeRequest @entity {
  id: ID! # user address + request ID
  user: User! # user requesting unstake
  purpose: StakingPurpose! # staking purpose
  amount: BigInt! # amount to unstake
  requestTime: BigInt! # timestamp of request
  strategy: UnstakingStrategy! # unstaking strategy
  processed: Boolean! # whether request is processed

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type StakingPool @entity {
  id: ID! # staking purpose
  purpose: StakingPurpose! # staking purpose
  totalStaked: BigInt! # total amount staked
  rewardRate: BigInt! # annual reward rate in basis points
  totalRewardsDistributed: BigInt! # total rewards distributed
  active: Boolean! # whether pool is active

  # Derived relationships
  stakes: [UserStake!]! @derivedFrom(field: "purpose")
  unstakeRequests: [UnstakeRequest!]! @derivedFrom(field: "purpose")
}

# ===== CONTROL MODULE ENTITIES =====

enum OrganizationState {
  INACTIVE
  ACTIVE
  LOCKED
  DISSOLVED
}

enum AccessModel {
  OPEN
  VOTING
  INVITE
}

enum FeeModel {
  NONE
  FIXED
  PERCENTAGE
}

enum OrgType {
  INDIVIDUAL
  COMPANY
  DAO
  HYBRID
}

type Organization @entity {
  id: ID! # bytes8 organization ID
  name: String! # organization name
  metadataURI: String! # IPFS metadata URI
  creator: User! # organization creator
  treasury: Bytes! # treasury contract address
  orgType: OrgType! # organization type
  accessModel: AccessModel! # access model
  feeModel: FeeModel! # fee model
  memberLimit: BigInt! # member limit
  memberCount: BigInt! # current member count
  totalCampaigns: BigInt! # total campaigns created
  totalProposals: BigInt! # total proposals created
  membershipFee: BigInt! # membership fee
  gameStakeRequired: BigInt! # GAME tokens required to stake
  state: OrganizationState! # current state
  createdAt: BigInt! # creation timestamp
  updatedAt: BigInt! # last update timestamp

  # Derived relationships
  members: [Member!]! @derivedFrom(field: "organization")
  campaigns: [Campaign!]! @derivedFrom(field: "organization")
  proposals: [Proposal!]! @derivedFrom(field: "organization")
  stake: OrganizationStake @derivedFrom(field: "organization")

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

type Member @entity {
  id: ID! # organization ID + member address
  organization: Organization! # organization
  user: User! # user who is a member
  state: MemberState! # member state
  joinedAt: BigInt! # timestamp when joined
  reputation: BigInt! # member reputation
  stake: BigInt! # member stake amount

  # Tracking
  blockNumber: BigInt!
  transactionHash: Bytes!
}

enum MemberState {
  INACTIVE
  ACTIVE
  PAUSED
  BANNED
}

type User @entity {
  id: ID! # user address
  address: Bytes! # user address
  totalOrganizations: BigInt! # total organizations created
  totalMemberships: BigInt! # total memberships
  totalContributions: BigInt! # total contributions made
  totalProposals: BigInt! # total proposals created
  totalVotes: BigInt! # total votes cast
  firstSeenAt: BigInt! # first interaction timestamp
  lastActiveAt: BigInt! # last activity timestamp

  # Derived relationships
  organizations: [Organization!]! @derivedFrom(field: "creator")
  memberships: [Member!]! @derivedFrom(field: "user")
  campaigns: [Campaign!]! @derivedFrom(field: "creator")
  proposals: [Proposal!]! @derivedFrom(field: "creator")
  votes: [Vote!]! @derivedFrom(field: "voter")
  stakes: [UserStake!]! @derivedFrom(field: "user")
  organizationStakes: [OrganizationStake!]! @derivedFrom(field: "staker")
  unstakeRequests: [UnstakeRequest!]! @derivedFrom(field: "user")
}
