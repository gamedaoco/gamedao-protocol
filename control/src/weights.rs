
//! Autogenerated weights for gamedao_control
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-10, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/subzero-dev
// benchmark
// pallet
// --execution=wasm
// --pallet=gamedao_control
// --extrinsic=*
// --steps=20
// --repeat=10
// --output=modules/gamedao-protocol/control/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for gamedao_control.
pub trait WeightInfo {
	fn create_org() -> Weight;
	fn update_org() -> Weight;
	fn disable_org() -> Weight;
	fn enable_org() -> Weight;
	fn add_member(r: u32, ) -> Weight;
	fn update_member_state() -> Weight;
	fn remove_member(r: u32, ) -> Weight;
	fn spend_funds() -> Weight;
}

/// Weights for gamedao_control using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Control OrgCount (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Control Orgs (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: Control Members (r:1 w:1)
	// Storage: Control OrgMemberCount (r:0 w:1)
	// Storage: Control OrgTreasury (r:0 w:1)
	// Storage: Control MemberStates (r:0 w:1)
	// Storage: Control OrgStates (r:0 w:1)
	fn create_org() -> Weight {
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_ref_time(81_000_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(10))
	}
	// Storage: Control Orgs (r:1 w:1)
	// Storage: Control MemberStates (r:1 w:0)
	fn update_org() -> Weight {
		// Minimum execution time: 28_000 nanoseconds.
		Weight::from_ref_time(29_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Control OrgStates (r:0 w:1)
	fn disable_org() -> Weight {
		// Minimum execution time: 23_000 nanoseconds.
		Weight::from_ref_time(24_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Control OrgStates (r:0 w:1)
	fn enable_org() -> Weight {
		// Minimum execution time: 24_000 nanoseconds.
		Weight::from_ref_time(25_000_000)
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Control OrgTreasury (r:1 w:0)
	// Storage: Control Members (r:1 w:1)
	// Storage: Control OrgMemberCount (r:0 w:1)
	// Storage: Control MemberStates (r:0 w:1)
	/// The range of component `r` is `[1, 999]`.
	fn add_member(r: u32, ) -> Weight {
		// Minimum execution time: 36_000 nanoseconds.
		Weight::from_ref_time(34_091_687)
			// Standard Error: 1_851
			.saturating_add(Weight::from_ref_time(65_158).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	fn update_member_state() -> Weight {
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_ref_time(16_000_000)
			.saturating_add(T::DbWeight::get().reads(2))
	}
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Control Members (r:1 w:1)
	// Storage: Control OrgMemberCount (r:0 w:1)
	// Storage: Control MemberStates (r:0 w:1)
	/// The range of component `r` is `[1, 999]`.
	fn remove_member(r: u32, ) -> Weight {
		// Minimum execution time: 30_000 nanoseconds.
		Weight::from_ref_time(37_544_684)
			// Standard Error: 2_351
			.saturating_add(Weight::from_ref_time(43_383).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Control OrgTreasury (r:1 w:0)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:2 w:1)
	fn spend_funds() -> Weight {
		// Minimum execution time: 63_000 nanoseconds.
		Weight::from_ref_time(64_000_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(3))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Control OrgCount (r:1 w:1)
	// Storage: System Account (r:1 w:1)
	// Storage: Control Orgs (r:1 w:1)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: Control Members (r:1 w:1)
	// Storage: Control OrgMemberCount (r:0 w:1)
	// Storage: Control OrgTreasury (r:0 w:1)
	// Storage: Control MemberStates (r:0 w:1)
	// Storage: Control OrgStates (r:0 w:1)
	fn create_org() -> Weight {
		// Minimum execution time: 79_000 nanoseconds.
		Weight::from_ref_time(81_000_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(10))
	}
	// Storage: Control Orgs (r:1 w:1)
	// Storage: Control MemberStates (r:1 w:0)
	fn update_org() -> Weight {
		// Minimum execution time: 28_000 nanoseconds.
		Weight::from_ref_time(29_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Control OrgStates (r:0 w:1)
	fn disable_org() -> Weight {
		// Minimum execution time: 23_000 nanoseconds.
		Weight::from_ref_time(24_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Control OrgStates (r:0 w:1)
	fn enable_org() -> Weight {
		// Minimum execution time: 24_000 nanoseconds.
		Weight::from_ref_time(25_000_000)
			.saturating_add(RocksDbWeight::get().reads(1))
			.saturating_add(RocksDbWeight::get().writes(1))
	}
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Control OrgTreasury (r:1 w:0)
	// Storage: Control Members (r:1 w:1)
	// Storage: Control OrgMemberCount (r:0 w:1)
	// Storage: Control MemberStates (r:0 w:1)
	/// The range of component `r` is `[1, 999]`.
	fn add_member(r: u32, ) -> Weight {
		// Minimum execution time: 36_000 nanoseconds.
		Weight::from_ref_time(34_091_687)
			// Standard Error: 1_851
			.saturating_add(Weight::from_ref_time(65_158).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Control MemberStates (r:1 w:0)
	fn update_member_state() -> Weight {
		// Minimum execution time: 15_000 nanoseconds.
		Weight::from_ref_time(16_000_000)
			.saturating_add(RocksDbWeight::get().reads(2))
	}
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Control Members (r:1 w:1)
	// Storage: Control OrgMemberCount (r:0 w:1)
	// Storage: Control MemberStates (r:0 w:1)
	/// The range of component `r` is `[1, 999]`.
	fn remove_member(r: u32, ) -> Weight {
		// Minimum execution time: 30_000 nanoseconds.
		Weight::from_ref_time(37_544_684)
			// Standard Error: 2_351
			.saturating_add(Weight::from_ref_time(43_383).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(2))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Control OrgTreasury (r:1 w:0)
	// Storage: Tokens Accounts (r:2 w:2)
	// Storage: System Account (r:2 w:1)
	fn spend_funds() -> Weight {
		// Minimum execution time: 63_000 nanoseconds.
		Weight::from_ref_time(64_000_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(3))
	}
}