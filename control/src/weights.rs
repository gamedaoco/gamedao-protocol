
//! Autogenerated weights for gamedao_control
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-03-04, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/subzero-dev
// benchmark
// pallet
// --execution=wasm
// --pallet=gamedao_control
// --extrinsic=*
// --steps=20
// --repeat=10
// --output=modules/gamedao-protocol/control/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for gamedao_control.
pub trait WeightInfo {
	fn create_org() -> Weight;
	fn update_org() -> Weight;
	fn disable_org() -> Weight;
	fn enable_org() -> Weight;
	fn add_member(r: u32, ) -> Weight;
	fn update_member_state() -> Weight;
	fn remove_member(r: u32, ) -> Weight;
	fn spend_funds() -> Weight;
}

/// Weights for gamedao_control using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Control OrgCount (r:1 w:1)
	/// Proof: Control OrgCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:1)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: Control Members (r:1 w:1)
	/// Proof: Control Members (max_values: None, max_size: Some(32050), added: 34525, mode: MaxEncodedLen)
	/// Storage: Control OrgMemberCount (r:0 w:1)
	/// Proof: Control OrgMemberCount (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Control OrgTreasury (r:0 w:1)
	/// Proof: Control OrgTreasury (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Control MemberStates (r:0 w:1)
	/// Proof: Control MemberStates (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:0 w:1)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn create_org() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `408`
		//  Estimated: `45560`
		// Minimum execution time: 70_000 nanoseconds.
		Weight::from_parts(71_000_000, 45560)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(10_u64))
	}
	/// Storage: Control Orgs (r:1 w:1)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Control MemberStates (r:1 w:0)
	/// Proof: Control MemberStates (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	fn update_org() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `565`
		//  Estimated: `5337`
		// Minimum execution time: 21_000 nanoseconds.
		Weight::from_parts(22_000_000, 5337)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:0 w:1)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn disable_org() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `480`
		//  Estimated: `2765`
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_parts(18_000_000, 2765)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:0 w:1)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn enable_org() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `480`
		//  Estimated: `2765`
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_parts(17_000_000, 2765)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Control OrgTreasury (r:1 w:0)
	/// Proof: Control OrgTreasury (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Control Members (r:1 w:1)
	/// Proof: Control Members (max_values: None, max_size: Some(32050), added: 34525, mode: MaxEncodedLen)
	/// Storage: Control OrgMemberCount (r:0 w:1)
	/// Proof: Control OrgMemberCount (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Control MemberStates (r:0 w:1)
	/// Proof: Control MemberStates (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 999]`.
	fn add_member(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `659 + r * (32 ±0)`
		//  Estimated: `39845`
		// Minimum execution time: 29_000 nanoseconds.
		Weight::from_parts(27_804_864, 39845)
			// Standard Error: 897
			.saturating_add(Weight::from_ref_time(34_905).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Control MemberStates (r:1 w:0)
	/// Proof: Control MemberStates (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	fn update_member_state() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `604`
		//  Estimated: `5337`
		// Minimum execution time: 14_000 nanoseconds.
		Weight::from_parts(15_000_000, 5337)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Control Members (r:1 w:1)
	/// Proof: Control Members (max_values: None, max_size: Some(32050), added: 34525, mode: MaxEncodedLen)
	/// Storage: Control OrgMemberCount (r:0 w:1)
	/// Proof: Control OrgMemberCount (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Control MemberStates (r:0 w:1)
	/// Proof: Control MemberStates (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 999]`.
	fn remove_member(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `584 + r * (32 ±0)`
		//  Estimated: `37290`
		// Minimum execution time: 25_000 nanoseconds.
		Weight::from_parts(23_223_981, 37290)
			// Standard Error: 874
			.saturating_add(Weight::from_ref_time(33_949).saturating_mul(r.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Control OrgTreasury (r:1 w:0)
	/// Proof: Control OrgTreasury (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn spend_funds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1040`
		//  Estimated: `15694`
		// Minimum execution time: 58_000 nanoseconds.
		Weight::from_parts(59_000_000, 15694)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Control OrgCount (r:1 w:1)
	/// Proof: Control OrgCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Control Orgs (r:1 w:1)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: Control Members (r:1 w:1)
	/// Proof: Control Members (max_values: None, max_size: Some(32050), added: 34525, mode: MaxEncodedLen)
	/// Storage: Control OrgMemberCount (r:0 w:1)
	/// Proof: Control OrgMemberCount (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Control OrgTreasury (r:0 w:1)
	/// Proof: Control OrgTreasury (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Control MemberStates (r:0 w:1)
	/// Proof: Control MemberStates (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:0 w:1)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn create_org() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `408`
		//  Estimated: `45560`
		// Minimum execution time: 70_000 nanoseconds.
		Weight::from_parts(71_000_000, 45560)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(10_u64))
	}
	/// Storage: Control Orgs (r:1 w:1)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Control MemberStates (r:1 w:0)
	/// Proof: Control MemberStates (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	fn update_org() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `565`
		//  Estimated: `5337`
		// Minimum execution time: 21_000 nanoseconds.
		Weight::from_parts(22_000_000, 5337)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:0 w:1)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn disable_org() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `480`
		//  Estimated: `2765`
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_parts(18_000_000, 2765)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Control OrgStates (r:0 w:1)
	/// Proof: Control OrgStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn enable_org() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `480`
		//  Estimated: `2765`
		// Minimum execution time: 17_000 nanoseconds.
		Weight::from_parts(17_000_000, 2765)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Control OrgTreasury (r:1 w:0)
	/// Proof: Control OrgTreasury (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Control Members (r:1 w:1)
	/// Proof: Control Members (max_values: None, max_size: Some(32050), added: 34525, mode: MaxEncodedLen)
	/// Storage: Control OrgMemberCount (r:0 w:1)
	/// Proof: Control OrgMemberCount (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Control MemberStates (r:0 w:1)
	/// Proof: Control MemberStates (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 999]`.
	fn add_member(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `659 + r * (32 ±0)`
		//  Estimated: `39845`
		// Minimum execution time: 29_000 nanoseconds.
		Weight::from_parts(27_804_864, 39845)
			// Standard Error: 897
			.saturating_add(Weight::from_ref_time(34_905).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(3_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Control MemberStates (r:1 w:0)
	/// Proof: Control MemberStates (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	fn update_member_state() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `604`
		//  Estimated: `5337`
		// Minimum execution time: 14_000 nanoseconds.
		Weight::from_parts(15_000_000, 5337)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Control Members (r:1 w:1)
	/// Proof: Control Members (max_values: None, max_size: Some(32050), added: 34525, mode: MaxEncodedLen)
	/// Storage: Control OrgMemberCount (r:0 w:1)
	/// Proof: Control OrgMemberCount (max_values: None, max_size: Some(52), added: 2527, mode: MaxEncodedLen)
	/// Storage: Control MemberStates (r:0 w:1)
	/// Proof: Control MemberStates (max_values: None, max_size: Some(97), added: 2572, mode: MaxEncodedLen)
	/// The range of component `r` is `[1, 999]`.
	fn remove_member(r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `584 + r * (32 ±0)`
		//  Estimated: `37290`
		// Minimum execution time: 25_000 nanoseconds.
		Weight::from_parts(23_223_981, 37290)
			// Standard Error: 874
			.saturating_add(Weight::from_ref_time(33_949).saturating_mul(r.into()))
			.saturating_add(RocksDbWeight::get().reads(2_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Control OrgTreasury (r:1 w:0)
	/// Proof: Control OrgTreasury (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: System Account (r:2 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn spend_funds() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1040`
		//  Estimated: `15694`
		// Minimum execution time: 58_000 nanoseconds.
		Weight::from_parts(59_000_000, 15694)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(3_u64))
	}
}