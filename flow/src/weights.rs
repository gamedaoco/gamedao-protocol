
//! Autogenerated weights for gamedao_flow
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-10, STEPS: `20`, REPEAT: 10, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/subzero-dev
// benchmark
// pallet
// --execution=wasm
// --pallet=gamedao_flow
// --extrinsic=*
// --steps=20
// --repeat=10
// --output=modules/gamedao-protocol/flow/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for gamedao_flow.
pub trait WeightInfo {
	fn create_campaign() -> Weight;
	fn contribute() -> Weight;
	fn on_initialize(c: u32, p: u32, ) -> Weight;
}

/// Weights for gamedao_flow using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Flow CampaignCount (r:1 w:1)
	// Storage: Flow CampaignsByBlock (r:2 w:2)
	// Storage: Control OrgTreasury (r:1 w:0)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Flow CampaignOf (r:0 w:1)
	// Storage: Flow CampaignStates (r:0 w:1)
	fn create_campaign() -> Weight {
		// Minimum execution time: 64_000 nanoseconds.
		Weight::from_ref_time(67_000_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	// Storage: Flow CampaignOf (r:1 w:0)
	// Storage: Flow CampaignStates (r:1 w:0)
	// Storage: Flow CampaignContribution (r:1 w:1)
	// Storage: Flow CampaignContributorsCount (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Flow CampaignBalance (r:1 w:1)
	fn contribute() -> Weight {
		// Minimum execution time: 56_000 nanoseconds.
		Weight::from_ref_time(58_000_000)
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	// Storage: Flow CampaignsByBlock (r:1 w:0)
	// Storage: Flow CampaignStates (r:10 w:11)
	// Storage: Flow CampaignFinalizationQueue (r:2 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Flow CampaignContribution (r:5 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Flow CampaignBalance (r:0 w:1)
	/// The range of component `c` is `[0, 100]`.
	/// The range of component `p` is `[0, 10]`.
	fn on_initialize(c: u32, p: u32, ) -> Weight {
		// Minimum execution time: 134_000 nanoseconds.
		Weight::from_ref_time(68_040_945)
			// Standard Error: 55_163
			.saturating_add(Weight::from_ref_time(25_455_935).saturating_mul(c.into()))
			// Standard Error: 551_554
			.saturating_add(Weight::from_ref_time(9_852_261).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(5))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Control Orgs (r:1 w:0)
	// Storage: Flow CampaignCount (r:1 w:1)
	// Storage: Flow CampaignsByBlock (r:2 w:2)
	// Storage: Control OrgTreasury (r:1 w:0)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Flow CampaignOf (r:0 w:1)
	// Storage: Flow CampaignStates (r:0 w:1)
	fn create_campaign() -> Weight {
		// Minimum execution time: 64_000 nanoseconds.
		Weight::from_ref_time(67_000_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(6))
	}
	// Storage: Flow CampaignOf (r:1 w:0)
	// Storage: Flow CampaignStates (r:1 w:0)
	// Storage: Flow CampaignContribution (r:1 w:1)
	// Storage: Flow CampaignContributorsCount (r:1 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Flow CampaignBalance (r:1 w:1)
	fn contribute() -> Weight {
		// Minimum execution time: 56_000 nanoseconds.
		Weight::from_ref_time(58_000_000)
			.saturating_add(RocksDbWeight::get().reads(6))
			.saturating_add(RocksDbWeight::get().writes(4))
	}
	// Storage: Flow CampaignsByBlock (r:1 w:0)
	// Storage: Flow CampaignStates (r:10 w:11)
	// Storage: Flow CampaignFinalizationQueue (r:2 w:1)
	// Storage: Tokens Accounts (r:1 w:1)
	// Storage: Flow CampaignContribution (r:5 w:0)
	// Storage: System Account (r:1 w:1)
	// Storage: Flow CampaignBalance (r:0 w:1)
	/// The range of component `c` is `[0, 100]`.
	/// The range of component `p` is `[0, 10]`.
	fn on_initialize(c: u32, p: u32, ) -> Weight {
		// Minimum execution time: 134_000 nanoseconds.
		Weight::from_ref_time(68_040_945)
			// Standard Error: 55_163
			.saturating_add(Weight::from_ref_time(25_455_935).saturating_mul(c.into()))
			// Standard Error: 551_554
			.saturating_add(Weight::from_ref_time(9_852_261).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(5))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(RocksDbWeight::get().writes(5))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(p.into())))
	}
}