
//! Autogenerated weights for gamedao_flow
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-04-19, STEPS: `20`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: None, DB CACHE: 1024

// Executed Command:
// ./target/release/subzero
// benchmark
// pallet
// --execution=wasm
// --pallet=gamedao_flow
// --extrinsic=*
// --steps=20
// --repeat=10
// --output=modules/gamedao-protocol/flow/src/weights.rs
// --template=./.maintain/frame-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for gamedao_flow.
pub trait WeightInfo {
	fn create_campaign() -> Weight;
	fn contribute() -> Weight;
	fn on_initialize(c: u32, p: u32, ) -> Weight;
}

/// Weights for gamedao_flow using the Substrate node and recommended hardware.
pub struct SubstrateWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for SubstrateWeight<T> {
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Flow CampaignCount (r:1 w:1)
	/// Proof: Flow CampaignCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Flow CampaignsByBlock (r:2 w:2)
	/// Proof: Flow CampaignsByBlock (max_values: None, max_size: Some(358), added: 2833, mode: MaxEncodedLen)
	/// Storage: Control OrgTreasury (r:1 w:0)
	/// Proof: Control OrgTreasury (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: Flow CampaignOf (r:0 w:1)
	/// Proof: Flow CampaignOf (max_values: None, max_size: Some(460), added: 2935, mode: MaxEncodedLen)
	/// Storage: Flow CampaignStates (r:0 w:1)
	/// Proof: Flow CampaignStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn create_campaign() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `947`
		//  Estimated: `19019`
		// Minimum execution time: 66_000 nanoseconds.
		Weight::from_parts(68_000_000, 19019)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(6_u64))
	}
	/// Storage: Flow CampaignOf (r:1 w:0)
	/// Proof: Flow CampaignOf (max_values: None, max_size: Some(460), added: 2935, mode: MaxEncodedLen)
	/// Storage: Flow CampaignStates (r:1 w:0)
	/// Proof: Flow CampaignStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Flow CampaignContribution (r:1 w:1)
	/// Proof: Flow CampaignContribution (max_values: None, max_size: Some(112), added: 2587, mode: MaxEncodedLen)
	/// Storage: Flow CampaignContributorsCount (r:1 w:1)
	/// Proof: Flow CampaignContributorsCount (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: Flow CampaignBalance (r:1 w:1)
	/// Proof: Flow CampaignBalance (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	fn contribute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1042`
		//  Estimated: `21640`
		// Minimum execution time: 53_000 nanoseconds.
		Weight::from_parts(54_000_000, 21640)
			.saturating_add(T::DbWeight::get().reads(6_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Flow CampaignsByBlock (r:1 w:0)
	/// Proof: Flow CampaignsByBlock (max_values: None, max_size: Some(358), added: 2833, mode: MaxEncodedLen)
	/// Storage: Flow CampaignStates (r:10 w:11)
	/// Proof: Flow CampaignStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Flow CampaignFinalizationQueue (r:2 w:1)
	/// Proof: Flow CampaignFinalizationQueue (max_values: None, max_size: Some(320511), added: 322986, mode: MaxEncodedLen)
	/// Storage: Flow CampaignContribution (r:100 w:0)
	/// Proof: Flow CampaignContribution (max_values: None, max_size: Some(112), added: 2587, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:102 w:102)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Flow CampaignBalance (r:0 w:1)
	/// Proof: Flow CampaignBalance (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// The range of component `c` is `[0, 100]`.
	/// The range of component `p` is `[0, 10]`.
	fn on_initialize(c: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1489 + c * (257 ±0) + p * (87 ±0)`
		//  Estimated: `660937 + c * (5183 ±0) + p * (2595 ±4)`
		// Minimum execution time: 146_000 nanoseconds.
		Weight::from_parts(68_171_926, 660937)
			// Standard Error: 65_182
			.saturating_add(Weight::from_ref_time(29_183_288).saturating_mul(c.into()))
			// Standard Error: 651_727
			.saturating_add(Weight::from_ref_time(11_547_431).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(5_u64))
			.saturating_add(T::DbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(T::DbWeight::get().writes(5_u64))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(T::DbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_proof_size(5183).saturating_mul(c.into()))
			.saturating_add(Weight::from_proof_size(2595).saturating_mul(p.into()))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	/// Storage: Control Orgs (r:1 w:0)
	/// Proof: Control Orgs (max_values: None, max_size: Some(290), added: 2765, mode: MaxEncodedLen)
	/// Storage: Flow CampaignCount (r:1 w:1)
	/// Proof: Flow CampaignCount (max_values: Some(1), max_size: Some(4), added: 499, mode: MaxEncodedLen)
	/// Storage: Flow CampaignsByBlock (r:2 w:2)
	/// Proof: Flow CampaignsByBlock (max_values: None, max_size: Some(358), added: 2833, mode: MaxEncodedLen)
	/// Storage: Control OrgTreasury (r:1 w:0)
	/// Proof: Control OrgTreasury (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: Flow CampaignOf (r:0 w:1)
	/// Proof: Flow CampaignOf (max_values: None, max_size: Some(460), added: 2935, mode: MaxEncodedLen)
	/// Storage: Flow CampaignStates (r:0 w:1)
	/// Proof: Flow CampaignStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	fn create_campaign() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `947`
		//  Estimated: `19019`
		// Minimum execution time: 66_000 nanoseconds.
		Weight::from_parts(68_000_000, 19019)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(6_u64))
	}
	/// Storage: Flow CampaignOf (r:1 w:0)
	/// Proof: Flow CampaignOf (max_values: None, max_size: Some(460), added: 2935, mode: MaxEncodedLen)
	/// Storage: Flow CampaignStates (r:1 w:0)
	/// Proof: Flow CampaignStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Flow CampaignContribution (r:1 w:1)
	/// Proof: Flow CampaignContribution (max_values: None, max_size: Some(112), added: 2587, mode: MaxEncodedLen)
	/// Storage: Flow CampaignContributorsCount (r:1 w:1)
	/// Proof: Flow CampaignContributorsCount (max_values: None, max_size: Some(56), added: 2531, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: Flow CampaignBalance (r:1 w:1)
	/// Proof: Flow CampaignBalance (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	fn contribute() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1042`
		//  Estimated: `21640`
		// Minimum execution time: 53_000 nanoseconds.
		Weight::from_parts(54_000_000, 21640)
			.saturating_add(RocksDbWeight::get().reads(6_u64))
			.saturating_add(RocksDbWeight::get().writes(4_u64))
	}
	/// Storage: Flow CampaignsByBlock (r:1 w:0)
	/// Proof: Flow CampaignsByBlock (max_values: None, max_size: Some(358), added: 2833, mode: MaxEncodedLen)
	/// Storage: Flow CampaignStates (r:10 w:11)
	/// Proof: Flow CampaignStates (max_values: None, max_size: Some(49), added: 2524, mode: MaxEncodedLen)
	/// Storage: Flow CampaignFinalizationQueue (r:2 w:1)
	/// Proof: Flow CampaignFinalizationQueue (max_values: None, max_size: Some(320511), added: 322986, mode: MaxEncodedLen)
	/// Storage: Flow CampaignContribution (r:100 w:0)
	/// Proof: Flow CampaignContribution (max_values: None, max_size: Some(112), added: 2587, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:102 w:102)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(109), added: 2584, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Flow CampaignBalance (r:0 w:1)
	/// Proof: Flow CampaignBalance (max_values: None, max_size: Some(64), added: 2539, mode: MaxEncodedLen)
	/// The range of component `c` is `[0, 100]`.
	/// The range of component `p` is `[0, 10]`.
	fn on_initialize(c: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1489 + c * (257 ±0) + p * (87 ±0)`
		//  Estimated: `660937 + c * (5183 ±0) + p * (2595 ±4)`
		// Minimum execution time: 146_000 nanoseconds.
		Weight::from_parts(68_171_926, 660937)
			// Standard Error: 65_182
			.saturating_add(Weight::from_ref_time(29_183_288).saturating_mul(c.into()))
			// Standard Error: 651_727
			.saturating_add(Weight::from_ref_time(11_547_431).saturating_mul(p.into()))
			.saturating_add(RocksDbWeight::get().reads(5_u64))
			.saturating_add(RocksDbWeight::get().reads((2_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().reads((1_u64).saturating_mul(p.into())))
			.saturating_add(RocksDbWeight::get().writes(5_u64))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(c.into())))
			.saturating_add(RocksDbWeight::get().writes((1_u64).saturating_mul(p.into())))
			.saturating_add(Weight::from_proof_size(5183).saturating_mul(c.into()))
			.saturating_add(Weight::from_proof_size(2595).saturating_mul(p.into()))
	}
}